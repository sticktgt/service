files:
  - path: Chart.yaml
    template: true
    content: |
      apiVersion: v2
      name: {{ .chart.name }}
      version: {{ .chart.version }}
      description: {{ .chart.description }}
      type: application
      app.dognauts:
        subjectArea: {{ .subjectArea }}
        sourceMetafileRepo: {{ .sourceMetafileRepo }}
        sourceMetafileBranch: {{ .sourceMetafileBranch }}
        sourceMetafileName: {{ .sourceMetafileName }}
      annotations:
        app.dognauts/platform-generated: true
        app.dognauts/subjectArea: {{ .subjectArea }}

  - path: values.yaml
    template: true
    content: |
      apiVersion: {{ .apiVersion }}
      {{- if .environment }}
      environment: {{ .environment }}
      {{- end }}
      {{- if .protocol }}
      protocol: {{ .protocol }}
      {{- end }}
      {{- if .transport }}
      transport: {{ .transport }}
      {{- end }}
      {{- if .annotations }}
      specAnnotations:
        {{- range $k, $v := .annotations }}
        {{ $k }}: {{ $v }}
        {{- end }}
      {{- end }}
      chart:
        name: {{ .chart.name }}
        version: {{ .chart.version }}
        description: {{ .chart.description }}
      deploymentName: {{ .deploymentName }}
      namespace: {{ .namespace }}
      metadata:
        labels:
          {{- range $k, $v := .metadata.labels }}
          {{ $k }}: {{ $v }}
          {{- end }}
        annotations:
          {{- range $k, $v := .metadata.annotations }}
          {{ $k }}: {{ $v }}
          {{- end }}
      predictors:
      {{- range .predictors }}
        {{ .name }}:
          name: {{ .name }}
          replicas: {{ .replicas }}        
          graph:
            name: {{ .graph.name }}
            type: {{ .graph.type }}
            {{- if .graph.implementation }}
            implementation: {{ .graph.implementation }}
            {{- end }}
            {{- if .graph.modelUri }}
            modelUri: {{ .graph.modelUri }}
            {{- end }}
            {{- if .graph.envSecretRefName }}
            envSecretRefName: {{ .graph.envSecretRefName }}
            {{- end }}
            {{- if .graph.endpoint }}
            endpoint:
              type: {{ .graph.endpoint.type }}
            {{- end }}
            {{- if .graph.logger }}
            logger:
              mode: {{ .graph.logger.mode }}
              {{- if .graph.logger.url }}
              url: {{ .graph.logger.url }}
              {{- end }}
            {{- end }}
            {{- if .graph.parameters }}
            parameters:
              {{- range .graph.parameters }}
              - name: {{ .name }}
                type: {{ .type }}
                value: {{ .value }}
              {{- end }}
            {{- end }}
            {{- if .graph.children }}
            children:
              {{- range .graph.children }}
              {{ .name }}:
                name: {{ .name }}
                type: {{ .type }}
                {{- if .implementation }}
                implementation: {{ .implementation }}
                {{- end }}
                {{- if .modelUri }}
                modelUri: {{ .modelUri }}
                {{- end }}
                {{- if .envSecretRefName }}
                envSecretRefName: {{ .envSecretRefName }}
                {{- end }}
                {{- if .endpoint }}
                endpoint:
                  type: {{ .endpoint.type }}
                {{- end }}
                {{- if .logger }}
                logger:
                  mode: {{ .logger.mode }}
                  {{- if .logger.url }}
                  url: {{ .logger.url }}
                  {{- end }}
                {{- end }}
                {{- if .parameters }}
                parameters:
                  {{- range .parameters }}
                  - name: {{ .name }}
                    type: {{ .type }}
                    value: {{ .value }}
                  {{- end }}
                {{- end }}
                {{- if .children }}
                children:
                  {{- range .children }}
                  {{ .name }}:
                    name: {{ .name }}
                    type: {{ .type }}
                    {{- if .implementation }}
                    implementation: {{ .implementation }}
                    {{- end }}
                    {{- if .modelUri }}
                    modelUri: {{ .modelUri }}
                    {{- end }}
                    {{- if .envSecretRefName }}
                    envSecretRefName: {{ .envSecretRefName }}
                    {{- end }}
                    {{- if .endpoint }}
                    endpoint:
                      type: {{ .endpoint.type }}
                    {{- end }}
                    {{- if .logger }}
                    logger:
                      mode: {{ .logger.mode }}
                      {{- if .logger.url }}
                      url: {{ .logger.url }}
                      {{- end }}
                    {{- end }}
                    {{- if .parameters }}
                    parameters:
                      {{- range .parameters }}
                      - name: {{ .name }}
                        type: {{ .type }}
                        value: {{ .value }}
                      {{- end }}
                    {{- end }}
                    {{- if .children }}
                    children:
                      {{- range .children }}
                      {{ .name }}:
                        name: {{ .name }}
                        type: {{ .type }}
                        {{- if .implementation }}
                        implementation: {{ .implementation }}
                        {{- end }}
                        {{- if .modelUri }}
                        modelUri: {{ .modelUri }}
                        {{- end }}
                        {{- if .envSecretRefName }}
                        envSecretRefName: {{ .envSecretRefName }}
                        {{- end }}
                        {{- if .endpoint }}
                        endpoint:
                          type: {{ .endpoint.type }}
                        {{- end }}
                        {{- if .logger }}
                        logger:
                          mode: {{ .logger.mode }}
                          {{- if .logger.url }}
                          url: {{ .logger.url }}
                          {{- end }}
                        {{- end }}
                        {{- if .parameters }}
                        parameters:
                          {{- range .parameters }}
                          - name: {{ .name }}
                            type: {{ .type }}
                            value: {{ .value }}
                          {{- end }}
                        {{- end }}
                        {{- if .children }}
                        children:
                          {{- range .children }}
                          {{ .name }}:
                            name: {{ .name }}
                            type: {{ .type }}
                            {{- if .implementation }}
                            implementation: {{ .implementation }}
                            {{- end }}
                            {{- if .modelUri }}
                            modelUri: {{ .modelUri }}
                            {{- end }}
                            {{- if .envSecretRefName }}
                            envSecretRefName: {{ .envSecretRefName }}
                            {{- end }}
                            {{- if .endpoint }}
                            endpoint:
                              type: {{ .endpoint.Type }}
                            {{- end }}
                            {{- if .logger }}
                            logger:
                              Mode: {{ .logger.Mode }}
                              {{- if .logger.URL }}
                              URL: {{ .logger.URL }}
                              {{- end }}
                            {{- end }}
                            {{- if .parameters }}
                            parameters:
                              {{- range .parameters }}
                              - name: {{ .name }}
                                type: {{ .type }}
                                value: {{ .value }}
                              {{- end }}
                            {{- end }}
                            children: []
                          {{- end }}
                        {{- else }}
                        children: []
                        {{- end }}
                      {{- end }}
                    {{- else }}
                    children: []
                    {{- end }}
                  {{- end }}
                {{- else }}
                children: []
                {{- end }}
              {{- end }}
            {{- else }}
            children: []
            {{- end }}
      {{- end }}

  - path: values-ENV.yaml
    template: true
    content: |
      predictors:
      {{- range .predictors }}
        {{ .name }}:
          name: {{ .name }}
          replicas: {{ .replicas }}
          traffic: {{ .traffic }}
          {{- if .engineResources }}
          engineResources:
            {{- if .engineResources.requests }}
            requests:
              {{- if .engineResources.requests.cpu }}
              cpu: {{ .engineResources.requests.cpu }}
              {{- end }}
              {{- if .engineResources.requests.memory }}
              memory: {{ .engineResources.requests.memory }}
              {{- end }}
            {{- end }}
            {{- if .engineResources.limits }}
            limits:
              {{- if .engineResources.limits.cpu }}
              cpu: {{ .engineResources.limits.cpu }}
              {{- end }}
              {{- if .engineResources.limits.memory }}
              memory: {{ .engineResources.limits.memory }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .labels }}
          labels:
            {{- range $k, $v := .labels }}
            {{ $k }}: {{ $v }}
            {{- end }}
          {{- end }}
          {{- if .shadow }}
          shadow: {{ .shadow }}
          {{- end }}
          {{- if .ssl }}
          ssl:
            certSecretName: {{ .ssl.certSecretName }}
          {{- end }}
          {{- if .progressDeadlineSeconds }}
          progressDeadlineSeconds: {{ .progressDeadlineSeconds }}
          {{- end }}
          {{- if .explainer }}
          explainer:
            {{- if .explainer.type }}
            type: {{ .explainer.type }}
            {{- end }}
            {{- if .explainer.modelUri }}
            modelUri: {{ .explainer.modelUri }}
            {{- end }}
            {{- if .explainer.serviceAccountName }}
            serviceAccountName: {{ .explainer.serviceAccountName }}
            {{- end }}
            {{- if .explainer.storageInitializerImage }}
            storageInitializerImage: {{ .explainer.storageInitializerImage }}
            {{- end }}
            {{- if .explainer.envSecretRefName }}
            envSecretRefName: {{ .explainer.envSecretRefName }}
            {{- end }}
            {{- if .explainer.initParameters }}
            initParameters: {{ .explainer.initParameters }}
            {{- end }}
            {{- if .explainer.replicas }}
            replicas: {{ .explainer.replicas }}
            {{- end }}
            {{- if .explainer.endpoint }}
            endpoint:
              type: {{ .explainer.endpoint.type }}
            {{- end }}
            {{- if .explainer.config }}
            config:
              {{- range $k, $v := .explainer.config }}
              {{ $k }}: {{ $v }}
              {{- end }}
            {{- end }}
            {{- if .explainer.containerSpec }}
            containerSpec:
              name: {{ .explainer.containerSpec.name }}
              image: {{ .explainer.containerSpec.image }}
              {{- if .explainer.containerSpec.imagePullPolicy }}
              imagePullPolicy: {{ .explainer.containerSpec.imagePullPolicy }}
              {{- end }}
              {{- if .explainer.containerSpec.args }}
              args:
                {{- range .explainer.containerSpec.args }}
                - {{ . }}
                {{- end }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .svcOrchSpec }}
          svcOrchSpec:
            {{- if .svcOrchSpec.resources }}
            resources:
              {{- if .svcOrchSpec.resources.requests }}
              requests:
                {{- if .svcOrchSpec.resources.requests.cpu }}
                cpu: {{ .svcOrchSpec.resources.requests.cpu }}
                {{- end }}
                {{- if .svcOrchSpec.resources.requests.memory }}
                memory: {{ .svcOrchSpec.resources.requests.memory }}
                {{- end }}
              {{- end }}
              {{- if .svcOrchSpec.resources.limits }}
              limits:
                {{- if .svcOrchSpec.resources.limits.cpu }}
                cpu: {{ .svcOrchSpec.resources.limits.cpu }}
                {{- end }}
                {{- if .svcOrchSpec.resources.limits.memory }}
                memory: {{ .svcOrchSpec.resources.limits.memory }}
                {{- end }}
              {{- end }}
            {{- end }}
            {{- if .svcOrchSpec.env }}
            env:
              {{- range .svcOrchSpec.env }}
              - name: {{ .name }}
                {{- if .value }}
                value: {{ .value }}
                {{- else if .valueFrom }}
                valueFrom:
                  secretKeyRef:
                    name: {{ .valueFrom.secretKeyRef.name }}
                    key: {{ .valueFrom.secretKeyRef.key }}
                {{- end }}
              {{- end }}
            {{- end }}
          {{- end }}
          componentSpec:
            serviceAccountName: {{ .componentSpec.serviceAccountName }}
            terminationGracePeriodSeconds: {{ .componentSpec.terminationGracePeriodSeconds }}
            {{- if .componentSpec.hpaSpec }}
            hpaSpec:
              minReplicas: {{ .componentSpec.hpaSpec.minReplicas }}
              maxReplicas: {{ .componentSpec.hpaSpec.maxReplicas }}
              metricsv2:
                {{- range .componentSpec.hpaSpec.metricsv2 }}
                - type: {{ .type }}
                  resource:
                    name: {{ .resource.name }}
                    target:
                      type: {{ .resource.target.type }}
                      averageUtilization: {{ .resource.target.averageUtilization }}
                {{- end }}
            {{- end }}
            {{- if .componentSpec.kedaSpec }}
            kedaSpec:
              {{- if .componentSpec.kedaSpec.minReplicaCount }}
              minReplicaCount: {{ .componentSpec.kedaSpec.minReplicaCount }}
              {{- end }}
              {{- if .componentSpec.kedaSpec.maxReplicaCount }}
              maxReplicaCount: {{ .componentSpec.kedaSpec.maxReplicaCount }}
              {{- end }}
              {{- if .componentSpec.kedaSpec.cooldownPeriod }}
              cooldownPeriod: {{ .componentSpec.kedaSpec.cooldownPeriod }}
              {{- end }}
              {{- if .componentSpec.kedaSpec.pollingInterval }}
              pollingInterval: {{ .componentSpec.kedaSpec.pollingInterval }}
              {{- end }}
              {{- if .componentSpec.kedaSpec.triggers }}
              triggers:
                {{- range .componentSpec.kedaSpec.triggers }}
                - type: {{ .type }}
                  {{- if .metadata }}
                  metadata:
                    {{- range $k, $v := .metadata }}
                    {{ $k }}: {{ $v }}
                    {{- end }}
                  {{- end }}
                  {{- if .authenticationRef }}
                  authenticationRef:
                    name: {{ .authenticationRef.name }}
                  {{- end }}
                {{- end }}
              {{- end }}
              {{- if .componentSpec.kedaSpec.advanced }}
              advanced:
                {{- if .componentSpec.kedaSpec.advanced.restoreToOriginalReplicaCount }}
                restoreToOriginalReplicaCount: {{ .componentSpec.kedaSpec.advanced.restoreToOriginalReplicaCount }}
                {{- end }}
                {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig }}
                horizontalPodAutoscalerConfig:
                  {{ .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig }}
                {{- end }}
              {{- end }}
            {{- end }}
            {{- if .componentSpec.pdbSpec }}
            pdbSpec:
              {{- if .componentSpec.pdbSpec.minAvailable }}
              minAvailable: {{ .componentSpec.pdbSpec.minAvailable }}
              {{- end }}
              {{- if .componentSpec.pdbSpec.maxUnavailable }}
              maxUnavailable: {{ .componentSpec.pdbSpec.maxUnavailable }}
              {{- end }}
            {{- end }}
            {{- if .componentSpec.volumes }}
            volumes:
            {{- range .componentSpec.volumes }}
              {{ .name }}:
                name: {{ .name }}
                {{- if .emptyDir }}
                emptyDir:
                  {{- if .emptyDir.medium }}
                  medium: {{ .emptyDir.medium }}
                  {{- end }}
                  {{- if .emptyDir.sizeLimit }}
                  sizeLimit: {{ .emptyDir.sizeLimit }}
                  {{- end }}
                {{- else if .secret }}
                secret:
                  secretName: {{ .secret.secretName }}
                {{- end }}
            {{- end }}
            {{- end }}
            {{- if .componentSpec.containers }}
            containers:
            {{- range .componentSpec.containers }}
              {{ .name }}:
                name: {{ .name }}
                image: {{ .image }}
                {{- if .imagePullPolicy }}
                imagePullPolicy: {{ .imagePullPolicy }}
                {{- end }}
                {{- if .args }}
                args:
                  {{- range .args }}
                  - {{ . }}
                  {{- end }}
                {{- end }}
                env:
                  {{- range .env }}
                  - name: {{ .name }}
                    {{- if .value }}
                    value: {{ .value }}
                    {{- else if .valueFrom }}
                    valueFrom:
                      secretKeyRef:
                        name: {{ .valueFrom.secretKeyRef.name }}
                        key: {{ .valueFrom.secretKeyRef.key }}
                    {{- end }}
                  {{- end }}
                {{- if .envFrom }}
                envFrom:
                  {{- range .envFrom }}
                  {{- if .secretRef }}
                  - secretRef:
                      name: {{ .secretRef.name }}
                  {{- end }}
                  {{- if .configMapRef }}
                  - configMapRef:
                      name: {{ .configMapRef.name }}
                  {{- end }}
                  {{- end }}
                {{- end }}
                {{- if .volumeMounts }}
                volumeMounts:
                  {{- range .volumeMounts }}
                  {{ .name }}:
                    name: {{ .name }}
                    mountPath: {{ .mountPath }}
                    {{- if .readOnly }}
                    readOnly: {{ .readOnly }}
                    {{- end }}
                  {{- end }}
                {{- end }}
                {{- if .resources }}
                resources:
                  {{- if .resources.requests }}
                  requests:
                    {{- if .resources.requests.cpu }}
                    cpu: {{ .resources.requests.cpu }}
                    {{- end }}
                    {{- if .resources.requests.memory }}
                    memory: {{ .resources.requests.memory }}
                    {{- end }}
                  {{- end }}
                  {{- if .resources.limits }}
                  limits:
                    {{- if .resources.limits.cpu }}
                    cpu: {{ .resources.limits.cpu }}
                    {{- end }}
                    {{- if .resources.limits.memory }}
                    memory: {{ .resources.limits.memory }}
                    {{- end }}
                  {{- end }}
                {{- end }}
                {{- if .liveness }}
                liveness:
                  path: {{ .liveness.path }}
                  port: {{ .liveness.port }}
                  initialDelaySeconds: {{ .liveness.initialDelaySeconds }}
                  periodSeconds: {{ .liveness.periodSeconds }}
                  failureThreshold: {{ .liveness.failureThreshold }}
                  successThreshold: {{ .liveness.successThreshold }}
                  {{- if .liveness.scheme }}
                  scheme: {{ .liveness.scheme }}
                  {{- end }}
                {{- end }}
                {{- if .readiness }}
                readiness:
                  path: {{ .readiness.path }}
                  port: {{ .readiness.port }}
                  initialDelaySeconds: {{ .readiness.initialDelaySeconds }}
                  periodSeconds: {{ .readiness.periodSeconds }}
                  failureThreshold: {{ .readiness.failureThreshold }}
                  successThreshold: {{ .readiness.successThreshold }}
                  {{- if .readiness.scheme }}
                  scheme: {{ .readiness.scheme }}
                  {{- end }}
                {{- end }}
                {{- if .lifecycle }}
                lifecycle:
                  {{- if .lifecycle.postStart }}
                  postStart:
                    {{- if .lifecycle.postStart.exec }}
                    exec:
                      command:
                        {{- range .lifecycle.postStart.exec.command }}
                        - {{ . }}
                        {{- end }}
                    {{- end }}
                    {{- if .lifecycle.postStart.httpGet }}
                    httpGet:
                      path: {{ .lifecycle.postStart.httpGet.path }}
                      port: {{ .lifecycle.postStart.httpGet.port }}
                      {{- if .lifecycle.postStart.httpGet.scheme }}
                      scheme: {{ .lifecycle.postStart.httpGet.scheme }}
                      {{- end }}
                      {{- if .lifecycle.postStart.httpGet.host }}
                      host: {{ .lifecycle.postStart.httpGet.host }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .lifecycle.preStop }}
                  preStop:
                    {{- if .lifecycle.preStop.exec }}
                    exec:
                      command:
                        {{- range .lifecycle.preStop.exec.command }}
                        - {{ . }}
                        {{- end }}
                    {{- end }}
                    {{- if .lifecycle.preStop.httpGet }}
                    httpGet:
                      path: {{ .lifecycle.preStop.httpGet.path }}
                      port: {{ .lifecycle.preStop.httpGet.port }}
                      {{- if .lifecycle.preStop.httpGet.scheme }}
                      scheme: {{ .lifecycle.preStop.httpGet.scheme }}
                      {{- end }}
                      {{- if .lifecycle.preStop.httpGet.host }}
                      host: {{ .lifecycle.preStop.httpGet.host }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                {{- end }}
            {{- end }}
            {{- end }}
            {{- if .componentSpec.initContainers }}
            initContainers:
            {{- range .componentSpec.initContainers }}
              {{ .name }}:
                name: {{ .name }}
                image: {{ .image }}
                {{- if .imagePullPolicy }}
                imagePullPolicy: {{ .imagePullPolicy }}
                {{- end }}
                {{- if .args }}
                args:
                  {{- range .args }}
                  - {{ . }}
                  {{- end }}
                {{- end }}
                env:
                  {{- range .env }}
                  - name: {{ .name }}
                    {{- if .value }}
                    value: {{ .value }}
                    {{- else if .valueFrom }}
                    valueFrom:
                      secretKeyRef:
                        name: {{ .valueFrom.secretKeyRef.name }}
                        key: {{ .valueFrom.secretKeyRef.key }}
                    {{- end }}
                  {{- end }}
                {{- if .envFrom }}
                envFrom:
                  {{- range .envFrom }}
                  {{- if .secretRef }}
                  - secretRef:
                      name: {{ .secretRef.name }}
                  {{- end }}
                  {{- if .configMapRef }}
                  - configMapRef:
                      name: {{ .configMapRef.name }}
                  {{- end }}
                  {{- end }}
                {{- end }}
                volumeMounts:
                  {{- range .volumeMounts }}
                  {{ .name }}:
                    name: {{ .name }}
                    mountPath: {{ .mountPath }}
                    {{- if .readOnly }}
                    readOnly: {{ .readOnly }}
                    {{- end }}
                  {{- end }}
                {{- if .resources }}
                resources:
                  {{- if .resources.requests }}
                  requests:
                    {{- if .resources.requests.cpu }}
                    cpu: {{ .resources.requests.cpu }}
                    {{- end }}
                    {{- if .resources.requests.memory }}
                    memory: {{ .resources.requests.memory }}
                    {{- end }}
                  {{- end }}
                  {{- if .resources.limits }}
                  limits:
                    {{- if .resources.limits.cpu }}
                    cpu: {{ .resources.limits.cpu }}
                    {{- end }}
                    {{- if .resources.limits.memory }}
                    memory: {{ .resources.limits.memory }}
                    {{- end }}
                  {{- end }}
                {{- end }}
                {{- if .liveness }}
                liveness:
                  path: {{ .liveness.path }}
                  port: {{ .liveness.port }}
                  initialDelaySeconds: {{ .liveness.initialDelaySeconds }}
                  periodSeconds: {{ .liveness.periodSeconds }}
                  failureThreshold: {{ .liveness.failureThreshold }}
                  successThreshold: {{ .liveness.successThreshold }}
                  {{- if .liveness.scheme }}
                  scheme: {{ .liveness.scheme }}
                  {{- end }}
                {{- end }}
                {{- if .readiness }}
                readiness:
                  path: {{ .readiness.path }}
                  port: {{ .readiness.port }}
                  initialDelaySeconds: {{ .readiness.initialDelaySeconds }}
                  periodSeconds: {{ .readiness.periodSeconds }}
                  failureThreshold: {{ .readiness.failureThreshold }}
                  successThreshold: {{ .readiness.successThreshold }}
                  {{- if .readiness.scheme }}
                  scheme: {{ .readiness.scheme }}
                  {{- end }}
                {{- end }}
                {{- if .lifecycle }}
                lifecycle:
                  {{- if .lifecycle.postStart }}
                  postStart:
                    {{- if .lifecycle.postStart.exec }}
                    exec:
                      command:
                        {{- range .lifecycle.postStart.exec.command }}
                        - {{ . }}
                        {{- end }}
                    {{- end }}
                    {{- if .lifecycle.postStart.httpGet }}
                    httpGet:
                      path: {{ .lifecycle.postStart.httpGet.path }}
                      port: {{ .lifecycle.postStart.httpGet.port }}
                      {{- if .lifecycle.postStart.httpGet.scheme }}
                      scheme: {{ .lifecycle.postStart.httpGet.scheme }}
                      {{- end }}
                      {{- if .lifecycle.postStart.httpGet.host }}
                      host: {{ .lifecycle.postStart.httpGet.host }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .lifecycle.preStop }}
                  preStop:
                    {{- if .lifecycle.preStop.exec }}
                    exec:
                      command:
                        {{- range .lifecycle.preStop.exec.command }}
                        - {{ . }}
                        {{- end }}
                    {{- end }}
                    {{- if .lifecycle.preStop.httpGet }}
                    httpGet:
                      path: {{ .lifecycle.preStop.httpGet.path }}
                      port: {{ .lifecycle.preStop.httpGet.port }}
                      {{- if .lifecycle.preStop.httpGet.scheme }}
                      scheme: {{ .lifecycle.preStop.httpGet.scheme }}
                      {{- end }}
                      {{- if .lifecycle.preStop.httpGet.host }}
                      host: {{ .lifecycle.preStop.httpGet.host }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                {{- end }}
            {{- end }}
            {{- end }}
          graph:
            name: {{ .graph.name }}
            type: {{ .graph.type }}
            {{- if .graph.implementation }}
            implementation: {{ .graph.implementation }}
            {{- end }}
            {{- if .graph.modelUri }}
            modelUri: {{ .graph.modelUri }}
            {{- end }}
            {{- if .graph.envSecretRefName }}
            envSecretRefName: {{ .graph.envSecretRefName }}
            {{- end }}
            {{- if .graph.endpoint }}
            endpoint:
              type: {{ .graph.endpoint.type }}
            {{- end }}
            {{- if .graph.logger }}
            logger:
              mode: {{ .graph.logger.mode }}
              {{- if .graph.logger.url }}
              url: {{ .graph.logger.url }}
              {{- end }}
            {{- end }}
            {{- if .graph.parameters }}
            parameters:
              {{- range .graph.parameters }}
              - name: {{ .name }}
                type: {{ .type }}
                value: {{ .value }}
              {{- end }}
            {{- end }}
            {{- if .graph.methods }}
            methods:
              {{- range .graph.methods }}
              - {{ . }}
              {{- end }}
            {{- end }}
            {{- if .graph.serviceAccountName }}
            serviceAccountName: {{ .graph.serviceAccountName }}
            {{- end }}
            {{- if .graph.storageInitializerImage }}
            storageInitializerImage: {{ .graph.storageInitializerImage }}
            {{- end }}
            {{- if .graph.children }}
            children:
              {{- range .graph.children }}
              {{ .name }}:
                name: {{ .name }}
                type: {{ .type }}
                {{- if .implementation }}
                implementation: {{ .implementation }}
                {{- end }}
                {{- if .modelUri }}
                modelUri: {{ .modelUri }}
                {{- end }}
                {{- if .envSecretRefName }}
                envSecretRefName: {{ .envSecretRefName }}
                {{- end }}
                {{- if .endpoint }}
                endpoint:
                  type: {{ .endpoint.type }}
                {{- end }}
                {{- if .logger }}
                logger:
                  mode: {{ .logger.mode }}
                  {{- if .logger.url }}
                  url: {{ .logger.url }}
                  {{- end }}
                {{- end }}
                {{- if .parameters }}
                parameters:
                  {{- range .parameters }}
                  - name: {{ .name }}
                    type: {{ .type }}
                    value: {{ .value }}
                  {{- end }}
                {{- end }}
                {{- if .methods }}
                methods:
                  {{- range .methods }}
                  - {{ . }}
                  {{- end }}
                {{- end }}
                {{- if .serviceAccountName }}
                serviceAccountName: {{ .serviceAccountName }}
                {{- end }}
                {{- if .storageInitializerImage }}
                storageInitializerImage: {{ .storageInitializerImage }}
                {{- end }}
                {{- if .children }}
                children:
                  {{- range .children }}
                  {{ .name }}:
                    name: {{ .name }}
                    type: {{ .type }}
                    {{- if .implementation }}
                    implementation: {{ .implementation }}
                    {{- end }}
                    {{- if .modelUri }}
                    modelUri: {{ .modelUri }}
                    {{- end }}
                    {{- if .envSecretRefName }}
                    envSecretRefName: {{ .envSecretRefName }}
                    {{- end }}
                    {{- if .endpoint }}
                    endpoint:
                      type: {{ .endpoint.type }}
                    {{- end }}
                    {{- if .logger }}
                    logger:
                      mode: {{ .logger.mode }}
                      {{- if .logger.url }}
                      url: {{ .logger.url }}
                      {{- end }}
                    {{- end }}
                    {{- if .parameters }}
                    parameters:
                      {{- range .parameters }}
                      - name: {{ .name }}
                        type: {{ .type }}
                        value: {{ .value }}
                      {{- end }}
                    {{- end }}
                    {{- if .methods }}
                    methods:
                      {{- range .methods }}
                      - {{ . }}
                      {{- end }}
                    {{- end }}
                    {{- if .serviceAccountName }}
                    serviceAccountName: {{ .serviceAccountName }}
                    {{- end }}
                    {{- if .storageInitializerImage }}
                    storageInitializerImage: {{ .storageInitializerImage }}
                    {{- end }}
                    {{- if .children }}
                    children:
                      {{- range .children }}
                      {{ .name }}:
                        name: {{ .name }}
                        type: {{ .type }}
                        {{- if .implementation }}
                        implementation: {{ .implementation }}
                        {{- end }}
                        {{- if .modelUri }}
                        modelUri: {{ .modelUri }}
                        {{- end }}
                        {{- if .envSecretRefName }}
                        envSecretRefName: {{ .envSecretRefName }}
                        {{- end }}
                        {{- if .endpoint }}
                        endpoint:
                          type: {{ .endpoint.type }}
                        {{- end }}
                        {{- if .logger }}
                        logger:
                          mode: {{ .logger.mode }}
                          {{- if .logger.url }}
                          url: {{ .logger.url }}
                          {{- end }}
                        {{- end }}
                        {{- if .parameters }}
                        parameters:
                          {{- range .parameters }}
                          - name: {{ .name }}
                            type: {{ .type }}
                            value: {{ .value }}
                          {{- end }}
                        {{- end }}
                        {{- if .methods }}
                        methods:
                          {{- range .methods }}
                          - {{ . }}
                          {{- end }}
                        {{- end }}
                        {{- if .serviceAccountName }}
                        serviceAccountName: {{ .serviceAccountName }}
                        {{- end }}
                        {{- if .storageInitializerImage }}
                        storageInitializerImage: {{ .storageInitializerImage }}
                        {{- end }}
                        {{- if .children }}
                        children:
                          {{- range .children }}
                          {{ .name }}:
                            name: {{ .name }}
                            type: {{ .type }}
                            {{- if .implementation }}
                            implementation: {{ .implementation }}
                            {{- end }}
                            {{- if .modelUri }}
                            modelUri: {{ .modelUri }}
                            {{- end }}
                            {{- if .envSecretRefName }}
                            envSecretRefName: {{ .envSecretRefName }}
                            {{- end }}
                            {{- if .endpoint }}
                            endpoint:
                              type: {{ .endpoint.type }}
                            {{- end }}
                            {{- if .logger }}
                            logger:
                              mode: {{ .logger.mode }}
                              {{- if .logger.url }}
                              url: {{ .logger.url }}
                              {{- end }}
                            {{- end }}
                            {{- if .parameters }}
                            parameters:
                              {{- range .parameters }}
                              - name: {{ .name }}
                                type: {{ .type }}
                                value: {{ .value }}
                              {{- end }}
                            {{- end }}
                            {{- if .methods }}
                            methods:
                              {{- range .methods }}
                              - {{ . }}
                              {{- end }}
                            {{- end }}
                            {{- if .serviceAccountName }}
                            serviceAccountName: {{ .serviceAccountName }}
                            {{- end }}
                            {{- if .storageInitializerImage }}
                            storageInitializerImage: {{ .storageInitializerImage }}
                            {{- end }}
                            children: []
                          {{- end }}
                        {{- else }}
                        children: []
                        {{- end }}
                      {{- end }}
                    {{- else }}
                    children: []
                    {{- end }}
                  {{- end }}
                {{- else }}
                children: []
                {{- end }}
              {{- end }}
            {{- else }}
            children: []
            {{- end }}
      {{- end }}

  - path: templates/_helpers.tpl
    template: false
    content: |
      {{- define "seldon.graph.node" }}
      name: {{ .name }}
      {{- if .type }}
      type: {{ .type }}
      {{- end }}
      {{- if .implementation }}
      implementation: {{ .implementation }}
      {{- end }}
      {{- if .modelUri }}
      modelUri: {{ .modelUri }}
      {{- end }}
      {{- if .envSecretRefName }}
      envSecretRefName: {{ .envSecretRefName }}
      {{- end }}
      {{- if .endpoint }}
      endpoint:
        type: {{ .endpoint.type }}
      {{- end }}
      {{- if .logger }}
      logger:
        mode: {{ .logger.mode }}
        {{- if .logger.url }}
        url: {{ .logger.url }}
        {{- end }}
      {{- end }}
      {{- if .parameters }}
      parameters:
        {{- range .parameters }}
        - name: {{ .name }}
          type: {{ .type }}
          value: {{ .value }}
        {{- end }}
      {{- end }}
      {{- if .methods }}
      methods:
        {{- range .methods }}
        - {{ . }}
        {{- end }}
      {{- end }}
      {{- if .serviceAccountName }}
      serviceAccountName: {{ .serviceAccountName }}
      {{- end }}
      {{- if .storageInitializerImage }}
      storageInitializerImage: {{ .storageInitializerImage }}
      {{- end }}
      {{- if .children }}
      children:
        {{- range $name, $ch := .children }}
        {{- with $ch }}
        - {{ include "seldon.graph.node" . | indent 4 | trim }}
        {{- end }}
        {{- end }}
      {{- else }}
      children: []
      {{- end }}
      {{- end }}
      {{- define "seldon.container" }}
      - name: {{ .name }}
        {{- if .image }}
        image: {{ .image }}
        {{- end }}
        {{- if .imagePullPolicy }}
        imagePullPolicy: {{ .imagePullPolicy }}
        {{- end }}
        {{- if .args }}
        args:
          {{- range .args }}
          - {{ . }}
          {{- end }}
        {{- end }}
        {{- if .env }}
        env:
          {{- range .env }}
          - name: {{ .name }}
            {{- if .value }}
            value: {{ .value }}
            {{- else if .valueFrom }}
            valueFrom:
              secretKeyRef:
                name: {{ .valueFrom.secretKeyRef.name }}
                key: {{ .valueFrom.secretKeyRef.key }}
            {{- end }}
          {{- end }}
        {{- end }}
        {{- if .envFrom }}
        envFrom:
          {{- range .envFrom }}
          {{- if .secretRef }}
          - secretRef:
              name: {{ .secretRef.name }}
          {{- end }}
          {{- if .configMapRef }}
          - configMapRef:
              name: {{ .configMapRef.name }}
          {{- end }}
          {{- end }}
        {{- end }}
        {{- if .volumeMounts }}
        volumeMounts:
          {{- range $name, $vm := .volumeMounts }}
          {{- with $vm }}                  
          - name: {{ .name }}
            mountPath: {{ .mountPath }}
            {{- if .readOnly }}
            readOnly: {{ .readOnly }}
            {{- end }}
          {{- end }}
          {{- end }}
        {{- end }}
        {{- if .resources }}
        resources:
          {{- if .resources.requests }}
          requests:
            {{- if .resources.requests.cpu }}
            cpu: {{ .resources.requests.cpu }}
            {{- end }}
            {{- if .resources.requests.memory }}
            memory: {{ .resources.requests.memory }}
            {{- end }}
          {{- end }}
          {{- if .resources.limits }}
          limits:
            {{- if .resources.limits.cpu }}
            cpu: {{ .resources.limits.cpu }}
            {{- end }}
            {{- if .resources.limits.memory }}
            memory: {{ .resources.limits.memory }}
            {{- end }}
          {{- end }}
        {{- end }}
        {{- if .liveness }}
        livenessProbe:
          httpGet:
            path: {{ .liveness.path }}
            port: {{ .liveness.port }}
            {{- if .liveness.scheme }}
            scheme: {{ .liveness.scheme }}
            {{- end }}
          initialDelaySeconds: {{ .liveness.initialDelaySeconds }}
          periodSeconds: {{ .liveness.periodSeconds }}
          failureThreshold: {{ .liveness.failureThreshold }}
          successThreshold: {{ .liveness.successThreshold }}
        {{- end }}
        {{- if .readiness }}
        readinessProbe:
          httpGet:
            path: {{ .readiness.path }}
            port: {{ .readiness.port }}
            {{- if .readiness.scheme }}
            scheme: {{ .readiness.scheme }}
            {{- end }}
          initialDelaySeconds: {{ .readiness.initialDelaySeconds }}
          periodSeconds: {{ .readiness.periodSeconds }}
          failureThreshold: {{ .readiness.failureThreshold }}
          successThreshold: {{ .readiness.successThreshold }}
        {{- end }}
        {{- if .lifecycle }}
        lifecycle:
          {{- if .lifecycle.postStart }}
          postStart:
            {{- if .lifecycle.postStart.exec }}
            exec:
              command:
                {{- range .lifecycle.postStart.exec.command }}
                - {{ . }}
                {{- end }}
            {{- end }}
            {{- if .lifecycle.postStart.httpGet }}
            httpGet:
              path: {{ .lifecycle.postStart.httpGet.path }}
              port: {{ .lifecycle.postStart.httpGet.port }}
              {{- if .lifecycle.postStart.httpGet.scheme }}
              scheme: {{ .lifecycle.postStart.httpGet.scheme }}
              {{- end }}
              {{- if .lifecycle.postStart.httpGet.host }}
              host: {{ .lifecycle.postStart.httpGet.host }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .lifecycle.preStop }}
          preStop:
            {{- if .lifecycle.preStop.exec }}
            exec:
              command:
                {{- range .lifecycle.preStop.exec.command }}
                - {{ . }}
                {{- end }}
            {{- end }}
            {{- if .lifecycle.preStop.httpGet }}
            httpGet:
              path: {{ .lifecycle.preStop.httpGet.path }}
              port: {{ .lifecycle.preStop.httpGet.port }}
              {{- if .lifecycle.preStop.httpGet.scheme }}
              scheme: {{ .lifecycle.preStop.httpGet.scheme }}
              {{- end }}
              {{- if .lifecycle.preStop.httpGet.host }}
              host: {{ .lifecycle.preStop.httpGet.host }}
              {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}
      {{- end }}
      {{- define "seldon.container-s" }}
        name: {{ .name }}
        {{- if .image }}
        image: {{ .image }}
        {{- end }}
        {{- if .imagePullPolicy }}
        imagePullPolicy: {{ .imagePullPolicy }}
        {{- end }}
        {{- if .args }}
        args:
          {{- range .args }}
          - {{ . }}
          {{- end }}
        {{- end }}
        {{- if .env }}
        env:
          {{- range .env }}
          - name: {{ .name }}
            {{- if .value }}
            value: {{ .value }}
            {{- else if .valueFrom }}
            valueFrom:
              secretKeyRef:
                name: {{ .valueFrom.secretKeyRef.name }}
                key: {{ .valueFrom.secretKeyRef.key }}
            {{- end }}
          {{- end }}
        {{- end }}
        {{- if .envFrom }}
        envFrom:
          {{- range .envFrom }}
          {{- if .secretRef }}
          - secretRef:
              name: {{ .secretRef.name }}
          {{- end }}
          {{- if .configMapRef }}
          - configMapRef:
              name: {{ .configMapRef.name }}
          {{- end }}
          {{- end }}
        {{- end }}
        {{- if .volumeMounts }}
        volumeMounts:
          {{- range $name, $vm := .volumeMounts }}
          {{- with $vm }}         
          - name: {{ .name }}
            mountPath: {{ .mountPath }}
            {{- if .readOnly }}
            readOnly: {{ .readOnly }}
            {{- end }}
          {{- end }}
          {{- end }}
        {{- end }}
        {{- if .resources }}
        resources:
          {{- if .resources.requests }}
          requests:
            {{- if .resources.requests.cpu }}
            cpu: {{ .resources.requests.cpu }}
            {{- end }}
            {{- if .resources.requests.memory }}
            memory: {{ .resources.requests.memory }}
            {{- end }}
          {{- end }}
          {{- if .resources.limits }}
          limits:
            {{- if .resources.limits.cpu }}
            cpu: {{ .resources.limits.cpu }}
            {{- end }}
            {{- if .resources.limits.memory }}
            memory: {{ .resources.limits.memory }}
            {{- end }}
          {{- end }}
        {{- end }}
        {{- if .liveness }}
        livenessProbe:
          httpGet:
            path: {{ .liveness.path }}
            port: {{ .liveness.port }}
            {{- if .liveness.scheme }}
            scheme: {{ .liveness.scheme }}
            {{- end }}
          initialDelaySeconds: {{ .liveness.initialDelaySeconds }}
          periodSeconds: {{ .liveness.periodSeconds }}
          failureThreshold: {{ .liveness.failureThreshold }}
          successThreshold: {{ .liveness.successThreshold }}
        {{- end }}
        {{- if .readiness }}
        readinessProbe:
          httpGet:
            path: {{ .readiness.path }}
            port: {{ .readiness.port }}
            {{- if .readiness.scheme }}
            scheme: {{ .readiness.scheme }}
            {{- end }}
          initialDelaySeconds: {{ .readiness.initialDelaySeconds }}
          periodSeconds: {{ .readiness.periodSeconds }}
          failureThreshold: {{ .readiness.failureThreshold }}
          successThreshold: {{ .readiness.successThreshold }}
        {{- end }}
        {{- if .lifecycle }}
        lifecycle:
          {{- if .lifecycle.postStart }}
          postStart:
            {{- if .lifecycle.postStart.exec }}
            exec:
              command:
                {{- range .lifecycle.postStart.exec.command }}
                - {{ . }}
                {{- end }}
            {{- end }}
            {{- if .lifecycle.postStart.httpGet }}
            httpGet:
              path: {{ .lifecycle.postStart.httpGet.path }}
              port: {{ .lifecycle.postStart.httpGet.port }}
              {{- if .lifecycle.postStart.httpGet.scheme }}
              scheme: {{ .lifecycle.postStart.httpGet.scheme }}
              {{- end }}
              {{- if .lifecycle.postStart.httpGet.host }}
              host: {{ .lifecycle.postStart.httpGet.host }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .lifecycle.preStop }}
          preStop:
            {{- if .lifecycle.preStop.exec }}
            exec:
              command:
                {{- range .lifecycle.preStop.exec.command }}
                - {{ . }}
                {{- end }}
            {{- end }}
            {{- if .lifecycle.preStop.httpGet }}
            httpGet:
              path: {{ .lifecycle.preStop.httpGet.path }}
              port: {{ .lifecycle.preStop.httpGet.port }}
              {{- if .lifecycle.preStop.httpGet.scheme }}
              scheme: {{ .lifecycle.preStop.httpGet.scheme }}
              {{- end }}
              {{- if .lifecycle.preStop.httpGet.host }}
              host: {{ .lifecycle.preStop.httpGet.host }}
              {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}
      {{- end }}      

  - path: templates/seldon-deployment.yaml
    template: false
    content: |
      apiVersion: {{ .Values.apiVersion }}
      kind: SeldonDeployment
      metadata:
        name: {{ .Values.deploymentName }}
        namespace: {{ .Values.namespace }}
        labels:
        {{- range $k, $v := .Values.metadata.labels }}
          {{ $k }}: {{ $v }}
        {{- end }}
        {{- if .Values.metadata.annotations }}
        annotations:
        {{- range $k, $v := .Values.metadata.annotations }}
          {{ $k }}: {{ $v }}
        {{- end }}
        {{- end }}
      spec:
        name: {{ .Values.deploymentName }}
        {{- if .Values.protocol }}
        protocol: {{ .Values.protocol }}
        {{- end }}
        {{- if .Values.transport }}
        transport: {{ .Values.transport }}
        {{- end }}
        {{- if .Values.specAnnotations }}
        annotations:
          {{- range $k, $v := .Values.specAnnotations }}
          {{ $k }}: {{ $v }}
          {{- end }}
        {{- end }}
        predictors:
        {{- range $name, $pred := .Values.predictors }}
          {{- with $pred }}
          - name: {{ .name }}
            {{- if .replicas }}
            replicas: {{ .replicas }}
            {{- end }}
            {{- if .traffic }}
            traffic: {{ .traffic }}
            {{- end }}
            {{- if .annotations }}
            annotations:
            {{- range $k, $v := .annotations }}
              {{ $k }}: {{ $v }}
            {{- end }}
            {{- end }}
            {{- if .engineResources }}
            engineResources:
              {{- if .engineResources.requests }}
              requests:
                {{- if .engineResources.requests.cpu }}
                cpu: {{ .engineResources.requests.cpu }}
                {{- end }}
                {{- if .engineResources.requests.memory }}
                memory: {{ .engineResources.requests.memory }}
                {{- end }}
              {{- end }}
              {{- if .engineResources.limits }}
              limits:
                {{- if .engineResources.limits.cpu }}
                cpu: {{ .engineResources.limits.cpu }}
                {{- end }}
                {{- if .engineResources.limits.memory }}
                memory: {{ .engineResources.limits.memory }}
                {{- end }}
              {{- end }}
            {{- end }}
            {{- if .labels }}
            labels:
              {{- range $k, $v := .labels }}
              {{ $k }}: {{ $v }}
              {{- end }}
            {{- end }}
            {{- if .shadow }}
            shadow: {{ .shadow }}
            {{- end }}
            {{- if .ssl }}
            ssl:
              certSecretName: {{ .ssl.certSecretName }}
            {{- end }}
            {{- if .progressDeadlineSeconds }}
            progressDeadlineSeconds: {{ .progressDeadlineSeconds }}
            {{- end }}
            {{- if .explainer }}
            explainer:
              {{- if .explainer.type }}
              type: {{ .explainer.type }}
              {{- end }}
              {{- if .explainer.modelUri }}
              modelUri: {{ .explainer.modelUri }}
              {{- end }}
              {{- if .explainer.serviceAccountName }}
              serviceAccountName: {{ .explainer.serviceAccountName }}
              {{- end }}
              {{- if .explainer.storageInitializerImage }}
              storageInitializerImage: {{ .explainer.storageInitializerImage }}
              {{- end }}
              {{- if .explainer.envSecretRefName }}
              envSecretRefName: {{ .explainer.envSecretRefName }}
              {{- end }}
              {{- if .explainer.initParameters }}
              initParameters: {{ .explainer.initParameters | quote }}
              {{- end }}
              {{- if .explainer.replicas }}
              replicas: {{ .explainer.replicas }}
              {{- end }}
              {{- if .explainer.endpoint }}
              endpoint:
                type: {{ .explainer.endpoint.type }}
              {{- end }}
              {{- if .explainer.config }}
              config:
                {{- range $k, $v := .explainer.config }}
                {{ $k }}: {{ $v }}
                {{- end }}
              {{- end }}
              {{- if .explainer.containerSpec }}
              containerSpec:
              {{- include "seldon.container-s" .explainer.containerSpec | indent 8 }}
              {{- end }}
            {{- end }}
            {{- if .svcOrchSpec }}
            svcOrchSpec:
              {{- if .svcOrchSpec.resources }}
              resources:
                {{- if .svcOrchSpec.resources.requests }}
                requests:
                  {{- if .svcOrchSpec.resources.requests.cpu }}
                  cpu: {{ .svcOrchSpec.resources.requests.cpu }}
                  {{- end }}
                  {{- if .svcOrchSpec.resources.requests.memory }}
                  memory: {{ .svcOrchSpec.resources.requests.memory }}
                  {{- end }}
                {{- end }}
                {{- if .svcOrchSpec.resources.limits }}
                limits:
                  {{- if .svcOrchSpec.resources.limits.cpu }}
                  cpu: {{ .svcOrchSpec.resources.limits.cpu }}
                  {{- end }}
                  {{- if .svcOrchSpec.resources.limits.memory }}
                  memory: {{ .svcOrchSpec.resources.limits.memory }}
                  {{- end }}
                {{- end }}
              {{- end }}
              {{- if .svcOrchSpec.env }}
              env:
                {{- range .svcOrchSpec.env }}
                - name: {{ .name }}
                  {{- if .value }}
                  value: {{ .value }}
                  {{- else if .valueFrom }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ .valueFrom.secretKeyRef.name }}
                      key: {{ .valueFrom.secretKeyRef.key }}
                  {{- end }}
                {{- end }}
              {{- end }}
            {{- end }}
            graph:
              {{- include "seldon.graph.node" .graph | indent 8 }}
            {{- if .componentSpec }}
            componentSpecs:
              {{- if .hpaSpec }}
              hpaSpec:
                minReplicas: {{ .hpaSpec.minReplicas }}
                maxReplicas: {{ .hpaSpec.maxReplicas }}
                metricsv2:
                  {{- range .hpaSpec.metricsv2 }}
                  - type: {{ .type }}
                    resource:
                      name: {{ .resource.name }}
                      target:
                        type: {{ .resource.target.type }}
                        averageUtilization: {{ .resource.target.averageUtilization }}
                  {{- end }}
              {{- end }}
              - spec:
                  {{- if .componentSpec.serviceAccountName }}
                  serviceAccountName: {{ .componentSpec.serviceAccountName }}
                  {{- end }}
                  {{- if .componentSpec.terminationGracePeriodSeconds }}
                  terminationGracePeriodSeconds: {{ .componentSpec.terminationGracePeriodSeconds }}
                  {{- end }}
                  {{- if .componentSpec.kedaSpec }}
                  kedaSpec:
                    {{- if .componentSpec.kedaSpec.minReplicaCount }}
                    minReplicaCount: {{ .componentSpec.kedaSpec.minReplicaCount }}
                    {{- end }}
                    {{- if .componentSpec.kedaSpec.maxReplicaCount }}
                    maxReplicaCount: {{ .componentSpec.kedaSpec.maxReplicaCount }}
                    {{- end }}
                    {{- if .componentSpec.kedaSpec.cooldownPeriod }}
                    cooldownPeriod: {{ .componentSpec.kedaSpec.cooldownPeriod }}
                    {{- end }}
                    {{- if .componentSpec.kedaSpec.pollingInterval }}
                    pollingInterval: {{ .componentSpec.kedaSpec.pollingInterval }}
                    {{- end }}
                    {{- if .componentSpec.kedaSpec.triggers }}
                    triggers:
                      {{- range .componentSpec.kedaSpec.triggers }}
                      - type: {{ .type }}
                        {{- if .metadata }}
                        metadata:
                          {{- range $k, $v := .metadata }}
                          {{ $k }}: {{ $v }}
                          {{- end }}
                        {{- end }}
                        {{- if .authenticationRef }}
                        authenticationRef:
                          name: {{ .authenticationRef.name }}
                        {{- end }}
                      {{- end }}
                    {{- end }}
                    {{- if .componentSpec.kedaSpec.advanced }}
                    advanced:
                      {{- if .componentSpec.kedaSpec.advanced.restoreToOriginalReplicaCount }}
                      restoreToOriginalReplicaCount: {{ .componentSpec.kedaSpec.advanced.restoreToOriginalReplicaCount }}
                      {{- end }}
                      {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig }}
                      horizontalPodAutoscalerConfig:
                        {{ .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .componentSpec.pdbSpec }}
                  pdbSpec:
                    {{- if .componentSpec.pdbSpec.minAvailable }}
                    minAvailable: {{ .componentSpec.pdbSpec.minAvailable }}
                    {{- end }}
                    {{- if .componentSpec.pdbSpec.maxUnavailable }}
                    maxUnavailable: {{ .componentSpec.pdbSpec.maxUnavailable }}
                    {{- end }}
                  {{- end }}
                  {{- if .componentSpec.containers }}      
                  containers:
                    {{- range $name, $cn := .componentSpec.containers }}
                    {{- with $cn }}
                    {{- include "seldon.container" . | indent 14 }}
                    {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .componentSpec.initContainers }}
                  initContainers:
                    {{- range $name, $icn := .componentSpec.initContainers }}
                    {{- with $icn }}
                    {{- include "seldon.container" . | indent 14 }}
                    {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .componentSpec.volumes }}
                  volumes:
                    {{- range $name, $vm := .componentSpec.volumes }}
                    {{- with $vm }}                    
                    - name: {{ .name }}
                      {{- if .emptyDir }}
                      emptyDir:
                        {{- if .emptyDir.medium }}
                        medium: {{ .emptyDir.medium }}
                        {{- end }}
                        {{- if .emptyDir.sizeLimit }}
                        sizeLimit: {{ .emptyDir.sizeLimit }}
                        {{- end }}
                      {{- else if .secret }}
                      secret:
                        secretName: {{ .secret.secretName }}
                      {{- end }}
                    {{- end }}
                    {{- end }}
                  {{- end }}
            {{- end }}
          {{- end }}    
        {{- end }}

  - path: .helmignore
    template: false
    content: |
      *.tgz
      .DS_Store
      .idea/
      *.swp
      __pycache__/
      .ipynb_checkpoints/

valuesSchema:
  environment:
    type: string
    description: Target environment (e.g., TEST, STAGING, PROD)
    required: true
  apiVersion:
    type: string
    description: Kubernetes API version for the SeldonDeployment resource (e.g., machinelearning.seldon.io/v1)
    required: true
  chart.name:
    type: string
    description: Name of the Helm chart
    required: true
  chart.version:
    type: string
    description: Version of the Helm chart
    required: true
  chart.description:
    type: string
    description: Short description of the chart's purpose
    required: true
  deploymentName:
    type: string
    description: Name of the SeldonDeployment resource
    required: true
  namespace:
    type: string
    description: Kubernetes namespace to deploy the resources in
    required: true
  subjectArea:
    type: string
    description: A tag to classify a subject area of the target chart.
    required: true
    default: batch-model-inference
  sourceMetafileName:
    type: string
    description: Source metafile name
    required: true
    default: no_data
  sourceMetafileRepo:
    type: string
    description: Source metafile name
    required: true
    default: no_data
  sourceMetafileBranch:
    type: string
    description: Source metafile name
    required: true
    default: no_data
  metadata.labels:
    type: object
    description: Key-value pairs used to categorize and select Kubernetes objects
    required: false
  metadata.annotations:
    type: object
    description: Annotations applied to the SeldonDeployment additional metadata for tooling, policies, and configuration
    required: false
  protocol:
    type: string
    description: Inference protocol to use. Allowed values- seldon, tensorflow, kafka, v2
    required: false
  transport:
    type: string
    description: Transport mechanism to use. Allowed values- rest, grpc
    required: false
  annotations:
    type: object
    description: Annotations added to the SeldonDeployment spec
    required: false
  specAnnotations:
    type: object
    description: Additional annotations applied under SeldonDeployment.spec
    required: false
  predictors:
    type: array
    description: List of predictors defining traffic-split and graph configurations
    required: true
  predictors[].name:
    type: string
    description: Unique name of the predictor
    required: true
  predictors[].replicas:
    type: integer
    description: Number of model replicas to deploy
    required: false
  predictors[].traffic:
    type: integer
    description: Percentage of traffic assigned to this predictor
    required: false
  predictors[].annotations:
    type: object
    description: Annotations applied to this predictor instance
    required: false
  predictors[].svcOrchSpec.resources.requests.cpu:
    type: string
    description: CPU requested by the service orchestrator container
    required: false
  predictors[].svcOrchSpec.resources.requests.memory:
    type: string
    description: Memory requested by the service orchestrator container
    required: false
  predictors[].svcOrchSpec.resources.limits.cpu:
    type: string
    description: Maximum CPU allowed for the service orchestrator
    required: false
  predictors[].svcOrchSpec.resources.limits.memory:
    type: string
    description: Maximum memory allowed for the service orchestrator
    required: false
  predictors[].svcOrchSpec.env:
    type: array
    description: Environment variables for the service orchestrator
    required: false
  predictors[].svcOrchSpec.env[].name:
    type: string
    description: Name of environment variable for orchestrator
    required: true
  predictors[].svcOrchSpec.env[].value:
    type: string
    description: Value of environment variable for orchestrator
    required: false
  predictors[].svcOrchSpec.env[].valueFrom.secretKeyRef.name:
    type: string
    description: Name of the Kubernetes secret to reference
    required: false
  predictors[].svcOrchSpec.env[].valueFrom.secretKeyRef.key:
    type: string
    description: Key inside the referenced secret
    required: false
  predictors[].graph.name:
    type: string
    description: Name of the root node in the prediction graph
    required: true
  predictors[].graph.type:
    type: string
    description: Type of the node. Allowed values- MODEL, TRANSFORMER, COMBINER, ROUTER, OUTPUT_TRANSFORMER, UNKNOWN_TYPE
    required: true
  predictors[].graph.implementation:
    type: string
    description: Predefined implementation for the model server. Allowed values- UNKNOWN_IMPLEMENTATION, SKLEARN_SERVER, XGBOOST_SERVER, TENSORFLOW_SERVER, PYTORCH_SERVER, LIGHTGBM_SERVER, CUSTOM, TRITON_SERVER, HUGGINGFACE_SERVER, MLFLOW_SERVER, ONNX_SERVER, R_SERVER
    required: false
  predictors[].graph.modelUri:
    type: string
    description: URI to the stored model (S3, GCS, local, etc.)
    required: false
  predictors[].graph.endpoint.type:
    type: string
    description: Type of endpoint exposed by the graph. Allowed values- REST, GRPC
    required: false
  predictors[].graph.envSecretRefName:
    type: string
    description: Name of secret to pull environment credentials from
    required: false
  predictors[].graph.logger.mode:
    type: string
    description: Logging mode. Allowed values- all, request, response, none
    required: false
  predictors[].graph.logger.url:
    type: string
    description: Optional URL to send logs to
    required: false
  predictors[].graph.parameters:
    type: array
    description: List of parameters for this graph node
    required: false
  predictors[].graph.parameters[].name:
    type: string
    description: Name of the parameter
    required: true
  predictors[].graph.parameters[].type:
    type: string
    description: Data type of the parameter. Allowed values- STRING, BOOL, INT, FLOAT, DOUBLE
    required: true
  predictors[].graph.parameters[].value:
    type: string
    description: Value of the parameter
    required: true
  predictors[].graph.children:
    type: array
    description: Child nodes in the prediction graph
    required: false
  predictors[].graph.methods:
    type: array
    description: List of inference methods supported by this graph node. Common values- predict, transform, route, aggregate, send_feedback, custom
    required: false
  predictors[].graph.serviceAccountName:
    type: string
    description: Kubernetes service account name to use for this graph node
    required: false
  predictors[].graph.storageInitializerImage:
    type: string
    description: Optional override image for storage initializer for this node
    required: false
  predictors[].componentSpec.serviceAccountName:
    type: string
    description: Kubernetes service account used by pods for access control
    required: false
  predictors[].componentSpec.terminationGracePeriodSeconds:
    type: integer
    description: Time (in seconds) for graceful shutdown
    required: false
  predictors[].componentSpec.containers:
    type: array
    description: Additional containers in the predictor pod
    required: false
  predictors[].componentSpec.containers[].name:
    type: string
    description: Name of the container in the pod
    required: true
  predictors[].componentSpec.containers[].image:
    type: string
    description: Docker image to use in the container
    required: true
  predictors[].componentSpec.containers[].imagePullPolicy:
    type: string
    description: Kubernetes image pull policy (Always, IfNotPresent, Never)
    required: false
  predictors[].componentSpec.containers[].args:
    type: array
    description: Command-line arguments passed to the container entrypoint
    required: false
  predictors[].componentSpec.containers[].env:
    type: array
    description: Environment variables for the container
    required: false
  predictors[].componentSpec.containers[].env[].name:
    type: string
    description: Name of the environment variable
    required: true
  predictors[].componentSpec.containers[].env[].value:
    type: string
    description: Value of the environment variable
    required: false
  predictors[].componentSpec.containers[].env[].valueFrom.secretKeyRef.name:
    type: string
    description: Name of the Kubernetes secret to reference
    required: false
  predictors[].componentSpec.containers[].env[].valueFrom.secretKeyRef.key:
    type: string
    description: Key inside the referenced secret
    required: false
  predictors[].componentSpec.containers[].envFrom:
    type: array
    description: List of sources to populate environment variables from (ConfigMaps or Secrets)
    required: false
  predictors[].componentSpec.containers[].envFrom[].secretRef.name:
    type: string
    description: Name of the Secret for env import
    required: false
  predictors[].componentSpec.containers[].envFrom[].configMapRef.name:
    type: string
    description: Name of the ConfigMap for env import
    required: false
  predictors[].componentSpec.containers[].volumeMounts:
    type: array
    description: Volume mounts for container
    required: false
  predictors[].componentSpec.containers[].volumeMounts[].name:
    type: string
    description: Name of the volume to mount
    required: true
  predictors[].componentSpec.containers[].volumeMounts[].mountPath:
    type: string
    description: Path in container where volume will be mounted
    required: true
  predictors[].componentSpec.containers[].volumeMounts[].readOnly:
    type: boolean
    description: Whether the volume mount should be read-only
    required: false
  predictors[].componentSpec.containers[].resources.requests.cpu:
    type: string
    description: Amount of CPU requested by the container (e.g. "200m")
    required: false
  predictors[].componentSpec.containers[].resources.requests.memory:
    type: string
    description: Amount of memory requested by the container (e.g. "256Mi")
    required: false
  predictors[].componentSpec.containers[].resources.limits.cpu:
    type: string
    description: Maximum amount of CPU allowed for the container
    required: false
  predictors[].componentSpec.containers[].resources.limits.memory:
    type: string
    description: Maximum amount of memory allowed for the container
    required: false
  predictors[].componentSpec.containers[].liveness.path:
    type: string
    description: HTTP path to access on the container to perform liveness check
    required: false
  predictors[].componentSpec.containers[].liveness.port:
    type: string
    description: Port to access for the liveness probe
    required: false
  predictors[].componentSpec.containers[].liveness.scheme:
    type: string
    description: Scheme to use for connecting to the host (HTTP or HTTPS)
    required: false
  predictors[].componentSpec.containers[].liveness.initialDelaySeconds:
    type: integer
    description: Number of seconds after the container has started before liveness probe is initiated
    required: false
  predictors[].componentSpec.containers[].liveness.periodSeconds:
    type: integer
    description: How often (in seconds) to perform the liveness probe
    required: false
  predictors[].componentSpec.containers[].liveness.failureThreshold:
    type: integer
    description: Number of times the liveness probe can fail before the container is restarted
    required: false
  predictors[].componentSpec.containers[].liveness.successThreshold:
    type: integer
    description: Minimum consecutive successes for the liveness probe to be considered successful
    required: false
  predictors[].componentSpec.containers[].readiness.path:
    type: string
    description: HTTP path to access on the container to perform readiness check
    required: false
  predictors[].componentSpec.containers[].readiness.port:
    type: string
    description: Port to access for the readiness probe
    required: false
  predictors[].componentSpec.containers[].readiness.scheme:
    type: string
    description: Scheme to use for connecting to the host (HTTP or HTTPS)
    required: false
  predictors[].componentSpec.containers[].readiness.initialDelaySeconds:
    type: integer
    description: Number of seconds after the container has started before readiness probe is initiated
    required: false
  predictors[].componentSpec.containers[].readiness.periodSeconds:
    type: integer
    description: How often (in seconds) to perform the readiness probe
    required: false
  predictors[].componentSpec.containers[].readiness.failureThreshold:
    type: integer
    description: Number of times the readiness probe can fail before the container is marked unhealthy
    required: false
  predictors[].componentSpec.containers[].readiness.successThreshold:
    type: integer
    description: Minimum consecutive successes for the readiness probe to be considered successful
    required: false
  predictors[].componentSpec.containers[].lifecycle:
    type: object
    description: Lifecycle hooks for the container (preStop and postStart)
    required: false
  predictors[].componentSpec.containers[].lifecycle.preStop.exec.command:
    type: array
    description: Command to run in preStop lifecycle hook (exec)
    required: false
  predictors[].componentSpec.containers[].lifecycle.preStop.httpGet.path:
    type: string
    description: HTTP path to access on the server for preStop hook
    required: false
  predictors[].componentSpec.containers[].lifecycle.preStop.httpGet.port:
    type: string
    description: Port to access on the server for preStop hook
    required: false
  predictors[].componentSpec.containers[].lifecycle.postStart.exec.command:
    type: array
    description: Command to run in postStart lifecycle hook (exec)
    required: false
  predictors[].componentSpec.containers[].lifecycle.postStart.httpGet.path:
    type: string
    description: HTTP path to access on the server for postStart hook
    required: false
  predictors[].componentSpec.containers[].lifecycle.postStart.httpGet.port:
    type: string
    description: Port to access on the server for postStart hook
    required: false
  predictors[].componentSpec.volumes:
    type: array
    description: Volumes used by the predictor
    required: false
  predictors[].componentSpec.volumes[].name:
    type: string
    description: Name of the volume
    required: true
  predictors[].componentSpec.volumes[].secret.secretName:
    type: string
    description: Kubernetes secret name to mount as volume
    required: false
  predictors[].componentSpec.volumes[].emptyDir.medium:
    type: string
    description: Storage medium type for the EmptyDir volume. Allowed values- "" (default), "Memory"
    required: false
  predictors[].componentSpec.volumes[].emptyDir.sizeLimit:
    type: string
    description: Total storage size limit for the EmptyDir volume (e.g., "2Gi")
    required: false
  predictors[].componentSpec.initContainers:
    type: array
    description: Init containers to run before main containers
    required: false
  predictors[].componentSpec.initContainers[].name:
    type: string
    description: Name of the init container
    required: true
  predictors[].componentSpec.initContainers[].image:
    type: string
    description: Image of the init container
    required: true
  predictors[].componentSpec.initContainers[].imagePullPolicy:
    type: string
    description: Policy for pulling init container image
    required: false
  predictors[].componentSpec.initContainers[].args:
    type: array
    description: Arguments passed to init container on start
    required: false
  predictors[].componentSpec.initContainers[].env:
    type: array
    description: Environment variables for the init container
    required: false
  predictors[].componentSpec.initContainers[].env[].name:
    type: string
    description: Name of the environment variable
    required: true
  predictors[].componentSpec.initContainers[].env[].value:
    type: string
    description: Value of the environment variable
    required: false
  predictors[].componentSpec.initContainers[].env[].valueFrom.secretKeyRef.name:
    type: string
    description: Name of the Kubernetes secret for env valueFrom
    required: false
  predictors[].componentSpec.initContainers[].env[].valueFrom.secretKeyRef.key:
    type: string
    description: Key within the Kubernetes secret for env valueFrom
    required: false
  predictors[].componentSpec.initContainers[].envFrom:
    type: array
    description: List of sources to populate environment variables from (ConfigMaps or Secrets)
    required: false
  predictors[].componentSpec.initContainers[].envFrom[].secretRef.name:
    type: string
    description: Name of the Secret for env import
    required: false
  predictors[].componentSpec.initContainers[].envFrom[].configMapRef.name:
    type: string
    description: Name of the ConfigMap for env import
    required: false
  predictors[].componentSpec.initContainers[].volumeMounts:
    type: array
    description: Volume mounts for the init container
    required: false
  predictors[].componentSpec.initContainers[].volumeMounts[].name:
    type: string
    description: Volume name to mount into init container
    required: true
  predictors[].componentSpec.initContainers[].volumeMounts[].mountPath:
    type: string
    description: Path inside init container to mount the volume
    required: true
  predictors[].componentSpec.initContainers[].volumeMounts[].readOnly:
    type: boolean
    description: Whether the mount is read-only
    required: false
  predictors[].componentSpec.initContainers[].resources.requests.cpu:
    type: string
    description: Amount of CPU requested by the init container
    required: false
  predictors[].componentSpec.initContainers[].resources.requests.memory:
    type: string
    description: Amount of memory requested by the init container
    required: false
  predictors[].componentSpec.initContainers[].resources.limits.cpu:
    type: string
    description: Maximum amount of CPU allowed for the init container
    required: false
  predictors[].componentSpec.initContainers[].resources.limits.memory:
    type: string
    description: Maximum amount of memory allowed for the init container
    required: false
  predictors[].componentSpec.initContainers[].liveness.path:
    type: string
    description: HTTP path to access on the container to perform liveness check
    required: false
  predictors[].componentSpec.initContainers[].liveness.port:
    type: string
    description: Port to access for the liveness probe
    required: false
  predictors[].componentSpec.initContainers[].liveness.scheme:
    type: string
    description: Scheme to use for connecting to the host (HTTP or HTTPS)
    required: false
  predictors[].componentSpec.initContainers[].liveness.initialDelaySeconds:
    type: integer
    description: Number of seconds after the container has started before liveness probe is initiated
    required: false
  predictors[].componentSpec.initContainers[].liveness.periodSeconds:
    type: integer
    description: How often (in seconds) to perform the liveness probe
    required: false
  predictors[].componentSpec.initContainers[].liveness.failureThreshold:
    type: integer
    description: Number of times the liveness probe can fail before the container is restarted
    required: false
  predictors[].componentSpec.initContainers[].liveness.successThreshold:
    type: integer
    description: Minimum consecutive successes for the liveness probe to be considered successful
    required: false
  predictors[].componentSpec.initContainers[].readiness.path:
    type: string
    description: HTTP path to access on the container to perform readiness check
    required: false
  predictors[].componentSpec.initContainers[].readiness.port:
    type: string
    description: Port to access for the readiness probe
    required: false
  predictors[].componentSpec.initContainers[].readiness.scheme:
    type: string
    description: Scheme to use for connecting to the host (HTTP or HTTPS)
    required: false
  predictors[].componentSpec.initContainers[].readiness.initialDelaySeconds:
    type: integer
    description: Number of seconds after the container has started before readiness probe is initiated
    required: false
  predictors[].componentSpec.initContainers[].readiness.periodSeconds:
    type: integer
    description: How often (in seconds) to perform the readiness probe
    required: false
  predictors[].componentSpec.initContainers[].readiness.failureThreshold:
    type: integer
    description: Number of times the readiness probe can fail before the container is marked unhealthy
    required: false
  predictors[].componentSpec.initContainers[].readiness.successThreshold:
    type: integer
    description: Minimum consecutive successes for the readiness probe to be considered successful
    required: false
  predictors[].componentSpec.initContainers[].lifecycle:
    type: object
    description: Lifecycle hooks for the init container
    required: false
  predictors[].componentSpec.initContainers[].lifecycle.preStop.exec.command:
    type: array
    description: Command to run in preStop lifecycle hook (exec)
    required: false
  predictors[].componentSpec.initContainers[].lifecycle.postStart.exec.command:
    type: array
    description: Command to run in postStart lifecycle hook (exec)
    required: false
  predictors[].componentSpec.initContainers[].lifecycle.preStop.httpGet.path:
    type: string
    description: HTTP path to access on the server for preStop hook
    required: false
  predictors[].componentSpec.initContainers[].lifecycle.preStop.httpGet.port:
    type: string
    description: Port to access on the server for preStop hook
    required: false
  predictors[].componentSpec.initContainers[].lifecycle.postStart.httpGet.path:
    type: string
    description: HTTP path to access on the server for postStart hook
    required: false
  predictors[].componentSpec.initContainers[].lifecycle.postStart.httpGet.port:
    type: string
    description: Port to access on the server for postStart hook
    required: false
  predictors[].componentSpec.hpaSpec:
    type: object
    description: Horizontal Pod Autoscaler configuration for the predictor
    required: false
  predictors[].componentSpec.hpaSpec.minReplicas:
    type: integer
    description: Minimum number of replicas allowed
    required: true
  predictors[].componentSpec.hpaSpec.maxReplicas:
    type: integer
    description: Maximum number of replicas allowed
    required: true
  predictors[].componentSpec.hpaSpec.metricsV2:
    type: array
    description: List of custom metrics for autoscaling
    required: false
  predictors[].componentSpec.hpaSpec.metricsV2[].type:
    type: string
    description: Type of metric (e.g., Resource)
    required: true
  predictors[].componentSpec.hpaSpec.metricsV2[].resource.name:
    type: string
    description: Resource name for autoscaling (e.g., cpu)
    required: true
  predictors[].componentSpec.hpaSpec.metricsV2[].resource.target.type:
    type: string
    description: Type of target (e.g., Utilization)
    required: true
  predictors[].componentSpec.hpaSpec.metricsV2[].resource.target.averageUtilization:
    type: integer
    description: Target average utilization percentage
    required: false
  predictors[].componentSpec.kedaSpec.minReplicaCount:
    type: integer
    description: Minimum number of replicas to scale down to with KEDA
    required: false
  predictors[].componentSpec.kedaSpec.maxReplicaCount:
    type: integer
    description: Maximum number of replicas to scale up to with KEDA
    required: false
  predictors[].componentSpec.kedaSpec.cooldownPeriod:
    type: integer
    description: Number of seconds to wait before scaling down
    required: false
  predictors[].componentSpec.kedaSpec.pollingInterval:
    type: integer
    description: Interval in seconds to check for scaling metrics
    required: false
  predictors[].componentSpec.kedaSpec.triggers:
    type: array
    description: List of KEDA triggers to define scaling behavior
    required: false
  predictors[].componentSpec.kedaSpec.triggers[].type:
    type: string
    description: Type of KEDA trigger (e.g. cpu, kafka, prometheus)
    required: true
  predictors[].componentSpec.kedaSpec.triggers[].metadata:
    type: object
    description: Key-value map with trigger-specific metadata
    required: false
  predictors[].componentSpec.kedaSpec.triggers[].authenticationRef.name:
    type: string
    description: Name of the KEDA authentication reference to use
    required: false
  predictors[].componentSpec.kedaSpec.advanced.restoreToOriginalReplicaCount:
    type: boolean
    description: Restore to the original replica count after scaling is no longer needed
    required: false
  predictors[].componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig:
    type: object
    description: HPA behavior configuration as a key-value map
    required: false
  predictors[].componentSpec.pdbSpec.minAvailable:
    type: string
    description: Minimum number or percentage of pods that must be available during disruptions
    required: false
  predictors[].componentSpec.pdbSpec.maxUnavailable:
    type: string
    description: Maximum number or percentage of pods that may be unavailable during disruptions
    required: false
  predictors[].engineResources.requests.cpu:
    type: string
    description: CPU requested for the Seldon engine sidecar
    required: false
  predictors[].engineResources.requests.memory:
    type: string
    description: Memory requested for the Seldon engine sidecar
    required: false
  predictors[].engineResources.limits.cpu:
    type: string
    description: Maximum CPU allowed for the Seldon engine sidecar
    required: false
  predictors[].engineResources.limits.memory:
    type: string
    description: Maximum memory allowed for the Seldon engine sidecar
    required: false
  predictors[].labels:
    type: object
    description: Custom labels applied to the predictor deployment
    required: false
  predictors[].shadow:
    type: boolean
    description: If true, all traffic is shadowed to this predictor without impacting the response
    required: false
  predictors[].ssl.certSecretName:
    type: string
    description: SSL certificate secret name for this predictor
    required: false
  predictors[].progressDeadlineSeconds:
    type: integer
    description: Time in seconds the deployment controller should wait before marking the predictor as failed
    required: false
  predictors[].explainer.type:
    type: string
    description: The type of explainer used to interpret model predictions. Allowed values- anchor_tabular, anchor_text, anchor_image, kernel_shap, tree_shap, integrated_gradients, contrastive, cfproto, counterfactual, alibi, custom
    required: false
  predictors[].explainer.modelUri:
    type: string
    description: URI pointing to the explainer model location
    required: false
  predictors[].explainer.config:
    type: object
    description: Key-value configuration settings passed to the explainer
    required: false
  predictors[].explainer.endpoint.type:
    type: string
    description: Type of the endpoint protocol. Allowed values- REST, GRPC
    required: false
  predictors[].explainer.envSecretRefName:
    type: string
    description: Name of the secret containing environment variables for the explainer
    required: false
  predictors[].explainer.storageInitializerImage:
    type: string
    description: Custom image to use for the explainer's storage initializer
    required: false
  predictors[].explainer.replicas:
    type: integer
    description: Number of replicas to run for the explainer deployment
    required: false
  predictors[].explainer.initParameters:
    type: string
    description: JSON-formatted string with initialization parameters for the explainer
    required: false
  predictors[].explainer.serviceAccountName:
    type: string
    description: Service account name to run the explainer under
    required: false
  predictors[].explainer.containerSpec.name:
    type: string
    description: Name of the explainer container
    required: false
  predictors[].explainer.containerSpec.image:
    type: string
    description: Container image for the explainer
    required: false
  predictors[].explainer.containerSpec.args:
    type: array
    description: Command-line arguments passed to the explainer container
    required: false
  predictors[].explainer.containerSpec.imagePullPolicy:
    type: string
    description: Policy for pulling explainer container image
    required: false
