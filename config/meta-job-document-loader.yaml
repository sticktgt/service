chart:
  name: cron-job-readservice
  version: 1.0.0
  description: A Helm chart for Kubernetes CronJob for ReadService

files:
  - path: Chart.yaml
    template: true
    content: |
      apiVersion: v2
      name: {{ .Values.chart.name }}
      version: {{ .Values.chart.version }}
      description: {{ .Values.chart.description }}
      type: application
      app.dognauts:
        subjectArea: {{ .Values.subjectArea }}
        sourceMetafileRepo: {{ .Values.sourceMetafileRepo }}
        sourceMetafileBranch: {{ .Values.sourceMetafileBranch }}
        sourceMetafileName: {{ .Values.sourceMetafileName }}
      annotations:
        app.dognauts/platform-generated: true
        app.dognauts/subjectArea: {{ .Values.subjectArea }}

  - path: values.yaml
    template: true
    content: |
      subjectArea: {{ .Values.subjectArea }}
      {{- if .Values.metadata }}
      metadata:
        {{- if .Values.metadata.labels }}
        labels:
          {{- range $k, $v := .Values.metadata.labels }}
          {{ $k }}: {{ $v }}
          {{- end }}
        {{- end }}
        {{- if .Values.metadata.annotations }}
        annotations:
          {{- range $k, $v := .Values.metadata.annotations }}
          {{ $k }}: {{ $v }}
          {{- end }}
        {{- end }}
      {{- end }}
      command: {{ .Values.command }}
      args: {{ .Values.args }}
      {{- if .Values.code.env }}
      env:
      {{- range $k1, $v1 := .Values.code.env }}
        {{ $k1 }}:
        {{- if eq (printf "%T" $v1) "map[string]interface {}" }}
          {{- range $k2, $v2 := $v1 }}
            {{- if eq (printf "%T" $v2) "map[string]interface {}" }}
              {{- if eq (printf "%T" (index $v2 "value")) "string" }}
          {{ $k2 }}:
            value: {{ index $v2 "value" }}
              {{- else if eq (printf "%T" (index $v2 "value")) "bool" }}
          {{ $k2 }}:
            value: {{ index $v2 "value" }}
              {{- else if eq (printf "%T" (index $v2 "valueFrom")) "map[string]interface {}" }}
          {{ $k2 }}:
            valueFrom:
              secretKeyRef:
                name: {{ index (index $v2 "valueFrom").secretKeyRef "name" }}
                key: {{ index (index $v2 "valueFrom").secretKeyRef "key" }}
              {{- else }}
          {{ $k2 }}:
                {{- range $k3, $v3 := $v2 }}
                  {{- if eq (printf "%T" $v3) "map[string]interface {}" }}
                    {{- if index $v3 "value" }}
            {{ $k3 }}:
              value: {{ index $v3 "value" }}
                    {{- else if index $v3 "valueFrom" }}
            {{ $k3 }}:
              valueFrom:
                secretKeyRef:
                  name: {{ index (index $v3 "valueFrom").secretKeyRef "name" }}
                  key: {{ index (index $v3 "valueFrom").secretKeyRef "key" }}
                    {{- else }}
            {{ $k3 }}: {{ $v3 }}
                    {{- end }}
                  {{- else }}
            {{ $k3 }}: {{ $v3 }}
                  {{- end }}
                {{- end }}
              {{- end }}
            {{- else }}
          {{ $k2 }}: {{ $v2 }}
            {{- end }}
          {{- end }}
        {{- else }}
          value: {{ $v1 }}
        {{- end }}
      {{- end }}
      {{- else }}
      # env: {}
      {{- end }}

  - path: values-ENV.yaml
    outputFilename: values-{{ .Values.environment }}.yaml
    template: true
    content: |
      {{- if .Values.namespace }}
      namespace: {{ .Values.namespace }}
      {{- end }}      
      image: {{ .Values.image }}
      {{- if .Values.pullPolicy }}
      pullPolicy: {{ .Values.pullPolicy }}
      {{- end }}
      schedule: "{{ .Values.schedule }}"
      {{- if .Values.concurrencyPolicy }}
      concurrencyPolicy: {{ .Values.concurrencyPolicy }}
      {{- end }}
      {{- if .Values.successfulJobsHistoryLimit }}
      successfulJobsHistoryLimit: {{ .Values.successfulJobsHistoryLimit }}
      {{- end }}
      {{- if .Values.failedJobsHistoryLimit }}
      failedJobsHistoryLimit: {{ .Values.failedJobsHistoryLimit }}
      {{- end }}
      {{- if .Values.restartPolicy }}
      restartPolicy: {{ .Values.restartPolicy }}
      {{- end }}
      {{- if .Values.backoffLimit }}
      backoffLimit: {{ .Values.backoffLimit }}
      {{- end }}
      {{- if .Values.startingDeadlineSeconds }}
      startingDeadlineSeconds: {{ .Values.startingDeadlineSeconds }}
      {{- end }}
      {{- if .Values.deploy.env }}
      env:
      {{- range $k1, $v1 := .Values.deploy.env }}
        {{ $k1 }}:
        {{- if eq (printf "%T" $v1) "map[string]interface {}" }}
          {{- range $k2, $v2 := $v1 }}
            {{- if eq (printf "%T" $v2) "map[string]interface {}" }}
              {{- if eq (printf "%T" (index $v2 "value")) "string" }}
          {{ $k2 }}:
            value: {{ index $v2 "value" }}
              {{- else if eq (printf "%T" (index $v2 "value")) "bool" }}
          {{ $k2 }}:
            value: {{ index $v2 "value" }}
              {{- else if eq (printf "%T" (index $v2 "valueFrom")) "map[string]interface {}" }}
          {{ $k2 }}:
            valueFrom:
              secretKeyRef:
                name: {{ index (index $v2 "valueFrom").secretKeyRef "name" }}
                key: {{ index (index $v2 "valueFrom").secretKeyRef "key" }}
              {{- else }}
          {{ $k2 }}:
                {{- range $k3, $v3 := $v2 }}
                  {{- if eq (printf "%T" $v3) "map[string]interface {}" }}
                    {{- if index $v3 "value" }}
            {{ $k3 }}:
              value: {{ index $v3 "value" }}
                    {{- else if index $v3 "valueFrom" }}
            {{ $k3 }}:
              valueFrom:
                secretKeyRef:
                  name: {{ index (index $v3 "valueFrom").secretKeyRef "name" }}
                  key: {{ index (index $v3 "valueFrom").secretKeyRef "key" }}
                    {{- else }}
            {{ $k3 }}: {{ $v3 }}
                    {{- end }}
                  {{- else }}
            {{ $k3 }}: {{ $v3 }}
                  {{- end }}
                {{- end }}
              {{- end }}
            {{- else }}
          {{ $k2 }}: {{ $v2 }}
            {{- end }}
          {{- end }}
        {{- else }}
          value: {{ $v1 }}
        {{- end }}
      {{- end }}
      {{- else }}
      # env: {}
      {{- end }}
      {{- if .Values.volumeMounts }}
      volumeMounts:
        {{- range .Values.volumeMounts }}
         - name: {{ .name }}
           mountPath: {{ .mountPath }}
           {{- if .readOnly }}
           readOnly: {{ .readOnly }}
           {{- end }}
        {{- end }}
      {{- end }}
      {{- if .Values.volumes }}
      volumes:
        {{- range .Values.volumes }}
        - name: {{ .name }}
          {{- if .emptyDir }}
          emptyDir:
            {{- if .emptyDir.medium }}
            medium: {{ .emptyDir.medium }}
            {{- end }}
            {{- if .emptyDir.sizeLimit }}
            sizeLimit: {{ .emptyDir.sizeLimit }}
            {{- end }}
          {{- end }}
          {{- if .hostPath }}
          hostPath:
            path: {{ .hostPath.path }}
            {{- if .hostPath.type }}
            type: {{ .hostPath.type }}
            {{- end }}
          {{- end }}
        {{- end }}
      {{- end }}

  - path: templates/cronjob.yaml
    template: false
    content: |
      apiVersion: batch/v1
      kind: CronJob
      metadata:
        name: {{ .Release.Name }}-inference
        namespace: {{ .Values.namespace }}
        labels:
          {{- include "common.helm-labels" . | nindent 4 }}
        {{- if .Values.metadata }}
        {{- if .Values.metadata.labels }}
        {{- range $k, $v :=.Values.metadata.labels }}
          {{ $k }}: {{ $v }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .labels }}
        {{- range $k, $v :=.labels }}
          {{ $k }}: {{ $v }}
        {{- end }}
        {{- end }}
        {{- if or (and .Values.metadata .Values.metadata.annotations) .annotations }}
        annotations:
        {{- end }}
        {{- if .Values.metadata }}
        {{- if .Values.metadata.annotations }}
        {{- range $k, $v := .Values.metadata.annotations }}
          {{ $k }}: {{ $v }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .annotations }}
        {{- range $k, $v := .annotations }}
          {{ $k }}: {{ $v }}
        {{- end }}
        {{- end }}
      spec:
        schedule: "{{ .Values.schedule }}"
        {{- if .Values.concurrencyPolicy }}
        concurrencyPolicy: {{ .Values.concurrencyPolicy }}
        {{- end }}
        {{- if .Values.successfulJobsHistoryLimit }}
        successfulJobsHistoryLimit: {{ .Values.successfulJobsHistoryLimit }}
        {{- end }}
        {{- if .Values.failedJobsHistoryLimit }}
        failedJobsHistoryLimit: {{ .Values.failedJobsHistoryLimit }}
        {{- end }}
        {{- if .Values.startingDeadlineSeconds }}
        startingDeadlineSeconds: {{ .Values.startingDeadlineSeconds }}
        {{- end }}
        jobTemplate:
          spec:
            {{- if .Values.backoffLimit }}
            backoffLimit: {{ .Values.backoffLimit }}
            {{- end }}
            template:
              spec:
                containers:
                  - name: readservice
                    image: "{{ .Values.image }}"
                    {{- if .Values.pullPolicy }}
                    imagePullPolicy: {{ .Values.pullPolicy }}
                    {{- end }}
                    command: ["/bin/bash"]
                    args: ["-c", "python -m readservice.main"]
                    env:
                      {{ "\n" | trim }}{{ include "readservice.flattenEnv" .Values.env | indent 16 | trim }}
                    {{- if .Values.volumeMounts }}
                    volumeMounts:
                    {{- range .Values.volumeMounts }}
                     - name: {{ .name }}
                       mountPath: {{ .mountPath }}
                       {{- if .readOnly }}
                       readOnly: {{ .readOnly }}
                       {{- end }}
                    {{- end }}
                    {{- end }}
                {{- if .Values.restartPolicy }}
                restartPolicy: {{ .Values.restartPolicy }}
                {{- end }}
                {{- if .Values.volumes }}
                volumes:
                  {{- range .Values.volumes }}
                  - name: {{ .name }}
                    {{- if .emptyDir }}
                    emptyDir:
                      {{- if .emptyDir.medium }}
                      medium: {{ .emptyDir.medium }}
                      {{- end }}
                      {{- if .emptyDir.sizeLimit }}
                      sizeLimit: {{ .emptyDir.sizeLimit }}
                      {{- end }}
                    {{- end }}
                    {{- if .hostPath }}
                    hostPath:
                      path: {{ .hostPath.path }}
                      {{- if .hostPath.type }}
                      type: {{ .hostPath.type }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                {{- end }}

  - path: templates/_helpers.tpl
    template: false
    content: |
      {{- define "common.helm-labels" -}}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/revision: {{ .Release.Revision | quote }}
      app.dognauts/subjectArea: {{ .Values.subjectArea }}
      {{- end -}}
      {{- define "readservice.flattenEnv" -}}
      {{- range $k, $v := . }}
      {{- include "readservice.flattenEnvItem" (dict "prefix" (upper $k) "value" $v) }}
      {{- end }}
      {{- end }}
      
      {{- define "readservice.flattenEnvItem" -}}
      {{- $prefix := .prefix }}
      {{- $value := .value }}
      
      {{- if and (kindIs "map" $value) (or (hasKey $value "value") (hasKey $value "valueFrom")) }}
      - name: RS__{{ $prefix }}
      {{- if hasKey $value "value" }}
        value: {{ $value.value | quote }}
      {{- else if hasKey $value "valueFrom" }}
        valueFrom:
          secretKeyRef:
            name: {{ $value.valueFrom.secretKeyRef.name }}
            key: {{ $value.valueFrom.secretKeyRef.key }}
      {{- end }}
      {{- else if kindIs "map" $value }}
      {{- range $k, $v := $value }}
      {{- include "readservice.flattenEnvItem" (dict "prefix" (printf "%s__%s" $prefix (upper $k)) "value" $v) }}
      {{- end }}
      {{- end }}
      {{- end }}

  - path: .helmignore
    template: false
    content: |
      *.tgz
      .DS_Store
      .idea/
      *.swp
      __pycache__/
      .ipynb_checkpoints/

valuesSchema:
  chart.name:
    type: string
    description: Name of the Helm chart
    required: true
  chart.version:
    type: string
    description: Version of the Helm chart
    required: true
  chart.description:
    type: string
    description: Short description of the chart's purpose
    required: true
  namespace:
    type: string
    description: Kubernetes namespace to deploy the resources in
    required: true
  subjectArea:
    type: string
    description: A tag to classify a subject area of the target chart.
    required: true
    default: cron-job-readservice
  sourceMetafileName:
    type: string
    description: Source metafile name
    required: true
    default: no_data
  sourceMetafileRepo:
    type: string
    description: Source metafile name
    required: true
    default: no_data
  sourceMetafileBranch:
    type: string
    description: Source metafile name
    required: true
    default: no_data
  metadata.labels:
    type: map
    description: Key-value pairs used to categorize and select Kubernetes objects
    required: false
  metadata.annotations:
    type: list
    description: Annotations applied to the SeldonDeployment additional metadata for tooling, policies, and configuration
    required: false
  image:
    type: string
    description: docker image name
    required: true
  pullPolicy:
    type: string
    description: docker image pullPolicy
    required: false
    default: IfNotPresent
  schedule:
    type: string
    description: schedule for the cron job in cron format
    required: true
    default: "*/5 * * * *"
  concurrencyPolicy:
    type: string
    description: job concurrency policy
    required: false
    default: Forbid
  successfulJobsHistoryLimit:
    type: integer
    description: successful jobs history limit
    required: false
    default: 1
  failedJobsHistoryLimit:
    type: integer
    description: failed jobs history limit
    required: false
    default: 1
  restartPolicy:
    type: string
    description: job restart policy
    required: false
    default: OnFailure
  startingDeadlineSeconds:
    type: integer
    description: job starting deadline in seconds
    required: false
    default: 30
  volumeMounts:
    type: list
    description: volume mounts for the job
    required: false
  volumeMounts.name:
    type: string
    description: Name of the volume mount
    required: true
  volumeMounts.mountPath:
    type: string
    description: Path where the volume is mounted in the container
    required: true
  volumeMounts.readOnly:
    type: boolean
    description: Whether the volume mount is read-only
    required: false
  volumes:
    type: list
    description: volumes for the job
    required: false
  volumes.name:
    type: string
    description: Name of the volume
    required: true
  volumes.emptyDir:
    type: map
    description: Empty directory volume configuration
    required: false
  volumes.emptyDir.medium:
    type: string
    description: Medium type for the empty directory (e.g., "Memory")
    required: false
  volumes.emptyDir.sizeLimit:
    type: string
    description: Size limit for the empty directory
    required: false
  volumes.hostPath:
    type: map
    description: Host path volume configuration
    required: false
  volumes.hostPath.path:
    type: string
    description: Path on the host machine
    required: true
  volumes.hostPath.type:
    type: string
    description: Type of the host path (e.g., "Directory", "File")
    required: false
  backoffLimit:
    type: integer
    description: Number of retries before marking the job as failed
    required: false
    default: 1
  command:
    type: string
    description: command to run in the container
    required: true
  args:
    type: string
    description: arguments to pass to the command
    required: true
  code.env:
    type: map
    description: job environment variables for all environments
    required: true
  code.env.splitters:
    type: map
    description: list of text splitters to use for document processing
    required: false
  code.env.splitters.RecursiveCharacterTextSplitter:
    type: map
    description: RecursiveCharacterTextSplitter configuration
    required: false
  code.env.splitters.RecursiveCharacterTextSplitter.chunk_size:
    type: integer
    description: Size of each chunk in characters
    required: false
  code.env.splitters.RecursiveCharacterTextSplitter.chunk_overlap:
    type: integer
    description: Number of overlapping characters between chunks
    required: false
  code.env.splitters.RecursiveCharacterTextSplitter.separators:
    type: string
    description: Separators used to split the text into chunks
    required: false
  code.env.splitters.RecursiveCharacterTextSplitter.keep_separator:
    type: boolean
    description: Whether to keep the separator in the chunks
    required: false
  code.env.splitters.TokenTextSplitter:
    type: map
    description: TokenTextSplitter configuration
    required: false
  code.env.splitters.TokenTextSplitter.chunk_size:
    type: integer
    description: Size of each chunk in tokens
    required: false
  code.env.splitters.TokenTextSplitter.chunk_overlap:
    type: integer
    description: Number of overlapping tokens between chunks
    required: false
  code.env.splitters.TokenTextSplitter.encoding_name:
    type: string
    description: Encoding name for the text splitter (e.g., "cl100k_base")
    required: false
  code.env.splitters.TokenTextSplitter.model_name:
    type: string
    description: Model name for the text splitter (e.g., "gpt-3.5-turbo")
    required: false
  code.env.splitters.NLTKTextSplitter:
    type: map
    description: NLTKTextSplitter configuration
    required: false
  code.env.splitters.NLTKTextSplitter.chunk_size:
    type: integer
    description: Size of each chunk in characters
    required: false
  code.env.splitters.NLTKTextSplitter.chunk_overlap:
    type: integer
    description: Number of overlapping characters between chunks
    required: false
  code.env.splitters.NLTKTextSplitter.language:
    type: string
    description: Language used for tokenization (e.g., "english")
    required: false
  code.env.splitters.SpacyTextSplitter:
    type: map
    description: SpacyTextSplitter configuration
    required: false
  code.env.splitters.SpacyTextSplitter.chunk_size:
    type: integer
    description: Size of each chunk in characters
    required: false
  code.env.splitters.SpacyTextSplitter.chunk_overlap:
    type: integer
    description: Number of overlapping characters between chunks
    required: false
  code.env.splitters.SpacyTextSplitter.pipeline:
    type: string
    description: Spacy pipeline to use for text splitting (e.g., "en_core_web_sm")
    required: false
  code.env.file_types:
    type: map
    description: File types and their associated loaders and splitters
    required: false
  code.env.file_types..txt:
    type: map
    description: .txt file type configuration
    required: false
  code.env.file_types..txt.loader:
    type: string
    description: loader for .txt files (e.g., "TextLoader")
    required: false
  code.env.file_types..txt.splitter:
    type: string
    description: Text splitter for .txt files (e.g., "RecursiveCharacterTextSplitter")
    required: false
  code.env.file_types..csv:
    type: map
    description: .csv file type configuration
    required: false
  code.env.file_types..csv.loader:
    type: string
    description: Loader for .csv files (e.g., "UnstructuredCSVLoader")
    required: false
  code.env.file_types..csv.splitter:
    type: string
    description: Text splitter for .csv files (e.g., "NLTKTextSplitter")
    required: false
  code.env.file_types..pdf:
    type: map
    description: .pdf file type configuration
    required: false
  code.env.file_types..pdf.loader:
    type: string
    description: Loader for .pdf files (e.g., "UnstructuredPDFLoader")
    required: false
  code.env.file_types..pdf.splitter:
    type: string
    description: Text splitter for .pdf files (e.g., "NLTKTextSplitter")
    required: false
  code.env.file_types..docx:
    type: map
    description: .docx file type configuration
    required: false
  code.env.file_types..docx.loader:
    type: string
    description: Loader for .docx files (e.g., "UnstructuredWordDocumentLoader")
    required: false
  code.env.file_types..docx.splitter:
    type: string
    description: Text splitter for .docx files (e.g., "NLTKTextSplitter")
    required: false
  code.env.file_types..xlsx:
    type: map
    description: .xlsx file type configuration
    required: false
  code.env.file_types..xlsx.loader:
    type: string
    description: Loader for .xlsx files (e.g., "UnstructuredExcelLoader")
    required: false
  code.env.file_types..xlsx.splitter:
    type: string
    description: Text splitter for .xlsx files (e.g., "NLTKTextSplitter")
    required: false
  code.env.file_types..html:
    type: map
    description: .html file type configuration
    required: false
  code.env.file_types..html.loader:
    type: string
    description: Loader for .html files (e.g., "UnstructuredHTMLLoader")
    required: false
  code.env.file_types..html.splitter:
    type: string
    description: Text splitter for .html files (e.g., "NLTKTextSplitter")
    required: false
  code.env.file_types..pptx:
    type: map
    description: .pptx file type configuration
    required: false
  code.env.file_types..pptx.loader:
    type: string
    description: Loader for .pptx files (e.g., "UnstructuredPowerPointLoader")
    required: false
  code.env.file_types..pptx.splitter:
    type: string
    description: Text splitter for .pptx files (e.g., "NLTKTextSplitter")
    required: false
  code.env.embedding:
    type: map
    description: Embedding configuration for document processing
    required: false
  code.env.embedding.provider:
    type: string
    description: Provider for the embedding service (e.g., "liteLLM", "yandexGPT")
    required: false
  code.env.embedding.dim:
    type: integer
    description: Dimension of the embedding vectors (fake value for testing)
    required: false
  code.env.embedding.liteLLM:
    type: map
    description: LiteLLM embedding configuration
    required: false
  code.env.embedding.liteLLM.model:
    type: string
    description: Model name for LiteLLM (e.g., "text-embedding-3-small")
    required: false
  code.env.embedding.yandexGPT:
    type: map
    description: YandexGPT embedding configuration
    required: false
  code.env.embedding.yandexGPT.doc_model_name:
    type: string
    description: Name of the document model for YandexGPT (e.g., "text-embedding-3-small")
    required: false
  code.env.embedding.yandexGPT.model_version:
    type: string
    description: Version of the model for YandexGPT (e.g., "v1")
    required: false
  code.env.embedding.yandexGPT.sleep_interval:
    type: string
    description: Sleep interval between requests to YandexGPT (e.g., "0.1")
    required: false
  code.env.embedding.yandexGPT.disable_request_logging:
    type: boolean
    description: Disable request logging for YandexGPT
    required: false
  code.env.sources:
    type: map
    description: Sources for document loading and processing
    required: false
  code.env.sources.use_local:
    type: boolean
    description: 
    required: false
  code.env.sources.use_s3:
    type: boolean
    description: Use S3 for document storage and processing
    required: false
  code.env.sources.local_path:
    type: string
    description: Local path for document storage
    required: false
  code.env.storage:
    type: map
    description: Storage configuration for document vectors
    required: false
  code.env.storage.store_type:
    type: string
    description: Type of storage to use for document vectors (e.g., "milvus", "pgvector")
    required: false
  code.env.output_dir:
    type: string
    description: Directory where processed documents and metadata will be stored
    required: false
  deploy.env:
    type: map
    description: job environment variables for the specific environment
    required: true
  deploy.env.embedding.liteLLM.api_base:
    type: string
    description: Base URL for the LiteLLM API (e.g., "http://
    required: false
  deploy.env.embedding.liteLLM.api_key:
    type: string
    description:  API key for LiteLLM authentication "yandexGPT"
    required: false
  deploy.env.embedding.liteLLM.folder_id:
    type: string
    description: Folder ID for LiteLLM (e.g., "default") "yandexGPT
    required: false
  deploy.env.embedding.yandexGPT.api_key:
    type: string
    description: API key for YandexGPT authentication
    required: false
  deploy.env.embedding.yandexGPT.folder_id:
    type: string
    description: Folder ID for YandexGPT (e.g., "default")
    required: false
  deploy.env.sources.s3:
    type: map
    description: S3 configuration for document storage
    required: false
  deploy.env.sources.s3.s3_bucket:
    type: string
    description: Name of the S3 bucket
    required: false
  deploy.env.sources.s3.s3_prefix:
    type: string
    description: Prefix for S3 objects
    required: false
  deploy.env.sources.s3.endpoint_url:
    type: string
    description: S3 endpoint URL (e.g., "http://localhost:9000")
    required: false
  deploy.env.sources.s3.aws_access_key_id:
    type: string
    description:  AWS access key ID for S3 authentication
    required: false
  deploy.env.sources.s3.aws_secret_access_key:
    type: string
    description: AWS secret access key for S3 authentication
    required: false
  deploy.env.sources.s3.use_ssl:
    type: boolean
    description: Whether to use SSL for S3 connections
    required: false
  deploy.env.sources.s3.signature_version:
    type: string
    description: Signature version for S3 requests (e.g., "s3v4")
    required: false
  deploy.env.storage.milvus:
    type: map
    description: Milvus storage configuration
    required: false
  deploy.env.storage.milvus.uri:
    type: string
    description: URI for the Milvus server (e.g., "tcp://localhost:19530")
    required: false
  deploy.env.storage.milvus.collection:
    type: string
    description: Name of the Milvus collection for document vectors
    required: false
  deploy.env.storage.milvus.drop_old:
    type: boolean
    description: Whether to drop the old collection if it exists
    required: false
  deploy.env.storage.milvus.auto_id:
    type: boolean
    description: Whether to use auto-generated IDs for Milvus documents
    required: false
  deploy.env.storage.milvus.alias:
    type: string
    description: Alias for the Milvus collection
    required: false
  deploy.env.storage.pgvector:
    type: map
    description: PostgreSQL vector storage configuration
    required: false
  deploy.env.storage.pgvector.host:
    type: string
    description: Hostname or IP address of the PostgreSQL server (e.g., "localhost")
    required: false
  deploy.env.storage.pgvector.port:
    type: integer
    description: Port number of the PostgreSQL server (e.g., 5432)
    required: false
  deploy.env.storage.pgvector.user:
    type: string
    description: Username for PostgreSQL authentication (e.g., "postgres")
    required: false
  deploy.env.storage.pgvector.password:
    type: string
    description: Password for PostgreSQL authentication (e.g., "password")
    required: false
  deploy.env.storage.pgvector.database:
    type: string
    description: Name of the PostgreSQL database to use (e.g., "documents")
    required: false
  deploy.env.storage.pgvector.collection:
    type: string
    description: Name of the PostgreSQL table for document vectors (e.g., "document_vectors")
    required: false
  deploy.env.storage.pgvector.use_jsonb:
    type: boolean
    description: Whether to use JSONB for storing document metadata in PostgreSQL
    required: false

setupValuesSchema: |
  ---
  {
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "properties": {
      "chart": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "version": { "type": "string" },
          "description": { "type": "string" }
        },
        "required": ["name", "version", "description"]
      },
      "subjectArea": { "type": "string" },
      "sourceMetafileRepo": { "type": "string", "format": "uri" },
      "sourceMetafileBranch": { "type": "string" },
      "sourceMetafileName": { "type": "string" },
      "namespace": { "type": "string" },
      "environment": { "type": "string" },
      "image": { "type": "string" },
      "command": { "type": "string" },
      "args": { "type": "string" },
      "schedule": { "type": "string" },
      "startingDeadlineSeconds": { "type": "integer" },
      "concurrencyPolicy": {
        "type": "string",
        "enum": ["Allow", "Forbid", "Replace"]
      },
      "successfulJobsHistoryLimit": { "type": "integer" },
      "failedJobsHistoryLimit": { "type": "integer" },
      "backoffLimit": { "type": "integer" },
      "deploymentName": { "type": "string" },
      "metadata": {
        "type": "object",
        "properties": {
          "labels": {
            "type": "object",
            "additionalProperties": { "type": "string" }
          }
        }
      },
      "volumeMounts": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": { "type": "string" },
            "mountPath": { "type": "string" }
          },
          "required": ["name", "mountPath"]
        }
      },
      "volumes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": { "type": "string" },
            "emptyDir": {
              "type": "object",
              "properties": {
                "medium": { "type": "string" },
                "sizeLimit": { "type": "string" }
              },
              "additionalProperties": false
            }
          },
          "required": ["name"]
        }
      },
      "deploy": {
        "type": "object",
        "properties": {
          "env": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": ["env"]
      },
      "code": {
        "type": "object",
        "properties": {
          "env": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": ["env"]
      }
    },
    "required": [
      "chart",
      "subjectArea",
      "sourceMetafileRepo",
      "sourceMetafileBranch",
      "sourceMetafileName",
      "namespace",
      "environment",
      "schedule",
      "image",
      "command",
      "args",
      "deploy",
      "code"
    ],
    "additionalProperties": false
  }
