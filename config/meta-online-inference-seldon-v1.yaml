chart:
  name: seldon-core-v1
  version: 1.0.0
  description: Seldon Core V1 Chart

files:
  - path: Chart.yaml
    template: true
    content: |
      apiVersion: v2
      name: {{ .Values.chart.name }}
      version: {{ .Values.chart.version }}
      description: {{ .Values.chart.description }}
      type: application
      app.dognauts:
        subjectArea: {{ .Values.subjectArea }}
        sourceMetafileRepo: {{ .Values.sourceMetafileRepo }}
        sourceMetafileBranch: {{ .Values.sourceMetafileBranch }}
        sourceMetafileName: {{ .Values.sourceMetafileName }}
      annotations:
        app.dognauts/platform-generated: true
        app.dognauts/subjectArea: {{ .Values.subjectArea }}

  - path: values.yaml
    template: true
    content: |
      subjectArea: {{ .Values.subjectArea }}
      {{- if .Values.apiVersion }}
      apiVersion: {{ .Values.apiVersion }}
      {{- end }}
      {{- if .Values.protocol }}
      protocol: {{ .Values.protocol }}
      {{- end }}
      {{- if .Values.transport }}
      transport: {{ .Values.transport }}
      {{- end }}
      {{- if .Values.annotations }}
      specAnnotations:
        {{- range $k, $v := .Values.annotations }}
        {{ $k }}: {{ $v }}
        {{- end }}
      {{- end }}
      {{- if .Values.metadata }}
      metadata:
        {{- if .Values.metadata.labels }}
        labels:
          {{- range $k, $v := .Values.metadata.labels }}
          {{ $k }}: {{ $v }}
          {{- end }}
        {{- end }}
        {{- if .Values.metadata.annotations }}
        annotations:
          {{- range $k, $v := .Values.metadata.annotations }}
          {{ $k }}: {{ $v }}
          {{- end }}
        {{- end }}
      {{- end }}
      predictors:
      {{- range .Values.predictors }}
        {{ .name }}:
          name: {{ .name }}
          {{- if .traffic }}
          traffic: {{ .traffic }}
          {{- end }}
          {{- if .labels }}
          labels:
            {{- range $k, $v := .labels }}
            {{ $k }}: {{ $v }}
            {{- end }}
          {{- end }}
          {{- if .shadow }}
          shadow: {{ .shadow }}
          {{- end }}
          {{- if .explainer }}
          explainer:
            {{- if .explainer.type }}
            type: {{ .explainer.type }}
            {{- end }}
            {{- if .explainer.storageInitializerImage }}
            storageInitializerImage: {{ .explainer.storageInitializerImage }}
            {{- end }}
            {{- if .explainer.initParameters }}
            initParameters: '{{ .explainer.initParameters }}'
            {{- end }}
            {{- if .explainer.endpoint }}
            endpoint:
              type: {{ .explainer.endpoint.type }}
            {{- end }}
            {{- if .explainer.config }}
            config:
              {{- range $k, $v := .explainer.config }}
              {{ $k }}: {{ $v }}
              {{- end }}
            {{- end }}
            {{- if .explainer.containerSpec }}
            containerSpec:
              name: {{ .explainer.containerSpec.name }}
              {{- if .explainer.containerSpec.image }}
              image: {{ .explainer.containerSpec.image }}
              {{- end }}
              {{- if .explainer.containerSpec.imagePullPolicy }}
              imagePullPolicy: {{ .explainer.containerSpec.imagePullPolicy }}
              {{- end }}
              {{- if .explainer.containerSpec.args }}
              args:
                {{- range .explainer.containerSpec.args }}
                - {{ . }}
                {{- end }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .svcOrchSpec }}
          {{- if .svcOrchSpec.env }}
          svcOrchSpec:
            env:
              {{- range .svcOrchSpec.env }}
              - name: {{ .name }}
                {{- if .valueFrom }}
                valueFrom:
                  secretKeyRef:
                    name: {{ .valueFrom.secretKeyRef.name }}
                    key: {{ .valueFrom.secretKeyRef.key }}
                {{- else }}
                value: "{{ .value }}"
                {{- end }}
              {{- end }}
          {{- end }}
          {{- end }}
          {{- if .componentSpec }}
          componentSpec:
            {{- if .componentSpec.terminationGracePeriodSeconds }}
            terminationGracePeriodSeconds: {{ .componentSpec.terminationGracePeriodSeconds }}
            {{- else }}
            terminationGracePeriodSeconds: 0
            {{- end }}
            {{- if .componentSpec.volumes }}
            volumes:
            {{- range .componentSpec.volumes }}
              {{ .name }}:
                name: {{ .name }}
                {{- if .emptyDir }}
                emptyDir:
                  {{- if .emptyDir.medium }}
                  medium: {{ .emptyDir.medium }}
                  {{- end }}
                  {{- if .emptyDir.sizeLimit }}
                  sizeLimit: {{ .emptyDir.sizeLimit }}
                  {{- end }}
                {{- else if .secret }}
                secret:
                  secretName: {{ .secret.secretName }}
                {{- end }}
            {{- end }}
            {{- end }}
            {{- if .componentSpec.containers }}
            containers:
            {{- range .componentSpec.containers }}
              {{ .name }}:
                name: {{ .name }}
                {{- if .image }}
                image: {{ .image }}
                {{- end }}
                {{- if .imagePullPolicy }}
                imagePullPolicy: {{ .imagePullPolicy }}
                {{- end }}
                {{- if .args }}
                args:
                  {{- range .args }}
                  - {{ . }}
                  {{- end }}
                {{- end }}
                {{- if .env }}
                env:
                  {{- range .env }}
                  - name: {{ .name }}
                    {{- if and (eq .name "MODEL_METADATA") .value }}
                    {{- if .value }}
                    value:
                      {{- if .value.name }}
                      name: {{ .value.name }}
                      {{- end }}
                      {{- if .value.versions }}
                      versions: {{ .value.versions }}
                      {{- end }}
                      {{- if .value.platform }}
                      platform: {{ .value.platform }}
                      {{- end }}
                      {{- if .value.inputs }}
                      inputs:
                        {{- if .value.inputs.messagetype }}
                        messagetype: {{ .value.inputs.messagetype }}
                        {{- end }}
                        {{- if .value.inputs.schema }}
                        schema:
                          {{- if .value.inputs.schema.names }}
                          names: {{ .value.inputs.schema.names }}
                          {{- end }}
                          {{- if .value.inputs.schema.shape }}
                          shape: {{ .value.inputs.schema.shape }}
                          {{- end }}
                        {{- end }}
                      {{- end }}
                      {{- if .value.outputs }}
                      outputs:
                        {{- if .value.outputs.messagetype }}
                        messagetype: {{ .value.outputs.messagetype }}
                        {{- end }}
                        {{- if .value.outputs.schema }}
                        schema:
                          {{- if .value.outputs.schema.names }}
                          names: {{ .value.outputs.schema.names }}
                          {{- end }}
                          {{- if .value.outputs.schema.shape }}
                          shape: {{ .value.outputs.schema.shape }}
                          {{- end }}
                        {{- end }}
                      {{- end }}
                    {{- end }}
                    {{- else if .valueFrom }}
                    valueFrom:
                      secretKeyRef:
                        name: {{ .valueFrom.secretKeyRef.name }}
                        key: {{ .valueFrom.secretKeyRef.key }}
                    {{- else }}
                    value: "{{ .value -}}"
                    {{- end }}
                  {{- end }}
                {{- end }}
                {{- if .volumeMounts }}
                volumeMounts:
                  {{- range .volumeMounts }}
                  {{ .name }}:
                    name: {{ .name }}
                    mountPath: {{ .mountPath }}
                    {{- if .readOnly }}
                    readOnly: {{ .readOnly }}
                    {{- end }}
                  {{- end }}
                {{- end }}
                {{- if .liveness }}
                liveness:
                  {{- if .liveness.httpGet }}
                  httpGet:
                    path: {{ .liveness.httpGet.path }}
                    port: {{ .liveness.httpGet.port }}
                    {{- if .liveness.httpGet.host }}
                    host: {{ .liveness.httpGet.host }}
                    {{- end }}
                    {{- if .liveness.httpGet.scheme }}
                    scheme: {{ .liveness.httpGet.scheme }}
                    {{- end }}
                    {{- if .liveness.httpGet.httpHeaders }}
                    httpHeaders:
                      {{- range .liveness.httpGet.httpHeaders }}
                      - name: {{ .name }}
                        value: {{ .value }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .liveness.tcpSocket }}
                  tcpSocket:
                    port: {{ .liveness.tcpSocket.port }}
                    {{- if .liveness.tcpSocket.host }}
                    host: {{ .liveness.tcpSocket.host }}
                    {{- end }}
                  {{- end }}
                  {{- if .liveness.exec }}
                  exec:
                    command:
                      {{- range .liveness.exec.command }}
                      - {{ . }}
                      {{- end }}
                  {{- end }}
                  {{- if .liveness.grpc }}
                  grpc:
                    port: {{ .liveness.grpc.port }}
                    {{- if .liveness.grpc.service }}
                    service: {{ .liveness.grpc.service }}
                    {{- end }}
                  {{- end }}
                  {{- if .liveness.initialDelaySeconds }}
                  initialDelaySeconds: {{ .liveness.initialDelaySeconds }}
                  {{- end }}
                  {{- if .liveness.periodSeconds }}
                  periodSeconds: {{ .liveness.periodSeconds }}
                  {{- end }}
                  {{- if .liveness.timeoutSeconds }}
                  timeoutSeconds: {{ .liveness.timeoutSeconds }}
                  {{- end }}
                  {{- if .liveness.successThreshold }}
                  vsuccessThreshold: {{ .liveness.successThreshold }}
                  {{- end }}
                  {{- if .liveness.failureThreshold }}
                  failureThreshold: {{ .liveness.failureThreshold }}
                  {{- end }}
                {{- end }}
                {{- if .readiness }}
                readiness:
                  {{- if .readiness.httpGet }}
                  httpGet:
                    path: {{ .readiness.httpGet.path }}
                    port: {{ .readiness.httpGet.port }}
                    {{- if .readiness.httpGet.host }}
                    host: {{ .readiness.httpGet.host }}
                    {{- end }}
                    {{- if .readiness.httpGet.scheme }}
                    scheme: {{ .readiness.httpGet.scheme }}
                    {{- end }}
                    {{- if .readiness.httpGet.httpHeaders }}
                    httpHeaders:
                      {{- range .readiness.httpGet.httpHeaders }}
                      - name: {{ .name }}
                        value: {{ .value }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .readiness.tcpSocket }}
                  tcpSocket:
                    port: {{ .readiness.tcpSocket.port }}
                    {{- if .readiness.tcpSocket.host }}
                    host: {{ .readiness.tcpSocket.host }}
                    {{- end }}
                  {{- end }}
                  {{- if .readiness.exec }}
                  exec:
                    command:
                      {{- range .readiness.exec.command }}
                      - {{ . }}
                      {{- end }}
                  {{- end }}
                  {{- if .readiness.grpc }}
                  grpc:
                    port: {{ .readiness.grpc.port }}
                    {{- if .readiness.grpc.service }}
                    service: {{ .readiness.grpc.service }}
                    {{- end }}
                  {{- end }}
                  {{- if .readiness.initialDelaySeconds }}
                  initialDelaySeconds: {{ .readiness.initialDelaySeconds }}
                  {{- end }}
                  {{- if .readiness.periodSeconds }}
                  periodSeconds: {{ .readiness.periodSeconds }}
                  {{- end }}
                  {{- if .readiness.timeoutSeconds }}
                  timeoutSeconds: {{ .readiness.timeoutSeconds }}
                  {{- end }}
                  {{- if .readiness.successThreshold }}
                  successThreshold: {{ .readiness.successThreshold }}
                  {{- end }}
                  {{- if .readiness.failureThreshold }}
                  failureThreshold: {{ .readiness.failureThreshold }}
                  {{- end }}
                {{- end }}
                {{- if .lifecycle }}
                lifecycle:
                  {{- if .lifecycle.postStart }}
                  postStart:
                    {{- if .lifecycle.postStart.exec }}
                    exec:
                      command:
                        {{- range .lifecycle.postStart.exec.command }}
                        - {{ . }}
                        {{- end }}
                    {{- end }}
                    {{- if .lifecycle.postStart.httpGet }}
                    httpGet:
                      path: {{ .lifecycle.postStart.httpGet.path }}
                      port: {{ .lifecycle.postStart.httpGet.port }}
                      {{- if .lifecycle.postStart.httpGet.scheme }}
                      scheme: {{ .lifecycle.postStart.httpGet.scheme }}
                      {{- end }}
                      {{- if .lifecycle.postStart.httpGet.host }}
                      host: {{ .lifecycle.postStart.httpGet.host }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .lifecycle.preStop }}
                  preStop:
                    {{- if .lifecycle.preStop.exec }}
                    exec:
                      command:
                        {{- range .lifecycle.preStop.exec.command }}
                        - {{ . }}
                        {{- end }}
                    {{- end }}
                    {{- if .lifecycle.preStop.httpGet }}
                    httpGet:
                      path: {{ .lifecycle.preStop.httpGet.path }}
                      port: {{ .lifecycle.preStop.httpGet.port }}
                      {{- if .lifecycle.preStop.httpGet.scheme }}
                      scheme: {{ .lifecycle.preStop.httpGet.scheme }}
                      {{- end }}
                      {{- if .lifecycle.preStop.httpGet.host }}
                      host: {{ .lifecycle.preStop.httpGet.host }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                {{- end }}
            {{- end }}
            {{- end }}
            {{- if .componentSpec.initContainers }}
            initContainers:
            {{- range .componentSpec.initContainers }}
              {{ .name }}:
                name: {{ .name }}
                {{- if .image }}
                image: {{ .image }}
                {{- end }}
                {{- if .imagePullPolicy }}
                imagePullPolicy: {{ .imagePullPolicy }}
                {{- end }}
                {{- if .args }}
                args:
                  {{- range .args }}
                  - {{ . }}
                  {{- end }}
                {{- end }}
                {{- if .env }}
                env:
                  {{- range .env }}
                  - name: {{ .name }}
                    {{- if .valueFrom }}
                    valueFrom:
                      secretKeyRef:
                        name: {{ .valueFrom.secretKeyRef.name }}
                        key: {{ .valueFrom.secretKeyRef.key }}
                    {{- else }}
                    value: "{{ .value }}"
                    {{- end }}
                  {{- end }}
                {{- end }}
                volumeMounts:
                  {{- range .volumeMounts }}
                  {{ .name }}:
                    name: {{ .name }}
                    mountPath: {{ .mountPath }}
                    {{- if .readOnly }}
                    readOnly: {{ .readOnly }}
                    {{- end }}
                  {{- end }}
                {{- if .liveness }}
                liveness:
                  {{- if .liveness.httpGet }}
                  httpGet:
                    path: {{ .liveness.httpGet.path }}
                    port: {{ .liveness.httpGet.port }}
                    {{- if .liveness.httpGet.host }}
                    host: {{ .liveness.httpGet.host }}
                    {{- end }}
                    {{- if .liveness.httpGet.scheme }}
                    scheme: {{ .liveness.httpGet.scheme }}
                    {{- end }}
                    {{- if .liveness.httpGet.httpHeaders }}
                    httpHeaders:
                      {{- range .liveness.httpGet.httpHeaders }}
                      - name: {{ .name }}
                        value: {{ .value }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .liveness.tcpSocket }}
                  tcpSocket:
                    port: {{ .liveness.tcpSocket.port }}
                    {{- if .liveness.tcpSocket.host }}
                    host: {{ .liveness.tcpSocket.host }}
                    {{- end }}
                  {{- end }}
                  {{- if .liveness.exec }}
                  exec:
                    command:
                      {{- range .liveness.exec.command }}
                      - {{ . }}
                      {{- end }}
                  {{- end }}
                  {{- if .liveness.grpc }}
                  grpc:
                    port: {{ .liveness.grpc.port }}
                    {{- if .liveness.grpc.service }}
                    service: {{ .liveness.grpc.service }}
                    {{- end }}
                  {{- end }}
                  {{- if .liveness.initialDelaySeconds }}
                  initialDelaySeconds: {{ .liveness.initialDelaySeconds }}
                  {{- end }}
                  {{- if .liveness.periodSeconds }}
                  periodSeconds: {{ .liveness.periodSeconds }}
                  {{- end }}
                  {{- if .liveness.timeoutSeconds }}
                  timeoutSeconds: {{ .liveness.timeoutSeconds }}
                  {{- end }}
                  {{- if .liveness.successThreshold }}
                  vsuccessThreshold: {{ .liveness.successThreshold }}
                  {{- end }}
                  {{- if .liveness.failureThreshold }}
                  failureThreshold: {{ .liveness.failureThreshold }}
                  {{- end }}
                {{- end }}
                {{- if .readiness }}
                readiness:
                  {{- if .readiness.httpGet }}
                  httpGet:
                    path: {{ .readiness.httpGet.path }}
                    port: {{ .readiness.httpGet.port }}
                    {{- if .readiness.httpGet.host }}
                    host: {{ .readiness.httpGet.host }}
                    {{- end }}
                    {{- if .readiness.httpGet.scheme }}
                    scheme: {{ .readiness.httpGet.scheme }}
                    {{- end }}
                    {{- if .readiness.httpGet.httpHeaders }}
                    httpHeaders:
                      {{- range .readiness.httpGet.httpHeaders }}
                      - name: {{ .name }}
                        value: {{ .value }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .readiness.tcpSocket }}
                  tcpSocket:
                    port: {{ .readiness.tcpSocket.port }}
                    {{- if .readiness.tcpSocket.host }}
                    host: {{ .readiness.tcpSocket.host }}
                    {{- end }}
                  {{- end }}
                  {{- if .readiness.exec }}
                  exec:
                    command:
                      {{- range .readiness.exec.command }}
                      - {{ . }}
                      {{- end }}
                  {{- end }}
                  {{- if .readiness.grpc }}
                  grpc:
                    port: {{ .readiness.grpc.port }}
                    {{- if .readiness.grpc.service }}
                    service: {{ .readiness.grpc.service }}
                    {{- end }}
                  {{- end }}
                  {{- if .readiness.initialDelaySeconds }}
                  initialDelaySeconds: {{ .readiness.initialDelaySeconds }}
                  {{- end }}
                  {{- if .readiness.periodSeconds }}
                  periodSeconds: {{ .readiness.periodSeconds }}
                  {{- end }}
                  {{- if .readiness.timeoutSeconds }}
                  timeoutSeconds: {{ .readiness.timeoutSeconds }}
                  {{- end }}
                  {{- if .readiness.successThreshold }}
                  successThreshold: {{ .readiness.successThreshold }}
                  {{- end }}
                  {{- if .readiness.failureThreshold }}
                  failureThreshold: {{ .readiness.failureThreshold }}
                  {{- end }}
                {{- end }}
                {{- if .lifecycle }}
                lifecycle:
                  {{- if .lifecycle.postStart }}
                  postStart:
                    {{- if .lifecycle.postStart.exec }}
                    exec:
                      command:
                        {{- range .lifecycle.postStart.exec.command }}
                        - {{ . }}
                        {{- end }}
                    {{- end }}
                    {{- if .lifecycle.postStart.httpGet }}
                    httpGet:
                      path: {{ .lifecycle.postStart.httpGet.path }}
                      port: {{ .lifecycle.postStart.httpGet.port }}
                      {{- if .lifecycle.postStart.httpGet.scheme }}
                      scheme: {{ .lifecycle.postStart.httpGet.scheme }}
                      {{- end }}
                      {{- if .lifecycle.postStart.httpGet.host }}
                      host: {{ .lifecycle.postStart.httpGet.host }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .lifecycle.preStop }}
                  preStop:
                    {{- if .lifecycle.preStop.exec }}
                    exec:
                      command:
                        {{- range .lifecycle.preStop.exec.command }}
                        - {{ . }}
                        {{- end }}
                    {{- end }}
                    {{- if .lifecycle.preStop.httpGet }}
                    httpGet:
                      path: {{ .lifecycle.preStop.httpGet.path }}
                      port: {{ .lifecycle.preStop.httpGet.port }}
                      {{- if .lifecycle.preStop.httpGet.scheme }}
                      scheme: {{ .lifecycle.preStop.httpGet.scheme }}
                      {{- end }}
                      {{- if .lifecycle.preStop.httpGet.host }}
                      host: {{ .lifecycle.preStop.httpGet.host }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                {{- end }}
            {{- end }}
            {{- end }}
          {{- end }}
          graph:
            name: {{ .graph.name }}
            {{- if .graph.type }}
            type: {{ .graph.type }}
            {{- end }}
            {{- if .graph.implementation }}
            implementation: {{ .graph.implementation }}
            {{- end }}
            {{- if .graph.endpoint }}
            endpoint:
              type: {{ .graph.endpoint.type }}
            {{- end }}
            {{- if .graph.storageInitializerImage }}
            storageInitializerImage: {{ .graph.storageInitializerImage }}
            {{- end }}            
            {{- if .graph.parameters }}
            parameters:
              {{- range .graph.parameters }}
              - name: {{ .name }}
                type: {{ .type }}
                value: {{ .value }}
              {{- end }}
            {{- end }}
            {{- if .graph.children }}
            children:
              {{- range .graph.children }}
              {{ .name }}:
                name: {{ .name }}
                {{- if .type }}
                type: {{ .type }}
                {{- end }}
                {{- if .implementation }}
                implementation: {{ .implementation }}
                {{- end }}
                {{- if .endpoint }}
                endpoint:
                  type: {{ .endpoint.type }}
                {{- end }}
                {{- if .storageInitializerImage }}
                storageInitializerImage: {{ .storageInitializerImage }}
                {{- end }}                    
                {{- if .parameters }}
                parameters:
                  {{- range .parameters }}
                  - name: {{ .name }}
                    type: {{ .type }}
                    value: {{ .value }}
                  {{- end }}
                {{- end }}
                {{- if .children }}
                children:
                  {{- range .children }}
                  {{ .name }}:
                    name: {{ .name }}
                    {{- if .type }}
                    type: {{ .type }}
                    {{- end }}
                    {{- if .implementation }}
                    implementation: {{ .implementation }}
                    {{- end }}
                    {{- if .endpoint }}
                    endpoint:
                      type: {{ .endpoint.type }}
                    {{- end }}
                    {{- if .storageInitializerImage }}
                    storageInitializerImage: {{ .storageInitializerImage }}
                    {{- end }}
                    {{- if .parameters }}
                    parameters:
                      {{- range .parameters }}
                      - name: {{ .name }}
                        type: {{ .type }}
                        value: {{ .value }}
                      {{- end }}
                    {{- end }}
                    {{- if .children }}
                    children:
                      {{- range .children }}
                      {{ .name }}:
                        name: {{ .name }}
                        {{- if .type }}
                        type: {{ .type }}
                        {{- end }}
                        {{- if .implementation }}
                        implementation: {{ .implementation }}
                        {{- end }}
                        {{- if .endpoint }}
                        endpoint:
                          type: {{ .endpoint.type }}
                        {{- end }}
                        {{- if .storageInitializerImage }}
                        storageInitializerImage: {{ .storageInitializerImage }}
                        {{- end }}                        
                        {{- if .parameters }}
                        parameters:
                          {{- range .parameters }}
                          - name: {{ .name }}
                            type: {{ .type }}
                            value: {{ .value }}
                          {{- end }}
                        {{- end }}
                        {{- if .children }}
                        children:
                          {{- range .children }}
                          {{ .name }}:
                            name: {{ .name }}
                            {{- if .type }}
                            type: {{ .type }}
                            {{- end }}
                            {{- if .implementation }}
                            implementation: {{ .implementation }}
                            {{- end }}
                            {{- if .endpoint }}
                            endpoint:
                              type: {{ .endpoint.Type }}
                            {{- end }}
                            {{- if .storageInitializerImage }}
                            storageInitializerImage: {{ .storageInitializerImage }}
                            {{- end }}                                 
                            {{- if .parameters }}
                            parameters:
                              {{- range .parameters }}
                              - name: {{ .name }}
                                type: {{ .type }}
                                value: {{ .value }}
                              {{- end }}
                            {{- end }}
                            children: []
                          {{- end }}
                        {{- else }}
                        children: []
                        {{- end }}
                      {{- end }}
                    {{- else }}
                    children: []
                    {{- end }}
                  {{- end }}
                {{- else }}
                children: []
                {{- end }}
              {{- end }}
            {{- else }}
            children: []
            {{- end }}
      {{- end }}

  - path: values-ENV.yaml
    outputFilename: values-{{ .Values.environment }}.yaml
    template: true
    content: |
      {{- if .Values.namespace }}
      namespace: {{ .Values.namespace }}
      {{- end }}
      predictors:
      {{- range .Values.predictors }}
        {{ .name }}:
          name: {{ .name }}
          {{- if .replicas }}
          replicas: {{ .replicas }}
          {{- end }}
          {{- if .traffic }}
          traffic: {{ .traffic }}
          {{- end }}
          {{- if .engineResources }}
          engineResources:
            {{- if .engineResources.requests }}
            requests:
              {{- if .engineResources.requests.cpu }}
              cpu: "{{ .engineResources.requests.cpu }}"
              {{- end }}
              {{- if .engineResources.requests.memory }}
              memory: "{{ .engineResources.requests.memory }}"
              {{- end }}
            {{- end }}
            {{- if .engineResources.limits }}
            limits:
              {{- if .engineResources.limits.cpu }}
              cpu: "{{ .engineResources.limits.cpu }}"
              {{- end }}
              {{- if .engineResources.limits.memory }}
              memory: "{{ .engineResources.limits.memory }}"
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .ssl }}
          ssl:
            certSecretName: {{ .ssl.certSecretName }}
          {{- end }}
          {{- if .progressDeadlineSeconds }}
          progressDeadlineSeconds: {{ .progressDeadlineSeconds }}
          {{- end }}
          {{- if .explainer }}
          explainer:
            {{- if .explainer.modelUri }}
            modelUri: {{ .explainer.modelUri }}
            {{- end }}
            {{- if .explainer.serviceAccountName }}
            serviceAccountName: {{ .explainer.serviceAccountName }}
            {{- end }}
            {{- if .explainer.envSecretRefName }}
            envSecretRefName: {{ .explainer.envSecretRefName }}
            {{- end }}
            {{- if .explainer.replicas }}
            replicas: {{ .explainer.replicas }}
            {{- end }}
          {{- end }}
          {{- if .svcOrchSpec }}
          {{- if .svcOrchSpec.resources }}
          svcOrchSpec:
            resources:
              {{- if .svcOrchSpec.resources.requests }}
              requests:
                {{- if .svcOrchSpec.resources.requests.cpu }}
                cpu: "{{ .svcOrchSpec.resources.requests.cpu }}"
                {{- end }}
                {{- if .svcOrchSpec.resources.requests.memory }}
                memory: "{{ .svcOrchSpec.resources.requests.memory }}"
                {{- end }}
              {{- end }}
              {{- if .svcOrchSpec.resources.limits }}
              limits:
                {{- if .svcOrchSpec.resources.limits.cpu }}
                cpu: "{{ .svcOrchSpec.resources.limits.cpu }}"
                {{- end }}
                {{- if .svcOrchSpec.resources.limits.memory }}
                memory: "{{ .svcOrchSpec.resources.limits.memory }}"
                {{- end }}
              {{- end }}
          {{- end }}
          {{- end }}
          componentSpec:
            {{- if .componentSpec.serviceAccountName }}
            serviceAccountName: {{ .componentSpec.serviceAccountName }}
            {{- end }}
            {{- if .componentSpec.hpaSpec }}
            hpaSpec:
              {{- if .componentSpec.hpaSpec.minReplicas }}
              minReplicas: {{ .componentSpec.hpaSpec.minReplicas }}
              {{- end }}
              {{- if .componentSpec.hpaSpec.maxReplicas }}
              maxReplicas: {{ .componentSpec.hpaSpec.maxReplicas }}
              {{- end }}
              {{- if .componentSpec.hpaSpec.metricsv2 }}
              metricsv2:
                {{- range .componentSpec.hpaSpec.metricsv2 }}
                - type: {{ .type }}
                  {{- if .resource }}
                  resource:
                    name: {{ .resource.name }}
                    target:
                      type: {{ .resource.target.type }}
                      {{- if .resource.target.value }}
                      value: {{ .resource.target.value }}
                      {{- end }}
                      {{- if .resource.target.averageValue }}
                      averageValue: {{ .resource.target.averageValue }}
                      {{- end }}
                      {{- if .resource.target.averageUtilization }}
                      averageUtilization: {{ .resource.target.averageUtilization }}
                      {{- end }}
                  {{- end }}
                  {{- if .pods }}
                  pods:
                    metric:
                      name: {{ .pods.metric.name }}
                      {{- if .pods.metric.selector }}
                      selector:
                        {{- if .pods.metric.selector.matchLabels }}
                        matchLabels:
                          {{- range $k, $v := .pods.metric.selector.matchLabels }}
                          {{ $k }}: {{ $v }}
                          {{- end }}
                        {{- end }}
                        {{- if .pods.metric.selector.matchExpressions }}
                        matchExpressions:
                          {{- range .pods.metric.selector.matchExpressions }}
                          - key: {{ .key }}
                            operator: {{ .operator }}
                            {{- if .values }}
                            values:
                              {{- range .values }}
                              - {{ . }}
                              {{- end }}
                            {{- end }}
                          {{- end }}
                        {{- end }}
                      {{- end }}
                    target:
                      type: {{ .pods.target.type }}
                      {{- if .pods.target.averageValue }}
                      averageValue: {{ .pods.target.averageValue }}
                      {{- end }}
                      {{- if .pods.target.value }}
                      value: {{ .pods.target.value }}
                      {{- end }}
                      {{- if .pods.target.averageUtilization }}
                      averageUtilization: {{ .pods.target.averageUtilization }}
                      {{- end }}
                  {{- end }}
                  {{- if .object }}
                  object:
                    describedObject:
                      apiVersion: {{ .object.describedObject.apiVersion }}
                      kind: {{ .object.describedObject.kind }}
                      name: {{ .object.describedObject.name }}
                    metric:
                      name: {{ .object.metric.name }}
                      {{- if .object.metric.selector }}
                      selector:
                        {{- if .object.metric.selector.matchLabels }}
                        matchLabels:
                          {{- range $k, $v := .object.metric.selector.matchLabels }}
                          {{ $k }}: {{ $v }}
                          {{- end }}
                        {{- end }}
                        {{- if .object.metric.selector.matchExpressions }}
                        matchExpressions:
                          {{- range .object.metric.selector.matchExpressions }}
                          - key: {{ .key }}
                            operator: {{ .operator }}
                            {{- if .values }}
                            values:
                              {{- range .values }}
                              - {{ . }}
                              {{- end }}
                            {{- end }}
                          {{- end }}
                        {{- end }}
                      {{- end }}
                    target:
                      type: {{ .object.target.type }}
                      {{- if .object.target.value }}
                      value: {{ .object.target.value }}
                      {{- end }}
                      {{- if .object.target.averageValue }}
                      averageValue: {{ .object.target.averageValue }}
                      {{- end }}
                      {{- if .object.target.averageUtilization }}
                      averageUtilization: {{ .object.target.averageUtilization }}
                      {{- end }}
                  {{- end }}
                  {{- if .external }}
                  external:
                    metric:
                      name: {{ .external.metric.name }}
                      {{- if .external.metric.selector }}
                      selector:
                        {{- if .external.metric.selector.matchLabels }}
                        matchLabels:
                          {{- range $k, $v := .external.metric.selector.matchLabels }}
                          {{ $k }}: {{ $v }}
                          {{- end }}
                        {{- end }}
                        {{- if .external.metric.selector.matchExpressions }}
                        matchExpressions:
                          {{- range .external.metric.selector.matchExpressions }}
                          - key: {{ .key }}
                            operator: {{ .operator }}
                            {{- if .values }}
                            values:
                              {{- range .values }}
                              - {{ . }}
                              {{- end }}
                            {{- end }}
                          {{- end }}
                        {{- end }}
                      {{- end }}
                    target:
                      type: {{ .external.target.type }}
                      {{- if .external.target.value }}
                      value: {{ .external.target.value }}
                      {{- end }}
                      {{- if .external.target.averageValue }}
                      averageValue: {{ .external.target.averageValue }}
                      {{- end }}
                      {{- if .external.target.averageUtilization }}
                      averageUtilization: {{ .external.target.averageUtilization }}
                      {{- end }}
                  {{- end }}
                {{- end }}
              {{- end }}
              {{- if .componentSpec.hpaSpec.metrics }}
              metrics:
                {{- range .componentSpec.hpaSpec.metrics }}
                - type: {{ .type }}
                  {{- if .resource }}
                  resource:
                    name: {{ .resource.name }}
                    targetAverageUtilization: {{ .resource.targetAverageUtilization }}
                    {{- if .resource.targetAverageValue }}
                    targetAverageValue: {{ .resource.targetAverageValue }}
                    {{- end }}
                  {{- end }}
                  {{- if .pods }}
                  pods:
                    metricName: {{ .pods.metricName }}
                    targetAverageValue: {{ .pods.targetAverageValue }}
                    {{- if .pods.selector }}
                    selector:
                      {{- if .pods.selector.matchLabels }}
                      matchLabels:
                        {{- range $k, $v := .pods.selector.matchLabels }}
                        {{ $k }}: {{ $v }}
                        {{- end }}
                      {{- end }}
                      {{- if .pods.selector.matchExpressions }}
                      matchExpressions:
                        {{- range .pods.selector.matchExpressions }}
                        - key: {{ .key }}
                          operator: {{ .operator }}
                          {{- if .values }}
                          values:
                            {{- range .values }}
                            - {{ . }}
                            {{- end }}
                          {{- end }}
                        {{- end }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .object }}
                  object:
                    target:
                      apiVersion: {{ .object.target.apiVersion }}
                      kind: {{ .object.target.kind }}
                      name: {{ .object.target.name }}
                    metricName: {{ .object.metricName }}
                    {{- if .object.targetValue }}
                    targetValue: {{ .object.targetValue }}
                    {{- end }}
                    {{- if .object.averageValue }}
                    averageValue: {{ .object.averageValue }}
                    {{- end }}
                    {{- if .object.selector }}
                    selector:
                      {{- if .object.selector.matchLabels }}
                      matchLabels:
                        {{- range $k, $v := .object.selector.matchLabels }}
                        {{ $k }}: {{ $v }}
                        {{- end }}
                      {{- end }}
                      {{- if .object.selector.matchExpressions }}
                      matchExpressions:
                        {{- range .object.selector.matchExpressions }}
                        - key: {{ .key }}
                          operator: {{ .operator }}
                          {{- if .values }}
                          values:
                            {{- range .values }}
                            - {{ . }}
                            {{- end }}
                          {{- end }}
                        {{- end }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .external }}
                  external:
                    metricName: {{ .external.metricName }}
                    {{- if .external.metricSelector }}
                    metricSelector:
                      {{- if .external.metricSelector.matchLabels }}
                      matchLabels:
                        {{- range $k, $v := .external.metricSelector.matchLabels }}
                        {{ $k }}: {{ $v }}
                        {{- end }}
                      {{- end }}
                      {{- if .external.metricSelector.matchExpressions }}
                      matchExpressions:
                        {{- range .external.metricSelector.matchExpressions }}
                        - key: {{ .key }}
                          operator: {{ .operator }}
                          {{- if .values }}
                          values:
                            {{- range .values }}
                            - {{ . }}
                            {{- end }}
                          {{- end }}
                        {{- end }}
                      {{- end }}
                    {{- end }}
                    {{- if .external.targetValue }}
                    targetValue: {{ .external.targetValue }}
                    {{- end }}
                    {{- if .external.targetAverageValue }}
                    targetAverageValue: {{ .external.targetAverageValue }}
                    {{- end }}
                  {{- end }}
                {{- end }}
              {{- end }}
            {{- end }}
            {{- if .componentSpec.kedaSpec }}
            kedaSpec:
              {{- if .componentSpec.kedaSpec.minReplicaCount }}
              minReplicaCount: {{ .componentSpec.kedaSpec.minReplicaCount }}
              {{- end }}
              {{- if .componentSpec.kedaSpec.maxReplicaCount }}
              maxReplicaCount: {{ .componentSpec.kedaSpec.maxReplicaCount }}
              {{- end }}
              {{- if .componentSpec.kedaSpec.cooldownPeriod }}
              cooldownPeriod: {{ .componentSpec.kedaSpec.cooldownPeriod }}
              {{- end }}
              {{- if .componentSpec.kedaSpec.pollingInterval }}
              pollingInterval: {{ .componentSpec.kedaSpec.pollingInterval }}
              {{- end }}
              {{- if .componentSpec.kedaSpec.triggers }}
              triggers:
                {{- range .componentSpec.kedaSpec.triggers }}
                - type: {{ .type }}
                  {{- if .name }}
                  name: {{ .name }}
                  {{- end }}
                  {{- if .useCachedMetrics }}
                  useCachedMetrics: {{ .useCachedMetrics }}
                  {{- end }}
                  {{- if .metricType }}
                  metricType: {{ .metricType }}
                  {{- end }}
                  {{- if .metadata }}
                  metadata:
                    {{- range $k, $v := .metadata }}
                    {{ $k }}: {{ $v }}
                    {{- end }}
                  {{- end }}
                  {{- if .authenticationRef }}
                  authenticationRef:
                    name: {{ .authenticationRef.name }}
                    {{- if .authenticationRef.kind }}
                    kind: {{ .authenticationRef.kind }}
                    {{- end }}
                  {{- end }}
                {{- end }}
              {{- end }}
              {{- if .componentSpec.kedaSpec.advanced }}
              advanced:
                {{- if .componentSpec.kedaSpec.advanced.restoreToOriginalReplicaCount }}
                restoreToOriginalReplicaCount: {{ .componentSpec.kedaSpec.advanced.restoreToOriginalReplicaCount }}
                {{- end }}
                {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig }}
                horizontalPodAutoscalerConfig:
                  {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.name }}
                  name: {{ .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.name }}
                  {{- end }}
                  {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior }}
                  behavior:
                    {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp }}
                    scaleUp:
                      {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.stabilizationWindowSeconds }}
                      stabilizationWindowSeconds: {{ .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.stabilizationWindowSeconds }}
                      {{- end }}
                      {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.selectPolicy }}
                      selectPolicy: {{ .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.selectPolicy }}
                      {{- end }}
                      {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.tolerance }}
                      tolerance: {{ .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.tolerance }}
                      {{- end }}
                      {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.policies }}
                      policies:
                        {{- range .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.policies }}
                        - type: {{ .type }}
                          value: {{ .value }}
                          periodSeconds: {{ .periodSeconds }}
                        {{- end }}
                      {{- end }}
                    {{- end }}
                    {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown }}
                    scaleDown:
                      {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.stabilizationWindowSeconds }}
                      stabilizationWindowSeconds: {{ .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.stabilizationWindowSeconds }}
                      {{- end }}
                      {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.selectPolicy }}
                      selectPolicy: {{ .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.selectPolicy }}
                      {{- end }}
                      {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.tolerance }}
                      tolerance: {{ .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.tolerance }}
                      {{- end }}
                      {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.policies }}
                      policies:
                        {{- range .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.policies }}
                        - type: {{ .type }}
                          value: {{ .value }}
                          periodSeconds: {{ .periodSeconds }}
                        {{- end }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                {{- end }}
                {{- if .componentSpec.kedaSpec.advanced.scalingModifiers }}
                scalingModifiers:
                  {{- if .componentSpec.kedaSpec.advanced.scalingModifiers.formula }}
                  formula: {{ .componentSpec.kedaSpec.advanced.scalingModifiers.formula }}
                  {{- end }}
                  {{- if .componentSpec.kedaSpec.advanced.scalingModifiers.target }}
                  target: {{ .componentSpec.kedaSpec.advanced.scalingModifiers.target }}
                  {{- end }}
                  {{- if .componentSpec.kedaSpec.advanced.scalingModifiers.activationTarget }}
                  activationTarget: {{ .componentSpec.kedaSpec.advanced.scalingModifiers.activationTarget }}
                  {{- end }}
                  {{- if .componentSpec.kedaSpec.advanced.scalingModifiers.metricType }}
                  metricType: {{ .componentSpec.kedaSpec.advanced.scalingModifiers.metricType }}
                  {{- end }}
                {{- end }}
              {{- end }}
            {{- end }}
            {{- if .componentSpec.pdbSpec }}
            pdbSpec:
              {{- if .componentSpec.pdbSpec.minAvailable }}
              minAvailable: {{ .componentSpec.pdbSpec.minAvailable }}
              {{- end }}
              {{- if .componentSpec.pdbSpec.maxUnavailable }}
              maxUnavailable: {{ .componentSpec.pdbSpec.maxUnavailable }}
              {{- end }}
            {{- end }}
            {{- if .componentSpec.containers }}
            containers:
            {{- range .componentSpec.containers }}
              {{ .name }}:
                name: {{ .name }}
                {{- if .envFrom }}
                envFrom:
                  {{- range .envFrom }}
                  {{- if .secretRef }}
                  - secretRef:
                      name: {{ .secretRef.name }}
                  {{- end }}
                  {{- if .configMapRef }}
                  - configMapRef:
                      name: {{ .configMapRef.name }}
                  {{- end }}
                  {{- end }}
                {{- end }}
                {{- if .resources }}
                resources:
                  {{- if .resources.requests }}
                  requests:
                    {{- if .resources.requests.cpu }}
                    cpu: "{{ .resources.requests.cpu }}"
                    {{- end }}
                    {{- if .resources.requests.memory }}
                    memory: "{{ .resources.requests.memory }}"
                    {{- end }}
                  {{- end }}
                  {{- if .resources.limits }}
                  limits:
                    {{- if .resources.limits.cpu }}
                    cpu: "{{ .resources.limits.cpu }}"
                    {{- end }}
                    {{- if .resources.limits.memory }}
                    memory: "{{ .resources.limits.memory }}"
                    {{- end }}
                  {{- end }}
                {{- end }}
            {{- end }}
            {{- end }}
            {{- if .componentSpec.initContainers }}
            initContainers:
            {{- range .componentSpec.initContainers }}
              {{ .name }}:
                name: {{ .name }}
                {{- if .envFrom }}
                envFrom:
                  {{- range .envFrom }}
                  {{- if .secretRef }}
                  - secretRef:
                      name: {{ .secretRef.name }}
                  {{- end }}
                  {{- if .configMapRef }}
                  - configMapRef:
                      name: {{ .configMapRef.name }}
                  {{- end }}
                  {{- end }}
                {{- end }}
                {{- if .resources }}
                resources:
                  {{- if .resources.requests }}
                  requests:
                    {{- if .resources.requests.cpu }}
                    cpu: "{{ .resources.requests.cpu }}"
                    {{- end }}
                    {{- if .resources.requests.memory }}
                    memory: "{{ .resources.requests.memory }}"
                    {{- end }}
                  {{- end }}
                  {{- if .resources.limits }}
                  limits:
                    {{- if .resources.limits.cpu }}
                    cpu: "{{ .resources.limits.cpu }}"
                    {{- end }}
                    {{- if .resources.limits.memory }}
                    memory: "{{ .resources.limits.memory }}"
                    {{- end }}
                  {{- end }}
                {{- end }}
            {{- end }}
            {{- end }}
          graph:
            name: {{ .graph.name }}
            {{- if .graph.modelUri }}
            modelUri: {{ .graph.modelUri }}
            {{- end }}
            {{- if .graph.envSecretRefName }}
            envSecretRefName: {{ .graph.envSecretRefName }}
            {{- end }}
            {{- if .graph.logger }}
            logger:
              mode: {{ .graph.logger.mode }}
              {{- if .graph.logger.url }}
              url: {{ .graph.logger.url }}
              {{- end }}
            {{- end }}
            {{- if .graph.serviceAccountName }}
            serviceAccountName: {{ .graph.serviceAccountName }}
            {{- end }}
            {{- if .graph.children }}
            children:
              {{- range .graph.children }}
              {{ .name }}:
                name: {{ .name }}
                {{- if .modelUri }}
                modelUri: {{ .modelUri }}
                {{- end }}
                {{- if .envSecretRefName }}
                envSecretRefName: {{ .envSecretRefName }}
                {{- end }}
                {{- if .logger }}
                logger:
                  mode: {{ .logger.mode }}
                  {{- if .logger.url }}
                  url: {{ .logger.url }}
                  {{- end }}
                {{- end }}
                {{- if .serviceAccountName }}
                serviceAccountName: {{ .serviceAccountName }}
                {{- end }}
                {{- if .children }}
                children:
                  {{- range .children }}
                  {{ .name }}:
                    name: {{ .name }}
                    {{- if .modelUri }}
                    modelUri: {{ .modelUri }}
                    {{- end }}
                    {{- if .envSecretRefName }}
                    envSecretRefName: {{ .envSecretRefName }}
                    {{- end }}
                    {{- if .logger }}
                    logger:
                      mode: {{ .logger.mode }}
                      {{- if .logger.url }}
                      url: {{ .logger.url }}
                      {{- end }}
                    {{- end }}
                    {{- if .serviceAccountName }}
                    serviceAccountName: {{ .serviceAccountName }}
                    {{- end }}
                    {{- if .children }}
                    children:
                      {{- range .children }}
                      {{ .name }}:
                        name: {{ .name }}
                        {{- if .modelUri }}
                        modelUri: {{ .modelUri }}
                        {{- end }}
                        {{- if .envSecretRefName }}
                        envSecretRefName: {{ .envSecretRefName }}
                        {{- end }}
                        {{- if .logger }}
                        logger:
                          mode: {{ .logger.mode }}
                          {{- if .logger.url }}
                          url: {{ .logger.url }}
                          {{- end }}
                        {{- end }}
                        {{- if .serviceAccountName }}
                        serviceAccountName: {{ .serviceAccountName }}
                        {{- end }}
                        {{- if .children }}
                        children:
                          {{- range .children }}
                          {{ .name }}:
                            name: {{ .name }}
                            {{- if .modelUri }}
                            modelUri: {{ .modelUri }}
                            {{- end }}
                            {{- if .envSecretRefName }}
                            envSecretRefName: {{ .envSecretRefName }}
                            {{- end }}
                            {{- if .logger }}
                            logger:
                              mode: {{ .logger.mode }}
                              {{- if .logger.url }}
                              url: {{ .logger.url }}
                              {{- end }}
                            {{- end }}
                            {{- if .serviceAccountName }}
                            serviceAccountName: {{ .serviceAccountName }}
                            {{- end }}
                            children: []
                          {{- end }}
                        {{- else }}
                        children: []
                        {{- end }}
                      {{- end }}
                    {{- else }}
                    children: []
                    {{- end }}
                  {{- end }}
                {{- else }}
                children: []
                {{- end }}
              {{- end }}
            {{- else }}
            children: []
            {{- end }}
      {{- end }}

  - path: templates/_helpers.tpl
    template: false
    content: |
      {{- define "seldon.graph.node" -}}
      name: {{ .name }}
      {{- if .type }}
      type: {{ .type }}
      {{- end }}
      {{- if .implementation }}
      implementation: {{ .implementation }}
      {{- end }}
      {{- if .modelUri }}
      modelUri: {{ .modelUri }}
      {{- end }}
      {{- if .envSecretRefName }}
      envSecretRefName: {{ .envSecretRefName }}
      {{- end }}
      {{- if .endpoint }}
      endpoint:
        type: {{ .endpoint.type }}
      {{- end }}
      {{- if .logger }}
      logger:
        mode: {{ .logger.mode }}
        {{- if .logger.url }}
        url: {{ .logger.url }}
        {{- end }}
      {{- end }}
      {{- if .parameters }}
      parameters:
        {{- range .parameters }}
        - name: {{ .name }}
          type: {{ .type }}
          value: {{ .value }}
        {{- end }}
      {{- end }}
      {{- if .methods }}
      methods:
        {{- range .methods }}
        - {{ . }}
        {{- end }}
      {{- end }}
      {{- if .serviceAccountName }}
      serviceAccountName: {{ .serviceAccountName }}
      {{- end }}
      {{- if .storageInitializerImage }}
      storageInitializerImage: {{ .storageInitializerImage }}
      {{- end }}
      {{- if .children }}
      children:
        {{- range $name, $ch := .children }}
        {{- with $ch }}
        - {{ include "seldon.graph.node" . | indent 4 | trim }}
        {{- end }}
        {{- end }}
      {{- else }}
      children: []
      {{- end }}
      {{- end -}}
      {{- define "seldon.container" -}}
      - name: {{ .name }}
        {{- if .image }}
        image: {{ .image }}
        {{- end }}
        {{- if .imagePullPolicy }}
        imagePullPolicy: {{ .imagePullPolicy }}
        {{- end }}
        {{- if .args }}
        args:
          {{- range .args }}
          - {{ . }}
          {{- end }}
        {{- end }}
        {{- if .env }}
        env:
          {{- range .env }}
          - name: {{ .name }}
            {{- if and (eq .name "MODEL_METADATA") .value }}
            {{- if .value }}
            value: |
              ---
              {{- if .value.name }}
              name: {{ .value.name }}
              {{- end }}
              {{- if .value.versions }}
              versions: {{ .value.versions }}
              {{- end }}
              {{- if .value.platform }}
              platform: {{ .value.platform }}
              {{- end }}
              {{- if .value.inputs }}
              inputs:
                {{- if .value.inputs.messagetype }}
              - messagetype: {{ .value.inputs.messagetype }}
                {{- end }}
                {{- if .value.inputs.schema }}
                schema:
                  {{- if .value.inputs.schema.names }}
                  names: {{ .value.inputs.schema.names }}
                  {{- end }}
                  {{- if .value.inputs.schema.shape }}
                  shape: {{ .value.inputs.schema.shape }}
                  {{- end }}
                {{- end }}
              {{- end }}
              {{- if .value.outputs }}
              outputs:
                {{- if .value.outputs.messagetype }}
              - messagetype: {{ .value.outputs.messagetype }}
                {{- end }}
                {{- if .value.outputs.schema }}
                schema:
                  {{- if .value.outputs.schema.names }}
                  names: {{ .value.outputs.schema.names }}
                  {{- end }}
                  {{- if .value.outputs.schema.shape }}
                  shape: {{ .value.outputs.schema.shape }}
                  {{- end }}
                {{- end }}
              {{- end }}
            {{- end }}
            {{- else if .valueFrom }}
            valueFrom:
              secretKeyRef:
                name: {{ .valueFrom.secretKeyRef.name }}
                key: {{ .valueFrom.secretKeyRef.key }}
            {{- else }}
            value: "{{ .value -}}"
            {{- end }}
          {{- end }}
        {{- end }}
        {{- if .envFrom }}
        envFrom:
          {{- range .envFrom }}
          {{- if .secretRef }}
          - secretRef:
              name: {{ .secretRef.name }}
          {{- end }}
          {{- if .configMapRef }}
          - configMapRef:
              name: {{ .configMapRef.name }}
          {{- end }}
          {{- end }}
        {{- end }}
        {{- if .volumeMounts }}
        volumeMounts:
          {{- range $name, $vm := .volumeMounts }}
          {{- with $vm }}
          - name: {{ .name }}
            mountPath: {{ .mountPath }}
            {{- if .readOnly }}
            readOnly: {{ .readOnly }}
            {{- end }}
          {{- end }}
          {{- end }}
        {{- end }}
        {{- if .resources }}
        resources:
          {{- if .resources.requests }}
          requests:
            {{- if .resources.requests.cpu }}
            cpu: "{{ .resources.requests.cpu }}"
            {{- end }}
            {{- if .resources.requests.memory }}
            memory: "{{ .resources.requests.memory }}"
            {{- end }}
          {{- end }}
          {{- if .resources.limits }}
          limits:
            {{- if .resources.limits.cpu }}
            cpu: "{{ .resources.limits.cpu }}"
            {{- end }}
            {{- if .resources.limits.memory }}
            memory: "{{ .resources.limits.memory }}"
            {{- end }}
          {{- end }}
        {{- end }}
        {{- if .liveness }}
        livenessProbe:
          {{- if .liveness.httpGet }}
          httpGet:
            path: {{ .liveness.httpGet.path }}
            port: {{ .liveness.httpGet.port }}
            {{- if .liveness.httpGet.host }}
            host: {{ .liveness.httpGet.host }}
            {{- end }}
            {{- if .liveness.httpGet.scheme }}
            scheme: {{ .liveness.httpGet.scheme }}
            {{- end }}
            {{- if .liveness.httpGet.httpHeaders }}
            httpHeaders:
              {{- range .liveness.httpGet.httpHeaders }}
              - name: {{ .name }}
                value: {{ .value }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .liveness.tcpSocket }}
          tcpSocket:
            port: {{ .liveness.tcpSocket.port }}
            {{- if .liveness.tcpSocket.host }}
            host: {{ .liveness.tcpSocket.host }}
            {{- end }}
          {{- end }}
          {{- if .liveness.exec }}
          exec:
            command:
              {{- range .liveness.exec.command }}
              - {{ . }}
              {{- end }}
          {{- end }}
          {{- if .liveness.grpc }}
          grpc:
            port: {{ .liveness.grpc.port }}
            {{- if .liveness.grpc.service }}
            service: {{ .liveness.grpc.service }}
            {{- end }}
          {{- end }}
          {{- if .liveness.initialDelaySeconds }}
          initialDelaySeconds: {{ .liveness.initialDelaySeconds }}
          {{- end }}
          {{- if .liveness.periodSeconds }}
          periodSeconds: {{ .liveness.periodSeconds }}
          {{- end }}
          {{- if .liveness.timeoutSeconds }}
          timeoutSeconds: {{ .liveness.timeoutSeconds }}
          {{- end }}
          {{- if .liveness.successThreshold }}
          successThreshold: {{ .liveness.successThreshold }}
          {{- end }}
          {{- if .liveness.failureThreshold }}
          failureThreshold: {{ .liveness.failureThreshold }}
          {{- end }}
        {{- end }}
        {{- if .readiness }}
        readinessProbe:
          {{- if .readiness.httpGet }}
          httpGet:
            path: {{ .readiness.httpGet.path }}
            port: {{ .readiness.httpGet.port }}
            {{- if .readiness.httpGet.host }}
            host: {{ .readiness.httpGet.host }}
            {{- end }}
            {{- if .readiness.httpGet.scheme }}
            scheme: {{ .readiness.httpGet.scheme }}
            {{- end }}
            {{- if .readiness.httpGet.httpHeaders }}
            httpHeaders:
              {{- range .readiness.httpGet.httpHeaders }}
              - name: {{ .name }}
                value: {{ .value }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .readiness.tcpSocket }}
          tcpSocket:
            port: {{ .readiness.tcpSocket.port }}
            {{- if .readiness.tcpSocket.host }}
            host: {{ .readiness.tcpSocket.host }}
            {{- end }}
          {{- end }}
          {{- if .readiness.exec }}
          exec:
            command:
              {{- range .readiness.exec.command }}
              - {{ . }}
              {{- end }}
          {{- end }}
          {{- if .readiness.grpc }}
          grpc:
            port: {{ .readiness.grpc.port }}
            {{- if .readiness.grpc.service }}
            service: {{ .readiness.grpc.service }}
            {{- end }}
          {{- end }}
          {{- if .readiness.initialDelaySeconds }}
          initialDelaySeconds: {{ .readiness.initialDelaySeconds }}
          {{- end }}
          {{- if .readiness.periodSeconds }}
          periodSeconds: {{ .readiness.periodSeconds }}
          {{- end }}
          {{- if .readiness.timeoutSeconds }}
          timeoutSeconds: {{ .readiness.timeoutSeconds }}
          {{- end }}
          {{- if .readiness.successThreshold }}
          successThreshold: {{ .readiness.successThreshold }}
          {{- end }}
          {{- if .readiness.failureThreshold }}
          failureThreshold: {{ .readiness.failureThreshold }}
          {{- end }}
        {{- end }}
        {{- if .lifecycle }}
        lifecycle:
          {{- if .lifecycle.postStart }}
          postStart:
            {{- if .lifecycle.postStart.exec }}
            exec:
              command:
                {{- range .lifecycle.postStart.exec.command }}
                - {{ . }}
                {{- end }}
            {{- end }}
            {{- if .lifecycle.postStart.httpGet }}
            httpGet:
              path: {{ .lifecycle.postStart.httpGet.path }}
              port: {{ .lifecycle.postStart.httpGet.port }}
              {{- if .lifecycle.postStart.httpGet.scheme }}
              scheme: {{ .lifecycle.postStart.httpGet.scheme }}
              {{- end }}
              {{- if .lifecycle.postStart.httpGet.host }}
              host: {{ .lifecycle.postStart.httpGet.host }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .lifecycle.preStop }}
          preStop:
            {{- if .lifecycle.preStop.exec }}
            exec:
              command:
                {{- range .lifecycle.preStop.exec.command }}
                - {{ . }}
                {{- end }}
            {{- end }}
            {{- if .lifecycle.preStop.httpGet }}
            httpGet:
              path: {{ .lifecycle.preStop.httpGet.path }}
              port: {{ .lifecycle.preStop.httpGet.port }}
              {{- if .lifecycle.preStop.httpGet.scheme }}
              scheme: {{ .lifecycle.preStop.httpGet.scheme }}
              {{- end }}
              {{- if .lifecycle.preStop.httpGet.host }}
              host: {{ .lifecycle.preStop.httpGet.host }}
              {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}
      {{- end -}}
      {{- define "seldon.container-s" -}}
        {{ "name: " | indent 2 }}{{ .name }}
        {{- if .image }}
        image: {{ .image }}
        {{- end }}
        {{- if .imagePullPolicy }}
        imagePullPolicy: {{ .imagePullPolicy }}
        {{- end }}
        {{- if .args }}
        args:
          {{- range .args }}
          - {{ . }}
          {{- end }}
        {{- end }}
        {{- if .env }}
        env:
          {{- range .env }}
          - name: {{ .name }}
            {{- if .valueFrom }}
            valueFrom:
              secretKeyRef:
                name: {{ .valueFrom.secretKeyRef.name }}
                key: {{ .valueFrom.secretKeyRef.key }}
            {{- else }}
            value: "{{ .value }}"
            {{- end }}
          {{- end }}
        {{- end }}
        {{- if .envFrom }}
        envFrom:
          {{- range .envFrom }}
          {{- if .secretRef }}
          - secretRef:
              name: {{ .secretRef.name }}
          {{- end }}
          {{- if .configMapRef }}
          - configMapRef:
              name: {{ .configMapRef.name }}
          {{- end }}
          {{- end }}
        {{- end }}
        {{- if .volumeMounts }}
        volumeMounts:
          {{- range $name, $vm := .volumeMounts }}
          {{- with $vm }}
          - name: {{ .name }}
            mountPath: {{ .mountPath }}
            {{- if .readOnly }}
            readOnly: {{ .readOnly }}
            {{- end }}
          {{- end }}
          {{- end }}
        {{- end }}
        {{- if .resources }}
        resources:
          {{- if .resources.requests }}
          requests:
            {{- if .resources.requests.cpu }}
            cpu: "{{ .resources.requests.cpu }}"
            {{- end }}
            {{- if .resources.requests.memory }}
            memory: "{{ .resources.requests.memory }}"
            {{- end }}
          {{- end }}
          {{- if .resources.limits }}
          limits:
            {{- if .resources.limits.cpu }}
            cpu: "{{ .resources.limits.cpu }}"
            {{- end }}
            {{- if .resources.limits.memory }}
            memory: "{{ .resources.limits.memory }}"
            {{- end }}
          {{- end }}
        {{- end }}
        {{- if .liveness }}
        livenessProbe:
          {{- if .liveness.httpGet }}
          httpGet:
            path: {{ .liveness.httpGet.path }}
            port: {{ .liveness.httpGet.port }}
            {{- if .liveness.httpGet.host }}
            host: {{ .liveness.httpGet.host }}
            {{- end }}
            {{- if .liveness.httpGet.scheme }}
            scheme: {{ .liveness.httpGet.scheme }}
            {{- end }}
            {{- if .liveness.httpGet.httpHeaders }}
            httpHeaders:
              {{- range .liveness.httpGet.httpHeaders }}
              - name: {{ .name }}
                value: {{ .value }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .liveness.tcpSocket }}
          tcpSocket:
            port: {{ .liveness.tcpSocket.port }}
            {{- if .liveness.tcpSocket.host }}
            host: {{ .liveness.tcpSocket.host }}
            {{- end }}
          {{- end }}
          {{- if .liveness.exec }}
          exec:
            command:
              {{- range .liveness.exec.command }}
              - {{ . }}
              {{- end }}
          {{- end }}
          {{- if .liveness.grpc }}
          grpc:
            port: {{ .liveness.grpc.port }}
            {{- if .liveness.grpc.service }}
            service: {{ .liveness.grpc.service }}
            {{- end }}
          {{- end }}
          {{- if .liveness.initialDelaySeconds }}
          initialDelaySeconds: {{ .liveness.initialDelaySeconds }}
          {{- end }}
          {{- if .liveness.periodSeconds }}
          periodSeconds: {{ .liveness.periodSeconds }}
          {{- end }}
          {{- if .liveness.timeoutSeconds }}
          timeoutSeconds: {{ .liveness.timeoutSeconds }}
          {{- end }}
          {{- if .liveness.successThreshold }}
          successThreshold: {{ .liveness.successThreshold }}
          {{- end }}
          {{- if .liveness.failureThreshold }}
          failureThreshold: {{ .liveness.failureThreshold }}
          {{- end }}
        {{- end }}
        {{- if .readiness }}
        readinessProbe:
          {{- if .readiness.httpGet }}
          httpGet:
            path: {{ .readiness.httpGet.path }}
            port: {{ .readiness.httpGet.port }}
            {{- if .readiness.httpGet.host }}
            host: {{ .readiness.httpGet.host }}
            {{- end }}
            {{- if .readiness.httpGet.scheme }}
            scheme: {{ .readiness.httpGet.scheme }}
            {{- end }}
            {{- if .readiness.httpGet.httpHeaders }}
            httpHeaders:
              {{- range .readiness.httpGet.httpHeaders }}
              - name: {{ .name }}
                value: {{ .value }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .readiness.tcpSocket }}
          tcpSocket:
            port: {{ .readiness.tcpSocket.port }}
            {{- if .readiness.tcpSocket.host }}
            host: {{ .readiness.tcpSocket.host }}
            {{- end }}
          {{- end }}
          {{- if .readiness.exec }}
          exec:
            command:
              {{- range .readiness.exec.command }}
              - {{ . }}
              {{- end }}
          {{- end }}
          {{- if .readiness.grpc }}
          grpc:
            port: {{ .readiness.grpc.port }}
            {{- if .readiness.grpc.service }}
            service: {{ .readiness.grpc.service }}
            {{- end }}
          {{- end }}
          {{- if .readiness.initialDelaySeconds }}
          initialDelaySeconds: {{ .readiness.initialDelaySeconds }}
          {{- end }}
          {{- if .readiness.periodSeconds }}
          periodSeconds: {{ .readiness.periodSeconds }}
          {{- end }}
          {{- if .readiness.timeoutSeconds }}
          timeoutSeconds: {{ .readiness.timeoutSeconds }}
          {{- end }}
          {{- if .readiness.successThreshold }}
          successThreshold: {{ .readiness.successThreshold }}
          {{- end }}
          {{- if .readiness.failureThreshold }}
          failureThreshold: {{ .readiness.failureThreshold }}
          {{- end }}
        {{- end }}
        {{- if .lifecycle }}
        lifecycle:
          {{- if .lifecycle.postStart }}
          postStart:
            {{- if .lifecycle.postStart.exec }}
            exec:
              command:
                {{- range .lifecycle.postStart.exec.command }}
                - {{ . }}
                {{- end }}
            {{- end }}
            {{- if .lifecycle.postStart.httpGet }}
            httpGet:
              path: {{ .lifecycle.postStart.httpGet.path }}
              port: {{ .lifecycle.postStart.httpGet.port }}
              {{- if .lifecycle.postStart.httpGet.scheme }}
              scheme: {{ .lifecycle.postStart.httpGet.scheme }}
              {{- end }}
              {{- if .lifecycle.postStart.httpGet.host }}
              host: {{ .lifecycle.postStart.httpGet.host }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .lifecycle.preStop }}
          preStop:
            {{- if .lifecycle.preStop.exec }}
            exec:
              command:
                {{- range .lifecycle.preStop.exec.command }}
                - {{ . }}
                {{- end }}
            {{- end }}
            {{- if .lifecycle.preStop.httpGet }}
            httpGet:
              path: {{ .lifecycle.preStop.httpGet.path }}
              port: {{ .lifecycle.preStop.httpGet.port }}
              {{- if .lifecycle.preStop.httpGet.scheme }}
              scheme: {{ .lifecycle.preStop.httpGet.scheme }}
              {{- end }}
              {{- if .lifecycle.preStop.httpGet.host }}
              host: {{ .lifecycle.preStop.httpGet.host }}
              {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}
      {{- end -}}
      {{- define "common.helm-labels" -}}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/revision: {{ .Release.Revision | quote }}
      app.dognauts/subjectArea: {{ .Values.subjectArea }}
      {{- end -}}

  - path: templates/seldon-deployment.yaml
    template: false
    content: |
      apiVersion: {{ .Values.apiVersion }}
      kind: SeldonDeployment
      metadata:
        name: {{ .Release.Name }}-inference
        namespace: {{ .Values.namespace }}
        labels:
          {{- include "common.helm-labels" . | nindent 4 }}
        {{- if .Values.metadata }}
        {{- if .Values.metadata.labels }}
        {{- range $k, $v := .Values.metadata.labels }}
          {{ $k }}: {{ $v }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.metadata }}
        {{- if .Values.metadata.annotations }}
        annotations:
        {{- range $k, $v := .Values.metadata.annotations }}
          {{ $k }}: {{ $v }}
        {{- end }}
        {{- end }}
        {{- end }}
      spec:
        {{- if .Values.protocol }}
        protocol: {{ .Values.protocol }}
        {{- end }}
        {{- if .Values.transport }}
        transport: {{ .Values.transport }}
        {{- end }}
        {{- if .Values.specAnnotations }}
        annotations:
          {{- range $k, $v := .Values.specAnnotations }}
          {{ $k }}: {{ $v }}
          {{- end }}
        {{- end }}
        predictors:
        {{- range $name, $pred := .Values.predictors }}
          {{- with $pred }}
          - name: {{ .name }}
            {{- if .replicas }}
            replicas: {{ .replicas }}
            {{- end }}
            {{- if .traffic }}
            traffic: {{ .traffic }}
            {{- end }}
            {{- if .annotations }}
            annotations:
            {{- range $k, $v := .annotations }}
              {{ $k }}: {{ $v }}
            {{- end }}
            {{- end }}
            {{- if .engineResources }}
            engineResources:
              {{- if .engineResources.requests }}
              requests:
                {{- if .engineResources.requests.cpu }}
                cpu: "{{ .engineResources.requests.cpu }}"
                {{- end }}
                {{- if .engineResources.requests.memory }}
                memory: "{{ .engineResources.requests.memory }}"
                {{- end }}
              {{- end }}
              {{- if .engineResources.limits }}
              limits:
                {{- if .engineResources.limits.cpu }}
                cpu: "{{ .engineResources.limits.cpu }}"
                {{- end }}
                {{- if .engineResources.limits.memory }}
                memory: "{{ .engineResources.limits.memory }}"
                {{- end }}
              {{- end }}
            {{- end }}
            {{- if .labels }}
            labels:
              {{- range $k, $v := .labels }}
              {{ $k }}: {{ $v }}
              {{- end }}
            {{- end }}
            {{- if .shadow }}
            shadow: {{ .shadow }}
            {{- end }}
            {{- if .ssl }}
            ssl:
              certSecretName: {{ .ssl.certSecretName }}
            {{- end }}
            {{- if .progressDeadlineSeconds }}
            progressDeadlineSeconds: {{ .progressDeadlineSeconds }}
            {{- end }}
            {{- if .explainer }}
            explainer:
              {{- if .explainer.type }}
              type: {{ .explainer.type }}
              {{- end }}
              {{- if .explainer.modelUri }}
              modelUri: {{ .explainer.modelUri }}
              {{- end }}
              {{- if .explainer.serviceAccountName }}
              serviceAccountName: {{ .explainer.serviceAccountName }}
              {{- end }}
              {{- if .explainer.storageInitializerImage }}
              storageInitializerImage: {{ .explainer.storageInitializerImage }}
              {{- end }}
              {{- if .explainer.envSecretRefName }}
              envSecretRefName: {{ .explainer.envSecretRefName }}
              {{- end }}
              {{- if .explainer.initParameters }}
              initParameters: '{{ .explainer.initParameters }}'
              {{- end }}
              {{- if .explainer.replicas }}
              replicas: {{ .explainer.replicas }}
              {{- end }}
              {{- if .explainer.endpoint }}
              endpoint:
                type: {{ .explainer.endpoint.type }}
              {{- end }}
              {{- if .explainer.config }}
              config:
                {{- range $k, $v := .explainer.config }}
                {{ $k }}: {{ $v }}
                {{- end }}
              {{- end }}
              {{- if .explainer.containerSpec }}
              containerSpec:
                {{- "\n" }}{{ include "seldon.container-s" .explainer.containerSpec | indent 8 }}
              {{- end }}
            {{- end }}
            {{- if .svcOrchSpec }}
            svcOrchSpec:
              {{- if .svcOrchSpec.resources }}
              resources:
                {{- if .svcOrchSpec.resources.requests }}
                requests:
                  {{- if .svcOrchSpec.resources.requests.cpu }}
                  cpu: "{{ .svcOrchSpec.resources.requests.cpu }}"
                  {{- end }}
                  {{- if .svcOrchSpec.resources.requests.memory }}
                  memory: "{{ .svcOrchSpec.resources.requests.memory }}"
                  {{- end }}
                {{- end }}
                {{- if .svcOrchSpec.resources.limits }}
                limits:
                  {{- if .svcOrchSpec.resources.limits.cpu }}
                  cpu: "{{ .svcOrchSpec.resources.limits.cpu }}"
                  {{- end }}
                  {{- if .svcOrchSpec.resources.limits.memory }}
                  memory: "{{ .svcOrchSpec.resources.limits.memory }}"
                  {{- end }}
                {{- end }}
              {{- end }}
              {{- if .svcOrchSpec.env }}
              env:
                {{- range .svcOrchSpec.env }}
                - name: {{ .name }}
                  {{- if .valueFrom }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ .valueFrom.secretKeyRef.name }}
                      key: {{ .valueFrom.secretKeyRef.key }}
                  {{- else }}
                  value: "{{ .value }}"
                  {{- end }}
                {{- end }}
              {{- end }}
            {{- end }}
            graph:
              {{- "\n" }}{{ include "seldon.graph.node" .graph | indent 8 }}
            {{- if .componentSpec }}
            componentSpecs:
              {{- if .componentSpec.hpaSpec }}
              - hpaSpec:
                  {{- if .componentSpec.hpaSpec.minReplicas }}
                  minReplicas: {{ .componentSpec.hpaSpec.minReplicas }}
                  {{- end }}
                  {{- if .componentSpec.hpaSpec.maxReplicas }}
                  maxReplicas: {{ .componentSpec.hpaSpec.maxReplicas }}
                  {{- end }}
                  {{- if .componentSpec.hpaSpec.metricsv2 }}
                  metricsv2:
                    {{- range .componentSpec.hpaSpec.metricsv2 }}
                    - type: {{ .type }}
                      {{- if .resource }}
                      resource:
                        name: {{ .resource.name }}
                        target:
                          type: {{ .resource.target.type }}
                          {{- if .resource.target.value }}
                          value: {{ .resource.target.value }}
                          {{- end }}
                          {{- if .resource.target.averageValue }}
                          averageValue: {{ .resource.target.averageValue }}
                          {{- end }}
                          {{- if .resource.target.averageUtilization }}
                          averageUtilization: {{ .resource.target.averageUtilization }}
                          {{- end }}
                      {{- end }}
                      {{- if .pods }}
                      pods:
                        metric:
                          name: {{ .pods.metric.name }}
                          {{- if .pods.metric.selector }}
                          selector:
                            {{- if .pods.metric.selector.matchLabels }}
                            matchLabels:
                              {{- range $k, $v := .pods.metric.selector.matchLabels }}
                              {{ $k }}: {{ $v }}
                              {{- end }}
                            {{- end }}
                            {{- if .pods.metric.selector.matchExpressions }}
                            matchExpressions:
                              {{- range .pods.metric.selector.matchExpressions }}
                              - key: {{ .key }}
                                operator: {{ .operator }}
                                {{- if .values }}
                                values:
                                  {{- range .values }}
                                  - {{ . }}
                                  {{- end }}
                                {{- end }}
                              {{- end }}
                            {{- end }}
                          {{- end }}
                        target:
                          type: {{ .pods.target.type }}
                          {{- if .pods.target.averageValue }}
                          averageValue: {{ .pods.target.averageValue }}
                          {{- end }}
                          {{- if .pods.target.value }}
                          value: {{ .pods.target.value }}
                          {{- end }}
                          {{- if .pods.target.averageUtilization }}
                          averageUtilization: {{ .pods.target.averageUtilization }}
                          {{- end }}
                      {{- end }}
                      {{- if .object }}
                      object:
                        describedObject:
                          apiVersion: {{ .object.describedObject.apiVersion }}
                          kind: {{ .object.describedObject.kind }}
                          name: {{ .object.describedObject.name }}
                        metric:
                          name: {{ .object.metric.name }}
                          {{- if .object.metric.selector }}
                          selector:
                            {{- if .object.metric.selector.matchLabels }}
                            matchLabels:
                              {{- range $k, $v := .object.metric.selector.matchLabels }}
                              {{ $k }}: {{ $v }}
                              {{- end }}
                            {{- end }}
                            {{- if .object.metric.selector.matchExpressions }}
                            matchExpressions:
                              {{- range .object.metric.selector.matchExpressions }}
                              - key: {{ .key }}
                                operator: {{ .operator }}
                                {{- if .values }}
                                values:
                                  {{- range .values }}
                                  - {{ . }}
                                  {{- end }}
                                {{- end }}
                              {{- end }}
                            {{- end }}
                          {{- end }}
                        target:
                          type: {{ .object.target.type }}
                          {{- if .object.target.value }}
                          value: {{ .object.target.value }}
                          {{- end }}
                          {{- if .object.target.averageValue }}
                          averageValue: {{ .object.target.averageValue }}
                          {{- end }}
                          {{- if .object.target.averageUtilization }}
                          averageUtilization: {{ .object.target.averageUtilization }}
                          {{- end }}
                      {{- end }}
                      {{- if .external }}
                      external:
                        metric:
                          name: {{ .external.metric.name }}
                          {{- if .external.metric.selector }}
                          selector:
                            {{- if .external.metric.selector.matchLabels }}
                            matchLabels:
                              {{- range $k, $v := .external.metric.selector.matchLabels }}
                              {{ $k }}: {{ $v }}
                              {{- end }}
                            {{- end }}
                            {{- if .external.metric.selector.matchExpressions }}
                            matchExpressions:
                              {{- range .external.metric.selector.matchExpressions }}
                              - key: {{ .key }}
                                operator: {{ .operator }}
                                {{- if .values }}
                                values:
                                  {{- range .values }}
                                  - {{ . }}
                                  {{- end }}
                                {{- end }}
                              {{- end }}
                            {{- end }}
                          {{- end }}
                        target:
                          type: {{ .external.target.type }}
                          {{- if .external.target.value }}
                          value: {{ .external.target.value }}
                          {{- end }}
                          {{- if .external.target.averageValue }}
                          averageValue: {{ .external.target.averageValue }}
                          {{- end }}
                          {{- if .external.target.averageUtilization }}
                          averageUtilization: {{ .external.target.averageUtilization }}
                          {{- end }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .componentSpec.hpaSpec.metrics }}
                  metrics:
                    {{- range .componentSpec.hpaSpec.metrics }}
                    - type: {{ .type }}
                      {{- if .resource }}
                      resource:
                        name: {{ .resource.name }}
                        targetAverageUtilization: {{ .resource.targetAverageUtilization }}
                        {{- if .resource.targetAverageValue }}
                        targetAverageValue: {{ .resource.targetAverageValue }}
                        {{- end }}
                      {{- end }}
                      {{- if .pods }}
                      pods:
                        metricName: {{ .pods.metricName }}
                        targetAverageValue: {{ .pods.targetAverageValue }}
                        {{- if .pods.selector }}
                        selector:
                          {{- if .pods.selector.matchLabels }}
                          matchLabels:
                            {{- range $k, $v := .pods.selector.matchLabels }}
                            {{ $k }}: {{ $v }}
                            {{- end }}
                          {{- end }}
                          {{- if .pods.selector.matchExpressions }}
                          matchExpressions:
                            {{- range .pods.selector.matchExpressions }}
                            - key: {{ .key }}
                              operator: {{ .operator }}
                              {{- if .values }}
                              values:
                                {{- range .values }}
                                - {{ . }}
                                {{- end }}
                              {{- end }}
                            {{- end }}
                          {{- end }}
                        {{- end }}
                      {{- end }}
                      {{- if .object }}
                      object:
                        target:
                          apiVersion: {{ .object.target.apiVersion }}
                          kind: {{ .object.target.kind }}
                          name: {{ .object.target.name }}
                        metricName: {{ .object.metricName }}
                        {{- if .object.targetValue }}
                        targetValue: {{ .object.targetValue }}
                        {{- end }}
                        {{- if .object.averageValue }}
                        averageValue: {{ .object.averageValue }}
                        {{- end }}
                        {{- if .object.selector }}
                        selector:
                          {{- if .object.selector.matchLabels }}
                          matchLabels:
                            {{- range $k, $v := .object.selector.matchLabels }}
                            {{ $k }}: {{ $v }}
                            {{- end }}
                          {{- end }}
                          {{- if .object.selector.matchExpressions }}
                          matchExpressions:
                            {{- range .object.selector.matchExpressions }}
                            - key: {{ .key }}
                              operator: {{ .operator }}
                              {{- if .values }}
                              values:
                                {{- range .values }}
                                - {{ . }}
                                {{- end }}
                              {{- end }}
                            {{- end }}
                          {{- end }}
                        {{- end }}
                      {{- end }}
                      {{- if .external }}
                      external:
                        metricName: {{ .external.metricName }}
                        {{- if .external.metricSelector }}
                        metricSelector:
                          {{- if .external.metricSelector.matchLabels }}
                          matchLabels:
                            {{- range $k, $v := .external.metricSelector.matchLabels }}
                            {{ $k }}: {{ $v }}
                            {{- end }}
                          {{- end }}
                          {{- if .external.metricSelector.matchExpressions }}
                          matchExpressions:
                            {{- range .external.metricSelector.matchExpressions }}
                            - key: {{ .key }}
                              operator: {{ .operator }}
                              {{- if .values }}
                              values:
                                {{- range .values }}
                                - {{ . }}
                                {{- end }}
                              {{- end }}
                            {{- end }}
                          {{- end }}
                        {{- end }}
                        {{- if .external.targetValue }}
                        targetValue: {{ .external.targetValue }}
                        {{- end }}
                        {{- if .external.targetAverageValue }}
                        targetAverageValue: {{ .external.targetAverageValue }}
                        {{- end }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
              {{- end }}
              - spec:
                  {{- if .componentSpec.serviceAccountName }}
                  serviceAccountName: {{ .componentSpec.serviceAccountName }}
                  {{- end }}
                  {{- if hasKey .componentSpec "terminationGracePeriodSeconds" }}
                  terminationGracePeriodSeconds: {{ .componentSpec.terminationGracePeriodSeconds }}
                  {{- end }}
                  {{- if .componentSpec.kedaSpec }}
                  kedaSpec:
                    {{- if .componentSpec.kedaSpec.minReplicaCount }}
                    minReplicaCount: {{ .componentSpec.kedaSpec.minReplicaCount }}
                    {{- end }}
                    {{- if .componentSpec.kedaSpec.maxReplicaCount }}
                    maxReplicaCount: {{ .componentSpec.kedaSpec.maxReplicaCount }}
                    {{- end }}
                    {{- if .componentSpec.kedaSpec.cooldownPeriod }}
                    cooldownPeriod: {{ .componentSpec.kedaSpec.cooldownPeriod }}
                    {{- end }}
                    {{- if .componentSpec.kedaSpec.pollingInterval }}
                    pollingInterval: {{ .componentSpec.kedaSpec.pollingInterval }}
                    {{- end }}
                    {{- if .componentSpec.kedaSpec.triggers }}
                    triggers:
                      {{- range .componentSpec.kedaSpec.triggers }}
                      - type: {{ .type }}
                        {{- if .name }}
                        name: {{ .name }}
                        {{- end }}
                        {{- if .useCachedMetrics }}
                        useCachedMetrics: {{ .useCachedMetrics }}
                        {{- end }}
                        {{- if .metricType }}
                        metricType: {{ .metricType }}
                        {{- end }}
                        {{- if .metadata }}
                        metadata:
                          {{- range $k, $v := .metadata }}
                          {{ $k }}: {{ $v }}
                          {{- end }}
                        {{- end }}
                        {{- if .authenticationRef }}
                        authenticationRef:
                          name: {{ .authenticationRef.name }}
                          {{- if .authenticationRef.kind }}
                          kind: {{ .authenticationRef.kind }}
                          {{- end }}
                        {{- end }}
                      {{- end }}
                    {{- end }}
                    {{- if .componentSpec.kedaSpec.advanced }}
                    advanced:
                      {{- if .componentSpec.kedaSpec.advanced.restoreToOriginalReplicaCount }}
                      restoreToOriginalReplicaCount: {{ .componentSpec.kedaSpec.advanced.restoreToOriginalReplicaCount }}
                      {{- end }}
                      {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig }}
                      horizontalPodAutoscalerConfig:
                        {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.name }}
                        name: {{ .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.name }}
                        {{- end }}
                        {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior }}
                        behavior:
                          {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp }}
                          scaleUp:
                            {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.stabilizationWindowSeconds }}
                            stabilizationWindowSeconds: {{ .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.stabilizationWindowSeconds }}
                            {{- end }}
                            {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.selectPolicy }}
                            selectPolicy: {{ .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.selectPolicy }}
                            {{- end }}
                            {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.tolerance }}
                            tolerance: {{ .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.tolerance }}
                            {{- end }}
                            {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.policies }}
                            policies:
                              {{- range .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.policies }}
                              - type: {{ .type }}
                                value: {{ .value }}
                                periodSeconds: {{ .periodSeconds }}
                              {{- end }}
                            {{- end }}
                          {{- end }}
                          {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown }}
                          scaleDown:
                            {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.stabilizationWindowSeconds }}
                            stabilizationWindowSeconds: {{ .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.stabilizationWindowSeconds }}
                            {{- end }}
                            {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.selectPolicy }}
                            selectPolicy: {{ .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.selectPolicy }}
                            {{- end }}
                            {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.tolerance }}
                            tolerance: {{ .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.tolerance }}
                            {{- end }}
                            {{- if .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.policies }}
                            policies:
                              {{- range .componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.policies }}
                              - type: {{ .type }}
                                value: {{ .value }}
                                periodSeconds: {{ .periodSeconds }}
                              {{- end }}
                            {{- end }}
                          {{- end }}
                        {{- end }}
                      {{- end }}
                      {{- if .componentSpec.kedaSpec.advanced.scalingModifiers }}
                      scalingModifiers:
                        {{- if .componentSpec.kedaSpec.advanced.scalingModifiers.formula }}
                        formula: {{ .componentSpec.kedaSpec.advanced.scalingModifiers.formula }}
                        {{- end }}
                        {{- if .componentSpec.kedaSpec.advanced.scalingModifiers.target }}
                        target: {{ .componentSpec.kedaSpec.advanced.scalingModifiers.target }}
                        {{- end }}
                        {{- if .componentSpec.kedaSpec.advanced.scalingModifiers.activationTarget }}
                        activationTarget: {{ .componentSpec.kedaSpec.advanced.scalingModifiers.activationTarget }}
                        {{- end }}
                        {{- if .componentSpec.kedaSpec.advanced.scalingModifiers.metricType }}
                        metricType: {{ .componentSpec.kedaSpec.advanced.scalingModifiers.metricType }}
                        {{- end }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .componentSpec.pdbSpec }}
                  pdbSpec:
                    {{- if .componentSpec.pdbSpec.minAvailable }}
                    minAvailable: {{ .componentSpec.pdbSpec.minAvailable }}
                    {{- end }}
                    {{- if .componentSpec.pdbSpec.maxUnavailable }}
                    maxUnavailable: {{ .componentSpec.pdbSpec.maxUnavailable }}
                    {{- end }}
                  {{- end }}
                  {{- if .componentSpec.containers }}
                  containers:
                    {{- range $name, $cn := .componentSpec.containers }}
                    {{- with $cn }}
                    {{- "\n" }}{{ include "seldon.container" . | indent 14 }}
                    {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .componentSpec.initContainers }}
                  initContainers:
                    {{- range $name, $icn := .componentSpec.initContainers }}
                    {{- with $icn }}
                    {{- "\n" }}{{ include "seldon.container" . | indent 14 }}
                    {{- end }}
                    {{- end }}
                  {{- end }}
                  {{- if .componentSpec.volumes }}
                  volumes:
                    {{- range $name, $vm := .componentSpec.volumes }}
                    {{- with $vm }}
                    - name: {{ .name }}
                      {{- if .emptyDir }}
                      emptyDir:
                        {{- if .emptyDir.medium }}
                        medium: {{ .emptyDir.medium }}
                        {{- end }}
                        {{- if .emptyDir.sizeLimit }}
                        sizeLimit: {{ .emptyDir.sizeLimit }}
                        {{- end }}
                      {{- else if .secret }}
                      secret:
                        secretName: {{ .secret.secretName }}
                      {{- end }}
                    {{- end }}
                    {{- end }}
                  {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}

  - path: .helmignore
    template: false
    content: |
      *.tgz
      .DS_Store
      .idea/
      *.swp
      __pycache__/
      .ipynb_checkpoints/

valuesSchema:
  apiVersion:
    type: string
    description: Kubernetes API version for the SeldonDeployment resource (e.g., machinelearning.seldon.io/v1)
    required: true
    default: machinelearning.seldon.io/v1
  chart.name:
    type: string
    description: Name of the Helm chart
    required: true
  chart.version:
    type: string
    description: Version of the Helm chart
    required: true
  chart.description:
    type: string
    description: Short description of the chart's purpose
    required: true
  namespace:
    type: string
    description: Kubernetes namespace to deploy the resources in
    required: true
  subjectArea:
    type: string
    description: A tag to classify a subject area of the target chart.
    required: true
    default: online-model-inference
  sourceMetafileName:
    type: string
    description: Source metafile name
    required: true
    default: no_data
  sourceMetafileRepo:
    type: string
    description: Source metafile name
    required: true
    default: no_data
  sourceMetafileBranch:
    type: string
    description: Source metafile name
    required: true
    default: no_data
  metadata.labels:
    type: map
    description: Key-value pairs used to categorize and select Kubernetes objects
    required: false
  metadata.annotations:
    type: list
    description: Annotations applied to the SeldonDeployment additional metadata for tooling, policies, and configuration
    required: false
  protocol:
    type: string
    description: Inference protocol to use. Allowed values- seldon, tensorflow, kafka, v2
    required: false
  transport:
    type: string
    description: Transport mechanism to use. Allowed values- rest, grpc
    required: false
  annotations:
    type: list
    description: Annotations added to the SeldonDeployment spec
    required: false
  specAnnotations:
    type: list
    description: Additional annotations applied under SeldonDeployment.spec
    required: false
  predictors:
    type: list
    description: List of predictors defining traffic-split and graph configurations
    required: true
  predictors.name:
    type: string
    description: Unique name of the predictor
    required: true
  predictors.replicas:
    type: integer
    description: Number of model replicas to deploy
    required: false
  predictors.traffic:
    type: integer
    description: Percentage of traffic assigned to this predictor
    required: false
  predictors.annotations:
    type: list
    description: Annotations applied to this predictor instance
    required: false
  predictors.svcOrchSpec.resources.requests.cpu:
    type: string
    description: CPU requested by the service orchestrator container
    required: false
  predictors.svcOrchSpec.resources.requests.memory:
    type: string
    description: Memory requested by the service orchestrator container
    required: false
  predictors.svcOrchSpec.resources.limits.cpu:
    type: string
    description: Maximum CPU allowed for the service orchestrator
    required: false
  predictors.svcOrchSpec.resources.limits.memory:
    type: string
    description: Maximum memory allowed for the service orchestrator
    required: false
  predictors.svcOrchSpec.env:
    type: list
    description: Environment variables for the service orchestrator
    required: false
  predictors.svcOrchSpec.env.name:
    type: string
    description: Name of environment variable for orchestrator
    required: true
  predictors.svcOrchSpec.env.value:
    type: string
    description: Value of environment variable for orchestrator
    required: false
  predictors.svcOrchSpec.env.valueFrom.secretKeyRef.name:
    type: string
    description: Name of the Kubernetes secret to reference
    required: false
  predictors.svcOrchSpec.env.valueFrom.secretKeyRef.key:
    type: string
    description: Key inside the referenced secret
    required: false
  predictors.graph.name:
    type: string
    description: Name of the root node in the prediction graph
    required: true
  predictors.graph.type:
    type: string
    description: Type of the node. Allowed values- MODEL, TRANSFORMER, COMBINER, ROUTER, OUTPUT_TRANSFORMER, UNKNOWN_TYPE
    required: true
  predictors.graph.implementation:
    type: string
    description: Predefined implementation for the model server. Allowed values- UNKNOWN_IMPLEMENTATION, SKLEARN_SERVER, XGBOOST_SERVER, TENSORFLOW_SERVER, PYTORCH_SERVER, LIGHTGBM_SERVER, CUSTOM, TRITON_SERVER, HUGGINGFACE_SERVER, MLFLOW_SERVER, ONNX_SERVER, R_SERVER
    required: false
  predictors.graph.modelUri:
    type: string
    description: URI to the stored model (S3, GCS, local, etc.)
    required: false
  predictors.graph.endpoint.type:
    type: string
    description: Type of endpoint exposed by the graph. Allowed values- REST, GRPC
    required: false
  predictors.graph.envSecretRefName:
    type: string
    description: Name of secret to pull environment credentials from
    required: false
  predictors.graph.logger.mode:
    type: string
    description: Logging mode. Allowed values- all, request, response, none
    required: false
  predictors.graph.logger.url:
    type: string
    description: Optional URL to send logs to
    required: false
  predictors.graph.parameters:
    type: list
    description: List of parameters for this graph node
    required: false
  predictors.graph.parameters.name:
    type: string
    description: Name of the parameter
    required: true
  predictors.graph.parameters.type:
    type: string
    description: Data type of the parameter. Allowed values- STRING, BOOL, INT, FLOAT, DOUBLE
    required: true
  predictors.graph.parameters.value:
    type: string
    description: Value of the parameter
    required: true
  predictors.graph.children:
    type: list
    description: Child nodes in the prediction graph
    required: false
  predictors.graph.methods:
    type: list
    description: List of inference methods supported by this graph node. Common values- predict, transform, route, aggregate, send_feedback, custom
    required: false
  predictors.graph.serviceAccountName:
    type: string
    description: Kubernetes service account name to use for this graph node
    required: false
  predictors.graph.storageInitializerImage:
    type: string
    description: Optional override image for storage initializer for this node
    required: false
  predictors.componentSpec.serviceAccountName:
    type: string
    description: Kubernetes service account used by pods for access control
    required: false
  predictors.componentSpec.terminationGracePeriodSeconds:
    type: integer
    description: Time (in seconds) for graceful shutdown
    required: false
  predictors.componentSpec.containers:
    type: list
    description: Additional containers in the predictor pod
    required: false
  predictors.componentSpec.containers.name:
    type: string
    description: Name of the container in the pod
    required: true
  predictors.componentSpec.containers.image:
    type: string
    description: Docker image to use in the container
    required: true
  predictors.componentSpec.containers.imagePullPolicy:
    type: string
    description: Kubernetes image pull policy (Always, IfNotPresent, Never)
    required: false
  predictors.componentSpec.containers.args:
    type: list
    description: Command-line arguments passed to the container entrypoint
    required: false
  predictors.componentSpec.containers.env:
    type: list
    description: Environment variables for the container
    required: false
  predictors.componentSpec.containers.env.name:
    type: string
    description: Name of the environment variable
    required: true
  predictors.componentSpec.containers.env.value:
    type: string
    description: Value of the environment variable
    required: false
  predictors.componentSpec.containers.env.valueFrom.secretKeyRef.name:
    type: string
    description: Name of the Kubernetes secret to reference
    required: false
  predictors.componentSpec.containers.env.valueFrom.secretKeyRef.key:
    type: string
    description: Key inside the referenced secret
    required: false
  predictors.componentSpec.containers.envFrom:
    type: list
    description: List of sources to populate environment variables from (ConfigMaps or Secrets)
    required: false
  predictors.componentSpec.containers.envFrom.secretRef.name:
    type: string
    description: Name of the Secret for env import
    required: false
  predictors.componentSpec.containers.envFrom.configMapRef.name:
    type: string
    description: Name of the ConfigMap for env import
    required: false
  predictors.componentSpec.containers.volumeMounts:
    type: list
    description: Volume mounts for container
    required: false
  predictors.componentSpec.containers.volumeMounts.name:
    type: string
    description: Name of the volume to mount
    required: true
  predictors.componentSpec.containers.volumeMounts.mountPath:
    type: string
    description: Path in container where volume will be mounted
    required: true
  predictors.componentSpec.containers.volumeMounts.readOnly:
    type: boolean
    description: Whether the volume mount should be read-only
    required: false
  predictors.componentSpec.containers.resources.requests.cpu:
    type: string
    description: Amount of CPU requested by the container (e.g. "200m")
    required: false
  predictors.componentSpec.containers.resources.requests.memory:
    type: string
    description: Amount of memory requested by the container (e.g. "256Mi")
    required: false
  predictors.componentSpec.containers.resources.limits.cpu:
    type: string
    description: Maximum amount of CPU allowed for the container
    required: false
  predictors.componentSpec.containers.resources.limits.memory:
    type: string
    description: Maximum amount of memory allowed for the container
    required: false
  predictors.componentSpec.containers.liveness.initialDelaySeconds:
    type: integer
    description: Number of seconds after the container has started before liveness probes are initiated.
    required: false
  predictors.componentSpec.containers.liveness.periodSeconds:
    type: integer
    description: How often (in seconds) to perform the liveness probe.
    required: false
  predictors.componentSpec.containers.liveness.timeoutSeconds:
    type: integer
    description: Number of seconds after which the liveness probe times out.
    required: false
  predictors.componentSpec.containers.liveness.successThreshold:
    type: integer
    description: Minimum consecutive successes for the liveness probe to be considered successful.
    required: false
  predictors.componentSpec.containers.liveness.failureThreshold:
    type: integer
    description: When a probe fails, Kubernetes will try `failureThreshold` times before giving up.
    required: false
  predictors.componentSpec.containers.liveness.httpGet.path:
    type: string
    description: Path to access on the HTTP server for the liveness probe.
    required: false
  predictors.componentSpec.containers.liveness.httpGet.port:
    type: string
    description: Name or number of the port to access on the container.
    required: false
  predictors.componentSpec.containers.liveness.httpGet.host:
    type: string
    description: Host name to connect to, defaults to the pod IP.
    required: false
  predictors.componentSpec.containers.liveness.httpGet.scheme:
    type: string
    description: Scheme to use for connecting to the host (HTTP or HTTPS).
    required: false
  predictors.componentSpec.containers.liveness.httpGet.httpHeaders:
    type: list
    description: Custom headers to set in the request.
    required: false
  predictors.componentSpec.containers.liveness.httpGet.httpHeaders.name:
    type: string
    description: Name of the HTTP header.
    required: true
  predictors.componentSpec.containers.liveness.httpGet.httpHeaders.value:
    type: string
    description: Value of the HTTP header.
    required: true
  predictors.componentSpec.containers.liveness.tcpSocket.port:
    type: string
    description: Port to access on the container.
    required: false
  predictors.componentSpec.containers.liveness.tcpSocket.host:
    type: string
    description: Optional host name to connect to.
    required: false
  predictors.componentSpec.containers.liveness.exec.command:
    type: list
    description: Command line to execute inside the container.
    required: false
  predictors.componentSpec.containers.liveness.grpc.port:
    type: integer
    description: Port number to access gRPC service.
    required: false
  predictors.componentSpec.containers.liveness.grpc.service:
    type: string
    description: Name of the gRPC service to call.
    required: false
  predictors.componentSpec.containers.readiness.initialDelaySeconds:
    type: integer
    description: Number of seconds after the container has started before readiness probes are initiated.
    required: false
  predictors.componentSpec.containers.readiness.periodSeconds:
    type: integer
    description: How often (in seconds) to perform the readiness probe.
    required: false
  predictors.componentSpec.containers.readiness.timeoutSeconds:
    type: integer
    description: Number of seconds after which the readiness probe times out.
    required: false
  predictors.componentSpec.containers.readiness.successThreshold:
    type: integer
    description: Minimum consecutive successes for the readiness probe to be considered successful.
    required: false
  predictors.componentSpec.containers.readiness.failureThreshold:
    type: integer
    description: When a probe fails, Kubernetes will try `failureThreshold` times before giving up.
    required: false
  predictors.componentSpec.containers.readiness.httpGet.path:
    type: string
    description: Path to access on the HTTP server for the readiness probe.
    required: false
  predictors.componentSpec.containers.readiness.httpGet.port:
    type: string
    description: Name or number of the port to access on the container.
    required: false
  predictors.componentSpec.containers.readiness.httpGet.host:
    type: string
    description: Host name to connect to, defaults to the pod IP.
    required: false
  predictors.componentSpec.containers.readiness.httpGet.scheme:
    type: string
    description: Scheme to use for connecting to the host (HTTP or HTTPS).
    required: false
  predictors.componentSpec.containers.readiness.httpGet.httpHeaders:
    type: list
    description: Custom headers to set in the request.
    required: false
  predictors.componentSpec.containers.readiness.httpGet.httpHeaders.name:
    type: string
    description: Name of the HTTP header.
    required: true
  predictors.componentSpec.containers.readiness.httpGet.httpHeaders.value:
    type: string
    description: Value of the HTTP header.
    required: true
  predictors.componentSpec.containers.readiness.tcpSocket.port:
    type: string
    description: Port to access on the container.
    required: false
  predictors.componentSpec.containers.readiness.tcpSocket.host:
    type: string
    description: Optional host name to connect to.
    required: false
  predictors.componentSpec.containers.readiness.exec.command:
    type: list
    description: Command line to execute inside the container.
    required: false
  predictors.componentSpec.containers.readiness.grpc.port:
    type: integer
    description: Port number to access gRPC service.
    required: false
  predictors.componentSpec.containers.readiness.grpc.service:
    type: string
    description: Name of the gRPC service to call.
    required: false
  predictors.componentSpec.containers.lifecycle.preStop.exec.command:
    type: list
    description: Command to run in preStop lifecycle hook (exec)
    required: false
  predictors.componentSpec.containers.lifecycle.preStop.httpGet.path:
    type: string
    description: HTTP path to access on the server for preStop hook
    required: false
  predictors.componentSpec.containers.lifecycle.preStop.httpGet.port:
    type: string
    description: Port to access on the server for preStop hook
    required: false
  predictors.componentSpec.containers.lifecycle.postStart.exec.command:
    type: list
    description: Command to run in postStart lifecycle hook (exec)
    required: false
  predictors.componentSpec.containers.lifecycle.postStart.httpGet.path:
    type: string
    description: HTTP path to access on the server for postStart hook
    required: false
  predictors.componentSpec.containers.lifecycle.postStart.httpGet.port:
    type: string
    description: Port to access on the server for postStart hook
    required: false
  predictors.componentSpec.volumes:
    type: list
    description: Volumes used by the predictor
    required: false
  predictors.componentSpec.volumes.name:
    type: string
    description: Name of the volume
    required: true
  predictors.componentSpec.volumes.secret.secretName:
    type: string
    description: Kubernetes secret name to mount as volume
    required: false
  predictors.componentSpec.volumes.emptyDir.medium:
    type: string
    description: Storage medium type for the EmptyDir volume. Allowed values- "" (default), "Memory"
    required: false
  predictors.componentSpec.volumes.emptyDir.sizeLimit:
    type: string
    description: Total storage size limit for the EmptyDir volume (e.g., "2Gi")
    required: false
  predictors.componentSpec.initContainers:
    type: list
    description: Init containers to run before main containers
    required: false
  predictors.componentSpec.initContainers.name:
    type: string
    description: Name of the init container
    required: true
  predictors.componentSpec.initContainers.image:
    type: string
    description: Image of the init container
    required: true
  predictors.componentSpec.initContainers.imagePullPolicy:
    type: string
    description: Policy for pulling init container image
    required: false
  predictors.componentSpec.initContainers.args:
    type: list
    description: Arguments passed to init container on start
    required: false
  predictors.componentSpec.initContainers.env:
    type: list
    description: Environment variables for the init container
    required: false
  predictors.componentSpec.initContainers.env.name:
    type: string
    description: Name of the environment variable
    required: true
  predictors.componentSpec.initContainers.env.value:
    type: string
    description: Value of the environment variable
    required: false
  predictors.componentSpec.initContainers.env.valueFrom.secretKeyRef.name:
    type: string
    description: Name of the Kubernetes secret for env valueFrom
    required: false
  predictors.componentSpec.initContainers.env.valueFrom.secretKeyRef.key:
    type: string
    description: Key within the Kubernetes secret for env valueFrom
    required: false
  predictors.componentSpec.initContainers.envFrom:
    type: list
    description: List of sources to populate environment variables from (ConfigMaps or Secrets)
    required: false
  predictors.componentSpec.initContainers.envFrom.secretRef.name:
    type: string
    description: Name of the Secret for env import
    required: false
  predictors.componentSpec.initContainers.envFrom.configMapRef.name:
    type: string
    description: Name of the ConfigMap for env import
    required: false
  predictors.componentSpec.initContainers.volumeMounts:
    type: list
    description: Volume mounts for the init container
    required: false
  predictors.componentSpec.initContainers.volumeMounts.name:
    type: string
    description: Volume name to mount into init container
    required: true
  predictors.componentSpec.initContainers.volumeMounts.mountPath:
    type: string
    description: Path inside init container to mount the volume
    required: true
  predictors.componentSpec.initContainers.volumeMounts.readOnly:
    type: boolean
    description: Whether the mount is read-only
    required: false
  predictors.componentSpec.initContainers.resources.requests.cpu:
    type: string
    description: Amount of CPU requested by the init container
    required: false
  predictors.componentSpec.initContainers.resources.requests.memory:
    type: string
    description: Amount of memory requested by the init container
    required: false
  predictors.componentSpec.initContainers.resources.limits.cpu:
    type: string
    description: Maximum amount of CPU allowed for the init container
    required: false
  predictors.componentSpec.initContainers.resources.limits.memory:
    type: string
    description: Maximum amount of memory allowed for the init container
    required: false
  predictors.componentSpec.initContainers.liveness.initialDelaySeconds:
    type: integer
    description: Number of seconds after the container has started before liveness probes are initiated.
    required: false
  predictors.componentSpec.initContainers.liveness.periodSeconds:
    type: integer
    description: How often (in seconds) to perform the liveness probe.
    required: false
  predictors.componentSpec.initContainers.liveness.timeoutSeconds:
    type: integer
    description: Number of seconds after which the liveness probe times out.
    required: false
  predictors.componentSpec.initContainers.liveness.successThreshold:
    type: integer
    description: Minimum consecutive successes for the liveness probe to be considered successful.
    required: false
  predictors.componentSpec.initContainers.liveness.failureThreshold:
    type: integer
    description: When a probe fails, Kubernetes will try `failureThreshold` times before giving up.
    required: false
  predictors.componentSpec.initContainers.liveness.httpGet.path:
    type: string
    description: Path to access on the HTTP server for the liveness probe.
    required: false
  predictors.componentSpec.initContainers.liveness.httpGet.port:
    type: string
    description: Name or number of the port to access on the container.
    required: false
  predictors.componentSpec.initContainers.liveness.httpGet.host:
    type: string
    description: Host name to connect to, defaults to the pod IP.
    required: false
  predictors.componentSpec.initContainers.liveness.httpGet.scheme:
    type: string
    description: Scheme to use for connecting to the host (HTTP or HTTPS).
    required: false
  predictors.componentSpec.initContainers.liveness.httpGet.httpHeaders:
    type: list
    description: Custom headers to set in the request.
    required: false
  predictors.componentSpec.initContainers.liveness.httpGet.httpHeaders.name:
    type: string
    description: Name of the HTTP header.
    required: true
  predictors.componentSpec.initContainers.liveness.httpGet.httpHeaders.value:
    type: string
    description: Value of the HTTP header.
    required: true
  predictors.componentSpec.initContainers.liveness.tcpSocket.port:
    type: string
    description: Port to access on the container.
    required: false
  predictors.componentSpec.initContainers.liveness.tcpSocket.host:
    type: string
    description: Optional host name to connect to.
    required: false
  predictors.componentSpec.initContainers.liveness.exec.command:
    type: list
    description: Command line to execute inside the container.
    required: false
  predictors.componentSpec.initContainers.liveness.grpc.port:
    type: integer
    description: Port number to access gRPC service.
    required: false
  predictors.componentSpec.initContainers.liveness.grpc.service:
    type: string
    description: Name of the gRPC service to call.
    required: false
  predictors.componentSpec.initContainers.readiness.initialDelaySeconds:
    type: integer
    description: Number of seconds after the container has started before readiness probes are initiated.
    required: false
  predictors.componentSpec.initContainers.readiness.periodSeconds:
    type: integer
    description: How often (in seconds) to perform the readiness probe.
    required: false
  predictors.componentSpec.initContainers.readiness.timeoutSeconds:
    type: integer
    description: Number of seconds after which the readiness probe times out.
    required: false
  predictors.componentSpec.initContainers.readiness.successThreshold:
    type: integer
    description: Minimum consecutive successes for the readiness probe to be considered successful.
    required: false
  predictors.componentSpec.initContainers.readiness.failureThreshold:
    type: integer
    description: When a probe fails, Kubernetes will try `failureThreshold` times before giving up.
    required: false
  predictors.componentSpec.initContainers.readiness.httpGet.path:
    type: string
    description: Path to access on the HTTP server for the readiness probe.
    required: false
  predictors.componentSpec.initContainers.readiness.httpGet.port:
    type: string
    description: Name or number of the port to access on the container.
    required: false
  predictors.componentSpec.initContainers.readiness.httpGet.host:
    type: string
    description: Host name to connect to, defaults to the pod IP.
    required: false
  predictors.componentSpec.initContainers.readiness.httpGet.scheme:
    type: string
    description: Scheme to use for connecting to the host (HTTP or HTTPS).
    required: false
  predictors.componentSpec.initContainers.readiness.httpGet.httpHeaders:
    type: list
    description: Custom headers to set in the request.
    required: false
  predictors.componentSpec.initContainers.readiness.httpGet.httpHeaders.name:
    type: string
    description: Name of the HTTP header.
    required: true
  predictors.componentSpec.initContainers.readiness.httpGet.httpHeaders.value:
    type: string
    description: Value of the HTTP header.
    required: true
  predictors.componentSpec.initContainers.readiness.tcpSocket.port:
    type: string
    description: Port to access on the container.
    required: false
  predictors.componentSpec.initContainers.readiness.tcpSocket.host:
    type: string
    description: Optional host name to connect to.
    required: false
  predictors.componentSpec.initContainers.readiness.exec.command:
    type: list
    description: Command line to execute inside the container.
    required: false
  predictors.componentSpec.initContainers.readiness.grpc.port:
    type: integer
    description: Port number to access gRPC service.
    required: false
  predictors.componentSpec.initContainers.readiness.grpc.service:
    type: string
    description: Name of the gRPC service to call.
    required: false
  predictors.componentSpec.initContainers.lifecycle.preStop.exec.command:
    type: list
    description: Command to run in preStop lifecycle hook (exec)
    required: false
  predictors.componentSpec.initContainers.lifecycle.postStart.exec.command:
    type: list
    description: Command to run in postStart lifecycle hook (exec)
    required: false
  predictors.componentSpec.initContainers.lifecycle.preStop.httpGet.path:
    type: string
    description: HTTP path to access on the server for preStop hook
    required: false
  predictors.componentSpec.initContainers.lifecycle.preStop.httpGet.port:
    type: string
    description: Port to access on the server for preStop hook
    required: false
  predictors.componentSpec.initContainers.lifecycle.postStart.httpGet.path:
    type: string
    description: HTTP path to access on the server for postStart hook
    required: false
  predictors.componentSpec.initContainers.lifecycle.postStart.httpGet.port:
    type: string
    description: Port to access on the server for postStart hook
    required: false
  predictors.componentSpec.hpaSpec.minReplicas:
    type: integer
    description: Minimum number of replicas that the HPA can scale down to.
    required: true
  predictors.componentSpec.hpaSpec.maxReplicas:
    type: integer
    description: Maximum number of replicas that the HPA can scale up to.
    required: true
  predictors.componentSpec.hpaSpec.metricsv2:
    type: list
    description: List of HPA v2 metrics to use for scaling decisions.
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.type:
    type: string
    description: Type of metric (e.g., Resource, Pods, Object, External)
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.resource.name:
    type: string
    description: Name of the resource (e.g., cpu, memory).
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.resource.target.type:
    type: string
    description: Type of the target metric (Utilization, Value, AverageValue).
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.resource.target.value:
    type: string
    description: Target value of the metric (e.g., 500m for cpu).
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.resource.target.averageValue:
    type: string
    description: Average target value across pods.
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.resource.target.averageUtilization:
    type: integer
    description: Target average CPU/Memory utilization (as a percentage of requested value).
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.pods.metric.name:
    type: string
    description: Name of the pods metric (e.g., queue_length, requests_per_second).
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.pods.metric.selector.matchLabels:
    type: map
    description: Match labels for identifying the pods metric (key-value pairs).
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.pods.metric.selector.matchExpressions:
    type: list
    description: List of label selector requirements for the pods metric.
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.pods.metric.selector.matchExpressions.key:
    type: string
    description: Label key that the selector applies to.
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.pods.metric.selector.matchExpressions.operator:
    type: string
    description: Relationship between the key and values (In, NotIn, Exists, DoesNotExist).
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.pods.metric.selector.matchExpressions.values:
    type: list
    description: Array of string values to match against the label key.
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.pods.target.type:
    type: string
    description: Type of the pods target metric (Value or AverageValue).
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.pods.target.value:
    type: string
    description: Specific target value to trigger scaling (e.g., "10").
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.pods.target.averageValue:
    type: string
    description: Average value of the metric across all pods.
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.object.describedObject.kind:
    type: string
    description: Kind of the target object (e.g., Service, Ingress).
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.object.describedObject.name:
    type: string
    description: Name of the target Kubernetes object to scale against.
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.object.describedObject.apiVersion:
    type: string
    description: API version of the target object.
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.object.metric.name:
    type: string
    description: Name of the object metric to monitor (e.g., requests_per_second).
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.object.metric.selector.matchLabels:
    type: map
    description: Match labels for identifying the object metric (key-value pairs).
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.object.metric.selector.matchExpressions:
    type: list
    description: List of label selector requirements for the object metric.
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.object.metric.selector.matchExpressions.key:
    type: string
    description: Label key that the selector applies to.
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.object.metric.selector.matchExpressions.operator:
    type: string
    description: Operator for the selector expression (In, NotIn, Exists, DoesNotExist).
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.object.metric.selector.matchExpressions.values:
    type: list
    description: List of values for the selector expression.
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.object.target.type:
    type: string
    description: Type of metric target (Value or AverageValue).
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.object.target.value:
    type: string
    description: Specific target value to match (e.g., "5").
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.object.target.averageValue:
    type: string
    description: Average value of the metric across objects.
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.external.metric.name:
    type: string
    description: Name of the external metric to monitor.
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.external.metric.selector.matchLabels:
    type: map
    description: Match labels for selecting external metrics (key-value pairs).
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.external.metric.selector.matchExpressions:
    type: list
    description: Match expressions for filtering external metrics.
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.external.metric.selector.matchExpressions.key:
    type: string
    description: Label key to match against in the selector.
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.external.metric.selector.matchExpressions.operator:
    type: string
    description: Operator to apply to label key (In, NotIn, Exists, DoesNotExist).
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.external.metric.selector.matchExpressions.values:
    type: list
    description: List of string values for the expression (if applicable).
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.external.target.type:
    type: string
    description: Type of target value (Value or AverageValue).
    required: true
  predictors.componentSpec.hpaSpec.metricsv2.external.target.value:
    type: string
    description: Target value for the external metric.
    required: false
  predictors.componentSpec.hpaSpec.metricsv2.external.target.averageValue:
    type: string
    description: Average value of the metric over relevant pods.
    required: false
  predictors.componentSpec.hpaSpec.metrics.type:
    type: string
    description: Type of metric (e.g., Resource, Pods, Object, External).
    required: true
  predictors.componentSpec.hpaSpec.metrics.resource.name:
    type: string
    description: Name of the resource to scale on (e.g., cpu, memory).
    required: true
  predictors.componentSpec.hpaSpec.metrics.resource.targetAverageUtilization:
    type: integer
    description: Target average utilization across pods (in percentage).
    required: false
  predictors.componentSpec.hpaSpec.metrics.resource.targetAverageValue:
    type: string
    description: Target average raw value across pods (e.g., "500Mi").
    required: false
  predictors.componentSpec.hpaSpec.metrics.pods.metricName:
    type: string
    description: Name of the pods metric to monitor.
    required: true
  predictors.componentSpec.hpaSpec.metrics.pods.targetAverageValue:
    type: string
    description: Target average value of the metric across all pods.
    required: true
  predictors.componentSpec.hpaSpec.metrics.pods.selector.matchLabels:
    type: map
    description: Selector labels to filter time series for the pods metric.
    required: false
  predictors.componentSpec.hpaSpec.metrics.pods.selector.matchExpressions:
    type: list
    description: List of selector expressions to filter the pods metric.
    required: false
  predictors.componentSpec.hpaSpec.metrics.pods.selector.matchExpressions.key:
    type: string
    description: Label key for selector expression.
    required: true
  predictors.componentSpec.hpaSpec.metrics.pods.selector.matchExpressions.operator:
    type: string
    description: Operator (In, NotIn, Exists, DoesNotExist).
    required: true
  predictors.componentSpec.hpaSpec.metrics.pods.selector.matchExpressions.values:
    type: list
    description: Values to match for the label key.
    required: false
  predictors.componentSpec.hpaSpec.metrics.object.metricName:
    type: string
    description: Name of the metric associated with the object.
    required: true
  predictors.componentSpec.hpaSpec.metrics.object.targetValue:
    type: string
    description: Target value of the object metric.
    required: false
  predictors.componentSpec.hpaSpec.metrics.object.targetAverageValue:
    type: string
    description: Average target value of the object metric.
    required: false
  predictors.componentSpec.hpaSpec.metrics.object.target.apiVersion:
    type: string
    description: API version of the target object.
    required: true
  predictors.componentSpec.hpaSpec.metrics.object.target.kind:
    type: string
    description: Kind of the target Kubernetes object.
    required: true
  predictors.componentSpec.hpaSpec.metrics.object.target.name:
    type: string
    description: Name of the target object.
    required: true
  predictors.componentSpec.hpaSpec.metrics.object.selector.matchLabels:
    type: map
    description: Selector labels to filter time series for the object metric.
    required: false
  predictors.componentSpec.hpaSpec.metrics.object.selector.matchExpressions:
    type: list
    description: List of selector expressions to filter the object metric.
    required: false
  predictors.componentSpec.hpaSpec.metrics.object.selector.matchExpressions.key:
    type: string
    description: Label key for selector expression.
    required: true
  predictors.componentSpec.hpaSpec.metrics.object.selector.matchExpressions.operator:
    type: string
    description: Operator (In, NotIn, Exists, DoesNotExist).
    required: true
  predictors.componentSpec.hpaSpec.metrics.object.selector.matchExpressions.values:
    type: list
    description: Values to match for the label key.
    required: false
  predictors.componentSpec.hpaSpec.metrics.external.metricName:
    type: string
    description: Name of the external metric to scale on.
    required: true
  predictors.componentSpec.hpaSpec.metrics.external.targetValue:
    type: string
    description: Target raw value for the external metric.
    required: false
  predictors.componentSpec.hpaSpec.metrics.external.targetAverageValue:
    type: string
    description: Target average value for the external metric.
    required: false
  predictors.componentSpec.hpaSpec.metrics.external.metricSelector.matchLabels:
    type: map
    description: Label selectors to identify a specific time series.
    required: false
  predictors.componentSpec.hpaSpec.metrics.external.metricSelector.matchExpressions:
    type: list
    description: Match expressions for external metricSelector.
    required: false
  predictors.componentSpec.hpaSpec.metrics.external.metricSelector.matchExpressions.key:
    type: string
    description: Label key for selector expression.
    required: true
  predictors.componentSpec.hpaSpec.metrics.external.metricSelector.matchExpressions.operator:
    type: string
    description: Operator (In, NotIn, Exists, DoesNotExist).
    required: true
  predictors.componentSpec.hpaSpec.metrics.external.metricSelector.matchExpressions.values:
    type: list
    description: Values to match for the label key.
    required: false
  predictors.componentSpec.kedaSpec.minReplicaCount:
    type: integer
    description: Minimum number of replicas to scale down to with KEDA
    required: false
  predictors.componentSpec.kedaSpec.maxReplicaCount:
    type: integer
    description: Maximum number of replicas to scale up to with KEDA
    required: false
  predictors.componentSpec.kedaSpec.cooldownPeriod:
    type: integer
    description: Number of seconds to wait before scaling down
    required: false
  predictors.componentSpec.kedaSpec.pollingInterval:
    type: integer
    description: Interval in seconds to check for scaling metrics
    required: false
  predictors.componentSpec.kedaSpec.triggers:
    type: list
    description: List of KEDA triggers to define scaling behavior
    required: false
  predictors.componentSpec.kedaSpec.triggers.type:
    type: string
    description: Type of KEDA trigger (e.g. cpu, kafka, prometheus)
    required: true
  predictors.componentSpec.kedaSpec.triggers.name:
    type: string
    description: Optional name of the KEDA trigger
    required: false
  predictors.componentSpec.kedaSpec.triggers.metricType:
    type: string
    description: Metric type reported by this trigger (e.g., External, Resource)
    required: false
  predictors.componentSpec.kedaSpec.triggers.useCachedMetrics:
    type: boolean
    description: Whether KEDA should cache the trigger's metrics
    required: false
  predictors.componentSpec.kedaSpec.triggers.metadata:
    type: map
    description: Key-value map with trigger-specific metadata
    required: false
  predictors.componentSpec.kedaSpec.triggers.authenticationRef.name:
    type: string
    description: Name of the authentication reference used by the trigger
    required: false
  predictors.componentSpec.kedaSpec.triggers.authenticationRef.kind:
    type: string
    description: Optional kind for the authentication reference (e.g., Secret, TriggerAuthentication)
    required: false
  predictors.componentSpec.kedaSpec.advanced.restoreToOriginalReplicaCount:
    type: boolean
    description: Restore to the original replica count after scaling is no longer needed
    required: false
  predictors.componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig:
    type: map
    description: HPA behavior configuration as a key-value map
    required: false
  predictors.componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.name:
    type: string
    description: Name of the generated HPA resource
    required: false
  predictors.componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.stabilizationWindowSeconds:
    type: integer
    description: Time (in seconds) to wait before scaling up again
    required: false
  predictors.componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.selectPolicy:
    type: string
    description: Policy to select scaling behavior (e.g., Max, Min)
    required: false
  predictors.componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.tolerance:
    type: integer
    description: Minimum change required to trigger scale-up
    required: false
  predictors.componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.policies:
    type: list
    description: List of scale-up policies with type, value, and period
    required: false
  predictors.componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.policies.type:
    type: string
    description: Type of policy (e.g., Percent, Pods)
    required: true
  predictors.componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.policies.value:
    type: integer
    description: Value used by the policy
    required: true
  predictors.componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.policies.periodSeconds:
    type: integer
    description: Time period in seconds for this policy
    required: true
  predictors.componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.stabilizationWindowSeconds:
    type: integer
    description: Time (in seconds) to wait before scaling down again
    required: false
  predictors.componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.selectPolicy:
    type: string
    description: Policy to select scaling down behavior
    required: false
  predictors.componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.tolerance:
    type: integer
    description: Minimum change required to trigger scale-down
    required: false
  predictors.componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.policies:
    type: list
    description: List of scale-down policies with type, value, and period
    required: false
  predictors.componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.policies.type:
    type: string
    required: true
    description: Type of the scale-down policy
  predictors.componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.policies.value:
    type: integer
    required: true
    description: Threshold value for the policy
  predictors.componentSpec.kedaSpec.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.policies.periodSeconds:
    type: integer
    required: true
    description: Period in seconds for evaluating the scale-down policy
  predictors.componentSpec.kedaSpec.advanced.ScalingModifiers.formula:
    type: string
    description: Formula for adjusting scaling metrics (e.g., "metric / 100")
    required: false
  predictors.componentSpec.kedaSpec.advanced.ScalingModifiers.target:
    type: integer
    description: Target value used in the scaling formula
    required: false
  predictors.componentSpec.kedaSpec.advanced.ScalingModifiers.activationTarget:
    type: integer
    description: Threshold to activate scaling
    required: false
  predictors.componentSpec.kedaSpec.advanced.ScalingModifiers.metricType:
    type: string
    description: Type of metric (e.g., Value, AverageValue)
    required: false
  predictors.componentSpec.pdbSpec.minAvailable:
    type: string
    description: Minimum number or percentage of pods that must be available during disruptions
    required: false
  predictors.componentSpec.pdbSpec.maxUnavailable:
    type: string
    description: Maximum number or percentage of pods that may be unavailable during disruptions
    required: false
  predictors.engineResources.requests.cpu:
    type: string
    description: CPU requested for the Seldon engine sidecar
    required: false
  predictors.engineResources.requests.memory:
    type: string
    description: Memory requested for the Seldon engine sidecar
    required: false
  predictors.engineResources.limits.cpu:
    type: string
    description: Maximum CPU allowed for the Seldon engine sidecar
    required: false
  predictors.engineResources.limits.memory:
    type: string
    description: Maximum memory allowed for the Seldon engine sidecar
    required: false
  predictors.labels:
    type: list
    description: Custom labels applied to the predictor deployment
    required: false
  predictors.shadow:
    type: boolean
    description: If true, all traffic is shadowed to this predictor without impacting the response
    required: false
  predictors.ssl.certSecretName:
    type: string
    description: SSL certificate secret name for this predictor
    required: false
  predictors.progressDeadlineSeconds:
    type: integer
    description: Time in seconds the deployment controller should wait before marking the predictor as failed
    required: false
  predictors.explainer.type:
    type: string
    description: The type of explainer used to interpret model predictions. Allowed values- AnchorTabular, AnchorImages, AnchorText, Counterfactuals, Contrastive, KernelShap, IntegratedGradients, ALE, TreeShap
    required: false
  predictors.explainer.modelUri:
    type: string
    description: URI pointing to the explainer model location
    required: false
  predictors.explainer.config:
    type: map
    description: Key-value configuration settings passed to the explainer
    required: false
  predictors.explainer.endpoint.type:
    type: string
    description: Type of the endpoint protocol. Allowed values- REST, GRPC
    required: false
  predictors.explainer.envSecretRefName:
    type: string
    description: Name of the secret containing environment variables for the explainer
    required: false
  predictors.explainer.storageInitializerImage:
    type: string
    description: Custom image to use for the explainer's storage initializer
    required: false
  predictors.explainer.replicas:
    type: integer
    description: Number of replicas to run for the explainer deployment
    required: false
  predictors.explainer.initParameters:
    type: string
    description: JSON-formatted string with initialization parameters for the explainer
    required: false
  predictors.explainer.serviceAccountName:
    type: string
    description: Service account name to run the explainer under
    required: false
  predictors.explainer.containerSpec.name:
    type: string
    description: Name of the explainer container
    required: false
  predictors.explainer.containerSpec.image:
    type: string
    description: Container image for the explainer
    required: false
  predictors.explainer.containerSpec.args:
    type: list
    description: Command-line arguments passed to the explainer container
    required: false
  predictors.explainer.containerSpec.imagePullPolicy:
    type: string
    description: Policy for pulling explainer container image
    required: false

setupValuesSchema: |
  ---
  {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "properties": {
      "apiVersion": {
        "type": "string"
      },
      "chart": {
        "$ref": "#/definitions/chart"
      },
      "namespace": {
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/metadata"
      },
      "predictors": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/predictor"
        }
      },
      "annotations": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "protocol": {
        "type": "string",
        "enum": [
          "seldon",
          "tensorflow",
          "kfserving",
          "v2"
        ]
      },
      "transport": {
        "type": "string",
        "enum": [
          "rest",
          "grpc"
        ]
      },
      "subjectArea": {
        "type": "string"
      },
      "sourceMetafileName": {
        "type": "string"
      },
      "sourceMetafileRepo": {
        "type": "string"
      },
      "sourceMetafileBranch": {
        "type": "string"
      }
    },
    "required": [
      "chart",
      "predictors"
    ],
    "definitions": {
      "chart": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "version",
          "description"
        ]
      },
      "metadata": {
        "type": "object",
        "properties": {
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "predictor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "replicas": {
            "type": "integer"
          },
          "traffic": {
            "type": "integer"
          },
          "svcOrchSpec": {
            "$ref": "#/definitions/svcOrchSpec"
          },
          "graph": {
            "$ref": "#/definitions/graphNode"
          },
          "componentSpec": {
            "$ref": "#/definitions/componentSpec"
          },
          "engineResources": {
            "$ref": "#/definitions/resources"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "explainer": {
            "$ref": "#/definitions/explainer"
          },
          "shadow": {
            "type": "boolean"
          },
          "ssl": {
            "$ref": "#/definitions/ssl"
          },
          "progressDeadlineSeconds": {
            "type": "integer"
          }
        },
        "required": [
          "name",
          "graph"
        ]
      },
      "svcOrchSpec": {
        "type": "object",
        "properties": {
          "resources": {
            "$ref": "#/definitions/resources"
          },
          "env": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/envVar"
            }
          }
        }
      },
      "resources": {
        "type": "object",
        "properties": {
          "requests": {
            "$ref": "#/definitions/resourceQuantities"
          },
          "limits": {
            "$ref": "#/definitions/resourceQuantities"
          }
        }
      },
      "resourceQuantities": {
        "type": "object",
        "properties": {
          "cpu": {
            "type": "string"
          },
          "memory": {
            "type": "string"
          }
        }
      },
      "envVar": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "object"
          },
          "valueFrom": {
            "$ref": "#/definitions/valueFrom"
          }
        },
        "required": [
          "name"
        ]
      },
      "envFrom": {
        "type": "object",
        "properties": {
          "secretRef": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          },
          "configMapRef": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        }
      },
      "valueFrom": {
        "type": "object",
        "properties": {
          "secretKeyRef": {
            "$ref": "#/definitions/secretKeyRef"
          }
        },
        "required": [
          "secretKeyRef"
        ]
      },
      "secretKeyRef": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "key"
        ]
      },
      "graphNode": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "MODEL",
              "TRANSFORMER",
              "ROUTER",
              "COMBINER",
              "OUTPUT_TRANSFORMER",
              "UNKNOWN_TYPE"
            ]
          },
          "implementation": {
            "type": "string",
            "enum": [
              "UNKNOWN_IMPLEMENTATION",
              "SKLEARN_SERVER",
              "XGBOOST_SERVER",
              "TENSORFLOW_SERVER",
              "PYTORCH_SERV",
              "LIGHTGBM_SERVER",
              "CUSTOM",
              "TRITON_SERVER",
              "HUGGINGFACE_SERVER",
              "MLFLOW_SERVER",
              "ONNX_SERVER",
              "R_SERVER",
              "CUSTOM_INFERENCE_SERVER"
            ]
          },
          "modelUri": {
            "type": "string"
          },
          "storageInitializerImage": {
            "type": "string"
          },
          "envSecretRefName": {
            "type": "string"
          },
          "endpoint": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "REST",
                  "GRPC"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          "logger": {
            "type": "object",
            "properties": {
              "mode": {
                "type": "string",
                "enum": [
                  "all",
                  "request",
                  "response",
                  "none"
                ]
              },
              "url": {
                "type": "string"
              }
            },
            "required": [
              "mode"
            ]
          },
          "parameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "STRING",
                    "BOOL",
                    "INT",
                    "FLOAT",
                    "DOUBLE"
                  ]
                },
                "value": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "type",
                "value"
              ]
            }
          },
          "methods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "serviceAccountName": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/graphNode"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "componentSpec": {
        "type": "object",
        "properties": {
          "serviceAccountName": {
            "type": "string"
          },
          "terminationGracePeriodSeconds": {
            "type": "integer"
          },
          "containers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/container"
            }
          },
          "initContainers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/container"
            }
          },
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/volume"
            }
          },
          "hpaSpec": {
            "$ref": "#/definitions/hpaSpec"
          },
          "kedaSpec": {
            "$ref": "#/definitions/kedaSpec"
          },
          "pdbSpec": {
            "$ref": "#/definitions/pdbSpec"
          }
        }
      },
      "container": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "imagePullPolicy": {
            "type": "string",
            "enum": [
              "Always",
              "IfNotPresent",
              "Never"
            ]
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "env": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/envVar"
            }
          },
          "envFrom": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/envFrom"
            }
          },
          "volumeMounts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/volumeMount"
            }
          },
          "resources": {
            "$ref": "#/definitions/resources"
          },
          "liveness": {
            "$ref": "#/definitions/probe"
          },
          "readiness": {
            "$ref": "#/definitions/probe"
          },
          "lifecycle": {
            "$ref": "#/definitions/lifecycle"
          }
        },
        "required": [
          "name"
        ]
      },
      "volumeMount": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "mountPath": {
            "type": "string"
          },
          "readOnly": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "mountPath"
        ]
      },
      "volume": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "emptyDir": {
            "$ref": "#/definitions/emptyDirVolume"
          },
          "secret": {
            "$ref": "#/definitions/secretVolumeSource"
          }
        },
        "required": [
          "name"
        ]
      },
      "emptyDirVolume": {
        "type": "object",
        "properties": {
          "medium": {
            "type": "string"
          },
          "sizeLimit": {
            "type": "string"
          }
        }
      },
      "secretVolumeSource": {
        "type": "object",
        "properties": {
          "secretName": {
            "type": "string"
          }
        }
      },
      "probe": {
        "type": "object",
        "properties": {
          "initialDelaySeconds": {
            "type": "integer"
          },
          "periodSeconds": {
            "type": "integer"
          },
          "timeoutSeconds": {
            "type": "integer"
          },
          "successThreshold": {
            "type": "integer"
          },
          "failureThreshold": {
            "type": "integer"
          },
          "httpGet": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "port": { },
              "host": {
                "type": "string"
              },
              "scheme": {
                "type": "string"
              },
              "httpHeaders": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "value"
                  ]
                }
              }
            }
          },
          "tcpSocket": {
            "type": "object",
            "properties": {
              "port": {
                "type": "string"
              },
              "host": {
                "type": "string"
              }
            }
          },
          "exec": {
            "type": "object",
            "properties": {
              "command": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "grpc": {
            "type": "object",
            "properties": {
              "port": {
                "type": "integer"
              },
              "service": {
                "type": "string"
              }
            }
          }
        }
      },
      "lifecycle": {
        "type": "object",
        "properties": {
          "postStart": {
            "$ref": "#/definitions/lifecycleHandler"
          },
          "preStop": {
            "$ref": "#/definitions/lifecycleHandler"
          }
        }
      },
      "lifecycleHandler": {
        "type": "object",
        "properties": {
          "exec": {
            "type": "object",
            "properties": {
              "command": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "httpGet": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "scheme": {
                "type": "string"
              },
              "httpHeaders": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "tcpSocket": {
            "type": "object",
            "properties": {
              "port": {
                "type": "string"
              },
              "host": {
                "type": "string"
              }
            }
          }
        }
      },
      "hpaSpec": {
        "type": "object",
        "properties": {
          "minReplicas": {
            "type": "integer"
          },
          "maxReplicas": {
            "type": "integer"
          },
          "metricsv2": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "Resource",
                    "Pods",
                    "Object",
                    "External"
                  ]
                },
                "resource": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "target": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "Utilization",
                            "Value",
                            "AverageValue"
                          ]
                        },
                        "averageUtilization": {
                          "type": "integer"
                        },
                        "averageValue": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "pods": {
                  "type": "object",
                  "properties": {
                    "metric": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "object",
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "matchExpressions": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string"
                                  },
                                  "operator": {
                                    "type": "string"
                                  },
                                  "values": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "target": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "Utilization",
                            "Value",
                            "AverageValue"
                          ]
                        },
                        "averageValue": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "object": {
                  "type": "object",
                  "properties": {
                    "describedObject": {
                      "type": "object",
                      "properties": {
                        "kind": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "apiVersion": {
                          "type": "string"
                        }
                      }
                    },
                    "metric": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "object",
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "matchExpressions": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string"
                                  },
                                  "operator": {
                                    "type": "string"
                                  },
                                  "values": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "target": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "Utilization",
                            "Value",
                            "AverageValue"
                          ]
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "external": {
                  "type": "object",
                  "properties": {
                    "metric": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "object",
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "matchExpressions": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string"
                                  },
                                  "operator": {
                                    "type": "string"
                                  },
                                  "values": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "target": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "Utilization",
                            "Value",
                            "AverageValue"
                          ]
                        },
                        "value": {
                          "type": "string"
                        },
                        "averageValue": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "metrics": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "Resource",
                    "Pods",
                    "Object",
                    "External"
                  ]
                },
                "resource": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "targetAverageUtilization": {
                      "type": "integer"
                    },
                    "targetAverageValue": {
                      "type": "string"
                    }
                  }
                },
                "pods": {
                  "type": "object",
                  "properties": {
                    "metricName": {
                      "type": "string"
                    },
                    "targetAverageValue": {
                      "type": "string"
                    },
                    "selector": {
                      "type": "object",
                      "properties": {
                        "matchLabels": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "matchExpressions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "operator": {
                                "type": "string"
                              },
                              "values": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "object": {
                  "type": "object",
                  "properties": {
                    "target": {
                      "type": "object",
                      "properties": {
                        "kind": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "apiVersion": {
                          "type": "string"
                        }
                      }
                    },
                    "metricName": {
                      "type": "string"
                    },
                    "targetValue": {
                      "type": "string"
                    },
                    "selector": {
                      "type": "object",
                      "properties": {
                        "matchLabels": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "matchExpressions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "operator": {
                                "type": "string"
                              },
                              "values": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "averageValue": {
                      "type": "string"
                    }
                  }
                },
                "external": {
                  "type": "object",
                  "properties": {
                    "metricName": {
                      "type": "string"
                    },
                    "targetValue": {
                      "type": "string"
                    },
                    "targetAverageValue": {
                      "type": "string"
                    },
                    "metricSelector": {
                      "type": "object",
                      "properties": {
                        "matchLabels": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "matchExpressions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "operator": {
                                "type": "string"
                              },
                              "values": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "target": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Utilization",
                          "Value",
                          "AverageValue"
                        ]
                      },
                      "value": {
                        "type": "string"
                      },
                      "averageValue": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "kedaSpec": {
        "type": "object",
        "properties": {
          "minReplicaCount": {
            "type": "integer"
          },
          "maxReplicaCount": {
            "type": "integer"
          },
          "cooldownPeriod": {
            "type": "integer"
          },
          "pollingInterval": {
            "type": "integer"
          },
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/kedaTrigger"
            }
          },
          "advanced": {
            "$ref": "#/definitions/kedaAdvancedSpec"
          }
        }
      },
      "kedaTrigger": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "useCachedMetrics": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "authenticationRef": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "kind": {
                "type": "string"
              }
            }
          }
        }
      },
      "kedaAdvancedSpec": {
        "type": "object",
        "properties": {
          "restoreToOriginalReplicaCount": {
            "type": "boolean"
          },
          "scalingModifiers": {
            "type": "object",
            "properties": {
              "formula": {
                "type": "string"
              },
              "target": {
                "type": "string"
              },
              "activationTarget": {
                "type": "string"
              },
              "metricType": {
                "type": "string"
              }
            }
          },
          "horizontalPodAutoscalerConfig": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "behavior": {
                "type": "object",
                "properties": {
                  "scaleUp": {
                    "$ref": "#/definitions/hpaScalingRules"
                  },
                  "scaleDown": {
                    "$ref": "#/definitions/hpaScalingRules"
                  }
                }
              }
            }
          }
        }
      },
      "hpaScalingRules": {
        "type": "object",
        "properties": {
          "stabilizationWindowSeconds": {
            "type": "integer"
          },
          "selectPolicy": {
            "type": "string"
          },
          "policies": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "value": {
                  "type": "integer"
                },
                "periodSeconds": {
                  "type": "integer"
                }
              }
            }
          },
          "tolerance": {
            "type": "string"
          }
        }
      },
      "pdbSpec": {
        "type": "object",
        "properties": {
          "minAvailable": {
            "type": "string"
          },
          "maxUnavailable": {
            "type": "string"
          }
        }
      },
      "explainer": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AnchorTabular",
              "AnchorImages",
              "AnchorText",
              "Counterfactuals",
              "Contrastive",
              "KernelShap",
              "IntegratedGradients",
              "ALE",
              "TreeShap"
            ]
          },
          "modelUri": {
            "type": "string"
          },
          "serviceAccountName": {
            "type": "string"
          },
          "storageInitializerImage": {
            "type": "string"
          },
          "envSecretRefName": {
            "type": "string"
          },
          "initParameters": {
            "type": "string"
          },
          "replicas": {
            "type": "integer"
          },
          "endpoint": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              }
            }
          },
          "config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "containerSpec": {
            "$ref": "#/definitions/container"
          }
        }
      },
      "ssl": {
        "type": "object",
        "properties": {
          "certSecretName": {
            "type": "string"
          }
        }
      }
    }
  }
